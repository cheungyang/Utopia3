<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>utopia3: trunk/lib/components/mallocworks/Controller/old/ModuleController.php Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript">
$(document).ready(initResizable);
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body onload='searchBox.OnSelectItem(0);'>
<!-- Generated by Doxygen 1.7.3 -->
<script type="text/javascript"><!--
var searchBox = new SearchBox("searchBox", "search",false,'Search');
--></script>
<div id="top">
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">utopia3</div>
   <div id="projectbrief">utopia framework - version3</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.html"><span>Namespaces</span></a></li>
      <li><a href="annotated.html"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li id="searchli">
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('old_2_module_controller_8php.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<h1>trunk/lib/components/mallocworks/Controller/old/ModuleController.php</h1>  </div>
</div>
<div class="contents">
<div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 &lt;?php
<a name="l00002"></a>00002 <span class="keyword">namespace </span>Utopia\Components\Http;
<a name="l00003"></a>00003 
<a name="l00004"></a>00004 use Utopia\Components\Object\DataObject;
<a name="l00005"></a>00005 use Utopia\Components\DependencyInjection\ServiceContainer;
<a name="l00006"></a>00006 use Utopia\Components\Autoloader\Autoload;
<a name="l00007"></a>00007 use Utopia\Components\Http\IApplication;
<a name="l00008"></a>00008 use Utopia\Components\Logger\Log;
<a name="l00009"></a>00009 
<a name="l00010"></a><a class="code" href="class_utopia_1_1_components_1_1_http_1_1_module_application.html">00010</a> <span class="keyword">class </span><a class="code" href="class_utopia_1_1_components_1_1_http_1_1_module_application.html">ModuleApplication</a> <span class="keyword">extends</span> <a class="code" href="class_utopia_1_1_components_1_1_http_1_1_api_application.html">ApiApplication</a> implements <a class="code" href="interface_utopia_1_1_components_1_1_http_1_1_i_application.html">IApplication</a>
<a name="l00011"></a>00011 {
<a name="l00012"></a>00012         <span class="comment">//use the same set of controllers?</span>
<a name="l00013"></a>00013     <span class="keyword">protected</span> $event_name = <span class="stringliteral">&#39;core.module.controllers&#39;</span>;
<a name="l00014"></a>00014 
<a name="l00015"></a>00015     <span class="comment">//as $this-&gt;data is a VarObject, each dirty get will invoke a validation call</span>
<a name="l00016"></a>00016     <span class="keyword">protected</span> $dataSpec = &lt;&lt;&lt;EOF
<a name="l00017"></a>00017 url:            { req: <span class="keyword">true</span>, type: <span class="keywordtype">string</span> }
<a name="l00018"></a>00018 method:         { req: <span class="keyword">true</span>, def: <span class="stringliteral">&#39;GET&#39;</span>, type: [<span class="stringliteral">&#39;GET&#39;</span>,<span class="stringliteral">&#39;POST&#39;</span>,<span class="stringliteral">&#39;PUT&#39;</span>,<span class="stringliteral">&#39;DELETE&#39;</span>] }
<a name="l00019"></a>00019 response:   { req: <span class="keyword">true</span>, def: [], type: <span class="stringliteral">&#39;array&#39;</span> }
<a name="l00020"></a>00020 <span class="keyword">template</span>:       { req: <span class="keyword">false</span>, type: <span class="stringliteral">&#39;string&#39;</span> }
<a name="l00021"></a>00021 script:     { req: <span class="keyword">false</span>, type: <span class="stringliteral">&#39;array&#39;</span> }
<a name="l00022"></a>00022 style:      { req: <span class="keyword">false</span>, type: <span class="stringliteral">&#39;array&#39;</span> }
<a name="l00023"></a>00023 headers:     { req: <span class="keyword">false</span>, type: <span class="stringliteral">&#39;array&#39;</span> }
<a name="l00024"></a>00024 EOF;
<a name="l00025"></a>00025 
<a name="l00026"></a>00026     <span class="comment">//protected $pattern = &#39;/^(?#Protocol)(?:(?:ht|f)tp(?:s?)\:\/\/|~\/|\/)?(?#Username:Password)(?:\w+:\w+@)?(?#Subdomains)(?:(?:[-\w]+\.)+(?#TopLevel Domains)(?:com|org|net|gov|mil|biz|info|mobi|name|aero|jobs|museum|travel|[a-z]{2}))(?#Port)(?::[\d]{1,5})?(?#Directories)(?:(?:(?:\/(?:[-\w~!$+|.,=]|%[a-f\d]{2})+)+|\/)+|\?|#)?(?#Query)(?:(?:\?(?:[-\w~!$+|.,*:]|%[a-f\d{2}])+=?(?:[-\w~!$+|.,*:=]|%[a-f\d]{2})*)(?:&amp;(?:[-\w~!$+|.,*:]|%[a-f\d{2}])+=?(?:[-\w~!$+|.,*:=]|%[a-f\d]{2})*)*)*(?#Anchor)(?:#(?:[-\w~!$+|.,*:=]|%[a-f\d]{2})*)?$/&#39;;</span>
<a name="l00027"></a>00027     <span class="keyword">protected</span> $pattern = <span class="stringliteral">&#39;/^(?#Protocol)(?:(?:ht|f)tp(?:s?)\:\/\/|~\/|\/)/&#39;</span>;
<a name="l00028"></a>00028 
<a name="l00029"></a>00029     <span class="keyword">private</span> $_addexternal_done = <span class="keyword">false</span>; <span class="comment">//to keep track if addExternals func is run before</span>
<a name="l00030"></a>00030 
<a name="l00031"></a>00031 
<a name="l00032"></a><a class="code" href="class_utopia_1_1_components_1_1_http_1_1_module_application.html#a340e2fe39427e16d9b82e6e0c0cce2b8">00032</a>     <span class="keyword">public</span> function <a class="code" href="class_utopia_1_1_components_1_1_http_1_1_module_application.html#a340e2fe39427e16d9b82e6e0c0cce2b8">__construct</a>(ServiceContainer $sc, <a class="code" href="class_utopia_1_1_components_1_1_autoloader_1_1_autoload.html">Autoload</a> $autoload) {
<a name="l00033"></a>00033         parent::__construct($sc, $autoload);
<a name="l00034"></a>00034     }
<a name="l00035"></a>00035 
<a name="l00041"></a><a class="code" href="class_utopia_1_1_components_1_1_http_1_1_module_application.html#a7516ca30af0db3cdbf9a7739b48ce91d">00041</a>     <span class="keyword">public</span> function <a class="code" href="class_utopia_1_1_components_1_1_http_1_1_module_application.html#a7516ca30af0db3cdbf9a7739b48ce91d">__toString</a>() {
<a name="l00042"></a>00042         <span class="comment">//rendering this way assumes that it is part of a page</span>
<a name="l00043"></a>00043         <span class="comment">//will suppress js/css as they will be consolidated</span>
<a name="l00044"></a>00044         <span class="keywordflow">return</span> $this-&gt;asHtml(<span class="keyword">false</span>);
<a name="l00045"></a>00045     }
<a name="l00046"></a>00046 
<a name="l00047"></a>00047 
<a name="l00054"></a><a class="code" href="class_utopia_1_1_components_1_1_http_1_1_module_application.html#a0eb52356889d21276080a9b7ceabf51f">00054</a>     <span class="keyword">public</span> function <a class="code" href="class_utopia_1_1_components_1_1_http_1_1_module_application.html#a0eb52356889d21276080a9b7ceabf51f">__call</a>($name, $argument){
<a name="l00055"></a>00055         $this-&gt;sc-&gt;logger-&gt;trace();
<a name="l00056"></a>00056         $this-&gt;sc-&gt;logger-&gt;log(<span class="stringliteral">&quot;ERROR: function $name does not exist in module application&quot;</span>, Log::LEVEL_ERROR);
<a name="l00057"></a>00057         <span class="keywordflow">return</span> $this;
<a name="l00058"></a>00058     }
<a name="l00059"></a>00059 
<a name="l00066"></a><a class="code" href="class_utopia_1_1_components_1_1_http_1_1_module_application.html#a8c34073e5e433931085430ecdf461065">00066</a>     <span class="keyword">public</span> function <span class="keyword">get</span>($name, $default=<span class="keyword">false</span>) {
<a name="l00067"></a>00067         <span class="keywordflow">if</span> (preg_match(<span class="stringliteral">&#39;/^apis&#39;</span>.SEP.<span class="stringliteral">&#39;(?P&lt;name&gt;.*)$/&#39;</span>, $name, $matches)) {
<a name="l00068"></a>00068             <span class="keywordflow">return</span> $this-&gt;getApiValue($matches[<span class="stringliteral">&#39;name&#39;</span>], $default);
<a name="l00069"></a>00069         } elseif (preg_match(<span class="stringliteral">&#39;/^modules&#39;</span>.SEP.<span class="stringliteral">&#39;(?P&lt;name&gt;.*)$/&#39;</span>, $name, $matches)) {
<a name="l00070"></a>00070             <span class="keywordflow">return</span> $this-&gt;getModuleValue($matches[<span class="stringliteral">&#39;name&#39;</span>], $default);
<a name="l00071"></a>00071         } elseif ($name == <span class="stringliteral">&#39;apis&#39;</span>) {
<a name="l00072"></a>00072             <span class="keywordflow">return</span> $this-&gt;getApis();
<a name="l00073"></a>00073         } elseif ($name == <span class="stringliteral">&#39;modules&#39;</span>) {
<a name="l00074"></a>00074             <span class="keywordflow">return</span> $this-&gt;getModules();
<a name="l00075"></a>00075         }<span class="keywordflow">else</span> {
<a name="l00076"></a>00076             <span class="keywordflow">return</span> $default;
<a name="l00077"></a>00077         }
<a name="l00078"></a>00078     }
<a name="l00079"></a>00079 
<a name="l00080"></a>00080     <span class="comment">/*=======================</span>
<a name="l00081"></a>00081 <span class="comment">     * TEMPLATE management</span>
<a name="l00082"></a>00082 <span class="comment">     * ======================</span>
<a name="l00083"></a>00083 <span class="comment">     */</span>
<a name="l00091"></a><a class="code" href="class_utopia_1_1_components_1_1_http_1_1_module_application.html#a7a8cb9324c8d96cb445f37d85e107d21">00091</a>     <span class="keyword">public</span> function <a class="code" href="class_utopia_1_1_components_1_1_http_1_1_module_application.html#a7a8cb9324c8d96cb445f37d85e107d21">addExternals</a>() {
<a name="l00092"></a>00092         <span class="keywordflow">if</span> ($this-&gt;_addexternal_done) {
<a name="l00093"></a>00093             <span class="keywordflow">return</span> $this;
<a name="l00094"></a>00094         }
<a name="l00095"></a>00095         $this-&gt;_addexternal_done = <span class="keyword">true</span>;
<a name="l00096"></a>00096 
<a name="l00097"></a>00097         <span class="keywordflow">if</span> (!isset($this-&gt;controller)) {
<a name="l00098"></a>00098             $this-&gt;sc-&gt;logger-&gt;log(<span class="stringliteral">&#39;WARNING: addExternals failed as controller is not yet defined&#39;</span>, Log::LEVEL_WARNING);
<a name="l00099"></a>00099             <span class="keywordflow">return</span> $this;
<a name="l00100"></a>00100         }
<a name="l00101"></a>00101 
<a name="l00102"></a>00102         $externals = $this-&gt;controller-&gt;getExternal();
<a name="l00103"></a>00103         <span class="keywordflow">if</span> (is_array($externals)) {
<a name="l00104"></a>00104             <span class="keywordflow">foreach</span>($externals as $key =&gt; $values) {
<a name="l00105"></a>00105                 <span class="keywordflow">switch</span>($key) {
<a name="l00106"></a>00106                     <span class="keywordflow">case</span> <span class="stringliteral">&#39;css&#39;</span>:
<a name="l00107"></a>00107                        <span class="keywordflow">if</span> ($this-&gt;sc-&gt;getParameter(<span class="stringliteral">&#39;minify&#39;</span>) != <span class="keyword">true</span>) {
<a name="l00108"></a>00108                            <span class="keywordflow">if</span> (isset($values[<span class="stringliteral">&#39;inc&#39;</span>])){
<a name="l00109"></a>00109                                <span class="keywordflow">foreach</span>($values[<span class="stringliteral">&#39;inc&#39;</span>] as $v) {
<a name="l00110"></a>00110                                     $this-&gt;addStyles($v);
<a name="l00111"></a>00111                                }
<a name="l00112"></a>00112                            } <span class="keywordflow">else</span> {
<a name="l00113"></a>00113                                $this-&gt;sc-&gt;logger-&gt;log(<span class="stringliteral">&#39;WARNING: css yaml config is not well formed - should have &quot;ver&quot; and &quot;inc&quot; items&#39;</span>, Log::LEVEL_WARNING);
<a name="l00114"></a>00114                            }
<a name="l00115"></a>00115                        } <span class="keywordflow">else</span> {
<a name="l00116"></a>00116                            $ver = isset($values[<span class="stringliteral">&#39;ver&#39;</span>])? $values[<span class="stringliteral">&#39;ver&#39;</span>]: time();
<a name="l00117"></a>00117                            error_log(<span class="stringliteral">&#39;ver:&#39;</span>. $ver);
<a name="l00118"></a>00118                            $this-&gt;addStyles(<span class="stringliteral">&#39;/css/&#39;</span>.$this-&gt;controller-&gt;getName().<span class="stringliteral">&#39;?v=&#39;</span>.$ver);
<a name="l00119"></a>00119                        }
<a name="l00120"></a>00120                        <span class="keywordflow">break</span>;
<a name="l00121"></a>00121                     <span class="keywordflow">case</span> <span class="stringliteral">&#39;js&#39;</span>:
<a name="l00122"></a>00122                         <span class="keywordflow">if</span> ($this-&gt;sc-&gt;getParameter(<span class="stringliteral">&#39;minify&#39;</span>) != <span class="keyword">true</span>) {
<a name="l00123"></a>00123                            <span class="keywordflow">if</span> (isset($values[<span class="stringliteral">&#39;inc&#39;</span>])){
<a name="l00124"></a>00124                                <span class="keywordflow">foreach</span>($values[<span class="stringliteral">&#39;inc&#39;</span>] as $v) {
<a name="l00125"></a>00125                                     $this-&gt;addScripts($v);
<a name="l00126"></a>00126                                }
<a name="l00127"></a>00127                           } <span class="keywordflow">else</span> {
<a name="l00128"></a>00128                                $this-&gt;sc-&gt;logger-&gt;log(<span class="stringliteral">&#39;WARNING: js yaml config is not well formed - should have &quot;ver&quot; and &quot;inc&quot; items&#39;</span>, Log::LEVEL_WARNING);
<a name="l00129"></a>00129                           }
<a name="l00130"></a>00130                        } <span class="keywordflow">else</span> {
<a name="l00131"></a>00131                            $ver = isset($values[<span class="stringliteral">&#39;ver&#39;</span>])? $values[<span class="stringliteral">&#39;ver&#39;</span>]: time();
<a name="l00132"></a>00132                            $this-&gt;addScripts(<span class="stringliteral">&#39;/js/&#39;</span>.$this-&gt;controller-&gt;getName().<span class="stringliteral">&#39;?v=&#39;</span>.$ver);
<a name="l00133"></a>00133                        }
<a name="l00134"></a>00134                        <span class="keywordflow">break</span>;
<a name="l00135"></a>00135                     <span class="keywordflow">case</span> <span class="stringliteral">&#39;tpl&#39;</span>:
<a name="l00136"></a>00136                        <span class="keywordflow">if</span> (!empty($values)) {
<a name="l00137"></a>00137                            $this-&gt;setTemplate($values);
<a name="l00138"></a>00138                        }
<a name="l00139"></a>00139                        <span class="keywordflow">break</span>;
<a name="l00140"></a>00140                     <span class="keywordflow">default</span>:
<a name="l00141"></a>00141                 }
<a name="l00142"></a>00142             }
<a name="l00143"></a>00143         }
<a name="l00144"></a>00144         <span class="keywordflow">return</span> $this;
<a name="l00145"></a>00145     }
<a name="l00146"></a>00146 
<a name="l00154"></a><a class="code" href="class_utopia_1_1_components_1_1_http_1_1_module_application.html#ab521628ddb30fd03b2f6a991ce99d64a">00154</a>     <span class="keyword">public</span> function <a class="code" href="class_utopia_1_1_components_1_1_http_1_1_module_application.html#ab521628ddb30fd03b2f6a991ce99d64a">asHtml</a>($jscss=<span class="keyword">true</span>) {
<a name="l00155"></a>00155         <span class="comment">//TODO: need to check if it is dirty check cache</span>
<a name="l00156"></a>00156 <span class="comment">//        if (isset($this-&gt;applications-&gt;{&#39;returns&#39;.SEP.&#39;html&#39;})) {</span>
<a name="l00157"></a>00157 <span class="comment">//            return $this-&gt;applications-&gt;{&#39;returns&#39;.SEP.&#39;html&#39;};</span>
<a name="l00158"></a>00158 <span class="comment">//        }</span>
<a name="l00159"></a>00159 
<a name="l00160"></a>00160         <span class="keywordflow">if</span> ($this-&gt;getStatus() == ApiApplication::INIT) {
<a name="l00161"></a>00161             <span class="comment">//not run yet, run now</span>
<a name="l00162"></a>00162             $this-&gt;run();
<a name="l00163"></a>00163         }
<a name="l00164"></a>00164 
<a name="l00165"></a>00165         <span class="comment">//check if controller in place</span>
<a name="l00166"></a>00166         <span class="keywordflow">if</span> (!isset($this-&gt;controller)) {
<a name="l00167"></a>00167             <span class="keywordflow">return</span> <span class="stringliteral">&#39;&#39;</span>;
<a name="l00168"></a>00168         }
<a name="l00169"></a>00169 
<a name="l00170"></a>00170         <span class="comment">//set default template name if not specified</span>
<a name="l00171"></a>00171         <span class="keywordflow">if</span> (!$this-&gt;getTemplate()) {
<a name="l00172"></a>00172             $this-&gt;setTemplate($this-&gt;controller-&gt;getName());
<a name="l00173"></a>00173         }
<a name="l00174"></a>00174 
<a name="l00175"></a>00175         <span class="keywordflow">if</span> ($this-&gt;getStatus() != ApiApplication::ERROR) {
<a name="l00176"></a>00176             <span class="comment">//set template/js/css</span>
<a name="l00177"></a>00177             $this-&gt;addExternals();
<a name="l00178"></a>00178 
<a name="l00179"></a>00179             <span class="comment">//check template</span>
<a name="l00180"></a>00180             <span class="keywordflow">if</span> (!file_exists($this-&gt;getTemplate())) {
<a name="l00181"></a>00181                 $template_fullpath = $this-&gt;autoload-&gt;getFilePath($this-&gt;getTemplate(), <span class="stringliteral">&#39;template&#39;</span>);
<a name="l00182"></a>00182             } <span class="keywordflow">else</span> {
<a name="l00183"></a>00183                 $template_fullpath = $this-&gt;getTemplate();
<a name="l00184"></a>00184             }
<a name="l00185"></a>00185             <span class="keywordflow">if</span> (!$template_fullpath) {
<a name="l00186"></a>00186                 $this-&gt;sc-&gt;logger-&gt;log(<span class="stringliteral">&#39;ERROR: template &#39;</span>. $this-&gt;getTemplate() . <span class="stringliteral">&#39; not found&#39;</span>, Log::LEVEL_ERROR);
<a name="l00187"></a>00187                 <span class="keywordflow">return</span> <span class="stringliteral">&#39;&#39;</span>;
<a name="l00188"></a>00188             }
<a name="l00189"></a>00189 <span class="comment">//            else {</span>
<a name="l00190"></a>00190 <span class="comment">//                $this-&gt;sc-&gt;logger-&gt;log(&#39;tempate loaded: &#39;.$template_fullpath, Log::LEVEL_DEBUG);</span>
<a name="l00191"></a>00191 <span class="comment">//            }</span>
<a name="l00192"></a>00192 
<a name="l00193"></a>00193             <span class="comment">//formulate html</span>
<a name="l00194"></a>00194             $template = $this-&gt;sc-&gt;template;
<a name="l00195"></a>00195             $template
<a name="l00196"></a>00196                 -&gt;setRenderEngine(<span class="stringliteral">&#39;php&#39;</span>)
<a name="l00197"></a>00197                 -&gt;setTemplate($template_fullpath)
<a name="l00198"></a>00198                 -&gt;setApplication($this);
<a name="l00199"></a>00199             $this-&gt;applications-&gt;{<span class="stringliteral">&#39;returns&#39;</span>.SEP.<span class="stringliteral">&#39;html&#39;</span>} = $template-&gt;render($this-&gt;getReturnValues(<span class="stringliteral">&#39;array&#39;</span>), $jscss);
<a name="l00200"></a>00200 
<a name="l00201"></a>00201             <span class="comment">//output</span>
<a name="l00202"></a>00202             <span class="keywordflow">return</span> $this-&gt;applications-&gt;{<span class="stringliteral">&#39;returns&#39;</span>.SEP.<span class="stringliteral">&#39;html&#39;</span>};
<a name="l00203"></a>00203         } <span class="keywordflow">else</span> {
<a name="l00204"></a>00204             $this-&gt;sc-&gt;logger-&gt;log(<span class="stringliteral">&#39;ERROR: template not running due to errors in controller&#39;</span>, Log::LEVEL_ERROR);
<a name="l00205"></a>00205             <span class="keywordflow">return</span> <span class="stringliteral">&#39;&#39;</span>;
<a name="l00206"></a>00206         }
<a name="l00207"></a>00207     }
<a name="l00208"></a>00208 
<a name="l00209"></a>00209     <span class="keyword">public</span> function setTemplate($template) {
<a name="l00210"></a>00210         $this-&gt;data-&gt;set(<span class="stringliteral">&#39;template&#39;</span>, $template);
<a name="l00211"></a>00211         <span class="keywordflow">return</span> $this;
<a name="l00212"></a>00212     }
<a name="l00213"></a>00213 
<a name="l00214"></a>00214     <span class="keyword">public</span> function getTemplate() {
<a name="l00215"></a>00215 <span class="comment">//        if (!isset($this-&gt;data-&gt;template)) {</span>
<a name="l00216"></a>00216 <span class="comment">//            $this-&gt;sc-&gt;logger-&gt;log(&#39;Warning: no template is given at getTemplate()&#39;, Log::LEVEL_WARNING);</span>
<a name="l00217"></a>00217 <span class="comment">//        }</span>
<a name="l00218"></a>00218         <span class="keywordflow">return</span> $this-&gt;data-&gt;get(<span class="stringliteral">&#39;template&#39;</span>,<span class="keyword">false</span>);
<a name="l00219"></a>00219     }
<a name="l00220"></a>00220 
<a name="l00221"></a>00221     <span class="keyword">public</span> function getScripts() {
<a name="l00222"></a>00222         <span class="comment">//get all styles from child modules (one level each time, therefore getModules is not used)</span>
<a name="l00223"></a>00223         $scripts = $this-&gt;data-&gt;get(<span class="stringliteral">&#39;script&#39;</span>,array());
<a name="l00224"></a>00224         $modules = $this-&gt;applications-&gt;get(<span class="stringliteral">&#39;modules&#39;</span>, array());
<a name="l00225"></a>00225         <span class="keywordflow">foreach</span>($modules as $m) {
<a name="l00226"></a>00226             $scripts = array_merge($scripts, $m-&gt;addExternals()-&gt;getScripts());
<a name="l00227"></a>00227         }
<a name="l00228"></a>00228         <span class="comment">//remove duplicates</span>
<a name="l00229"></a>00229         <span class="keywordflow">return</span> array_unique($scripts);
<a name="l00230"></a>00230     }
<a name="l00231"></a>00231 
<a name="l00232"></a>00232     <span class="keyword">public</span> function getStyles() {
<a name="l00233"></a>00233         <span class="comment">//get all styles from child modules (one level each time, therefore getModules is not used)</span>
<a name="l00234"></a>00234         $styles = $this-&gt;data-&gt;get(<span class="stringliteral">&#39;style&#39;</span>,array());
<a name="l00235"></a>00235         $modules = $this-&gt;applications-&gt;get(<span class="stringliteral">&#39;modules&#39;</span>, array());
<a name="l00236"></a>00236         <span class="keywordflow">foreach</span>($modules as $m) {
<a name="l00237"></a>00237             $styles = array_merge($styles, $m-&gt;addExternals()-&gt;getStyles());
<a name="l00238"></a>00238         }
<a name="l00239"></a>00239         <span class="comment">//remove duplicates</span>
<a name="l00240"></a>00240         <span class="keywordflow">return</span> array_unique($styles);
<a name="l00241"></a>00241     }
<a name="l00242"></a>00242 
<a name="l00243"></a>00243     <span class="keyword">public</span> function addScripts($script) {
<a name="l00244"></a>00244         <span class="keywordflow">if</span> (is_array($script)) {
<a name="l00245"></a>00245             $this-&gt;data-&gt;merge(<span class="stringliteral">&#39;script&#39;</span>, $script);
<a name="l00246"></a>00246         } <span class="keywordflow">else</span> {
<a name="l00247"></a>00247             $this-&gt;data-&gt;push(<span class="stringliteral">&#39;script&#39;</span>, $script);
<a name="l00248"></a>00248         }
<a name="l00249"></a>00249         <span class="keywordflow">return</span> $this;
<a name="l00250"></a>00250     }
<a name="l00251"></a>00251 
<a name="l00252"></a>00252     <span class="keyword">public</span> function addStyles($style) {
<a name="l00253"></a>00253         <span class="keywordflow">if</span> (is_array($style)) {
<a name="l00254"></a>00254             $this-&gt;data-&gt;merge(<span class="stringliteral">&#39;style&#39;</span>, $style);
<a name="l00255"></a>00255         } <span class="keywordflow">else</span> {
<a name="l00256"></a>00256             $this-&gt;data-&gt;push(<span class="stringliteral">&#39;style&#39;</span>, $style);
<a name="l00257"></a>00257         }
<a name="l00258"></a>00258         <span class="keywordflow">return</span> $this;
<a name="l00259"></a>00259     }
<a name="l00260"></a>00260 
<a name="l00267"></a><a class="code" href="class_utopia_1_1_components_1_1_http_1_1_module_application.html#a94ece3531ad52d7c51fdc06ba009457f">00267</a>     <span class="keyword">public</span> function <a class="code" href="class_utopia_1_1_components_1_1_http_1_1_module_application.html#a94ece3531ad52d7c51fdc06ba009457f">getScriptTags</a>() {
<a name="l00268"></a>00268         $scripts = $this-&gt;getScripts();
<a name="l00269"></a>00269         $tags = array();
<a name="l00270"></a>00270         <span class="keywordflow">foreach</span> ($scripts as $s) {
<a name="l00271"></a>00271             <span class="comment">//FIXME: tempfix on not allow to put html links onto yaml config</span>
<a name="l00272"></a>00272             $s = trim(str_replace(<span class="charliteral">&#39;\/&#39;</span>,<span class="charliteral">&#39;/&#39;</span>,$s), <span class="stringliteral">&quot;\n &quot;</span>);
<a name="l00273"></a>00273 
<a name="l00274"></a>00274             <span class="keywordflow">if</span> (preg_match($this-&gt;pattern, $s)) {
<a name="l00275"></a>00275                 <span class="comment">//external style link</span>
<a name="l00276"></a>00276                 $tags[] = <span class="stringliteral">&quot;&lt;script src=\&quot;$s\&quot;&gt;&lt;/script&gt;\n&quot;</span>;
<a name="l00277"></a>00277             } elseif (file_exists($s) &amp;&amp; is_readable($s)) {
<a name="l00278"></a>00278                 <span class="comment">//an internal file; will include it into html</span>
<a name="l00279"></a>00279                 <span class="comment">//formulate javascript as html</span>
<a name="l00280"></a>00280                 $template = $this-&gt;sc-&gt;template;
<a name="l00281"></a>00281                 $template-&gt;setRenderEngine(<span class="stringliteral">&#39;php&#39;</span>)
<a name="l00282"></a>00282                     -&gt;setTemplate($s)
<a name="l00283"></a>00283                     -&gt;setApplication($this);
<a name="l00284"></a>00284                 $jsstring = $template-&gt;render($this-&gt;getReturnValues(<span class="stringliteral">&#39;array&#39;</span>));
<a name="l00285"></a>00285 
<a name="l00286"></a>00286                 $tags[] = <span class="stringliteral">&quot;&lt;!--$s--&gt;\n&lt;script type=\&quot;text/javascript\&quot;&gt;\n&quot;</span>.$jsstring.<span class="stringliteral">&quot;\n&lt;/script&gt;\n&quot;</span>;
<a name="l00287"></a>00287             } <span class="keywordflow">else</span> {
<a name="l00288"></a>00288                 <span class="comment">//the string itself is a javascript, include directly</span>
<a name="l00289"></a>00289                 $tags[] = <span class="stringliteral">&quot;&lt;!--$s--&gt;\n&lt;script type=\&quot;text/javascript\&quot;&gt;\n$s\n&lt;/script&gt;\n&quot;</span>;
<a name="l00290"></a>00290             }
<a name="l00291"></a>00291         }
<a name="l00292"></a>00292 
<a name="l00293"></a>00293         $modules = $this-&gt;getModules();
<a name="l00294"></a>00294         <span class="keywordflow">foreach</span>($modules as $m) {
<a name="l00295"></a>00295             $tags = array_merge($tags, $m-&gt;getScriptTags());
<a name="l00296"></a>00296         }
<a name="l00297"></a>00297         <span class="keywordflow">return</span> array_unique($tags);
<a name="l00298"></a>00298     }
<a name="l00299"></a>00299 
<a name="l00305"></a><a class="code" href="class_utopia_1_1_components_1_1_http_1_1_module_application.html#a8ffa57c438fc3f1605ba5e9d7eefb627">00305</a>     <span class="keyword">public</span> function <a class="code" href="class_utopia_1_1_components_1_1_http_1_1_module_application.html#a8ffa57c438fc3f1605ba5e9d7eefb627">getStyleTags</a>() {
<a name="l00306"></a>00306         $styles = $this-&gt;getStyles();
<a name="l00307"></a>00307         $tags = array();
<a name="l00308"></a>00308         <span class="keywordflow">foreach</span> ($styles as $s) {
<a name="l00309"></a>00309             <span class="comment">//FIXME: tempfix on not allow to put html links onto yaml config</span>
<a name="l00310"></a>00310             $s = trim(str_replace(<span class="charliteral">&#39;\/&#39;</span>,<span class="charliteral">&#39;/&#39;</span>,$s), <span class="stringliteral">&quot;\n &quot;</span>);
<a name="l00311"></a>00311 
<a name="l00312"></a>00312             <span class="keywordflow">if</span> (preg_match($this-&gt;pattern, $s)) {
<a name="l00313"></a>00313                 <span class="comment">//external style link</span>
<a name="l00314"></a>00314                 $tags[] = <span class="stringliteral">&quot;&lt;link rel=\&quot;stylesheet\&quot; type=\&quot;text/css\&quot; href=\&quot;$s\&quot;&gt;\n&quot;</span>;
<a name="l00315"></a>00315             } elseif (file_exists($s) &amp;&amp; is_readable($s)) {
<a name="l00316"></a>00316                 <span class="comment">//an internal file; will include it into html</span>
<a name="l00317"></a>00317                 <span class="comment">//formulate css as html</span>
<a name="l00318"></a>00318                 $template = $this-&gt;sc-&gt;template;
<a name="l00319"></a>00319                 $template-&gt;setRenderEngine(<span class="stringliteral">&#39;php&#39;</span>)
<a name="l00320"></a>00320                     -&gt;setTemplate($s)
<a name="l00321"></a>00321                     -&gt;setApplication($this);
<a name="l00322"></a>00322                 $cssstring = $template-&gt;render($this-&gt;getReturnValues(<span class="stringliteral">&#39;array&#39;</span>));
<a name="l00323"></a>00323 
<a name="l00324"></a>00324                 $tags[] = <span class="stringliteral">&quot;&lt;!--$s--&gt;\n&lt;style type=\&quot;text/css\&quot;&gt;\n&quot;</span>.$cssstring.<span class="stringliteral">&quot;\n&lt;/style&gt;\n&quot;</span>;
<a name="l00325"></a>00325             } <span class="keywordflow">else</span> {
<a name="l00326"></a>00326                 $tags[] = <span class="stringliteral">&quot;&lt;!--$s--&gt;\n&lt;style type=\&quot;text/css\&quot;&gt;\n$s\n&lt;/style&gt;\n&quot;</span>;
<a name="l00327"></a>00327             }
<a name="l00328"></a>00328         }
<a name="l00329"></a>00329 
<a name="l00330"></a>00330         $modules = $this-&gt;getModules();
<a name="l00331"></a>00331         <span class="keywordflow">foreach</span>($modules as $m) {
<a name="l00332"></a>00332             $tags = array_merge($tags, $m-&gt;getStyleTags());
<a name="l00333"></a>00333         }
<a name="l00334"></a>00334         <span class="keywordflow">return</span> array_unique($tags);
<a name="l00335"></a>00335     }
<a name="l00336"></a>00336 
<a name="l00337"></a>00337     <span class="comment">/*=======================</span>
<a name="l00338"></a>00338 <span class="comment">     * MODULE management</span>
<a name="l00339"></a>00339 <span class="comment">     * ======================</span>
<a name="l00340"></a>00340 <span class="comment">     */</span>
<a name="l00341"></a>00341 
<a name="l00350"></a><a class="code" href="class_utopia_1_1_components_1_1_http_1_1_module_application.html#a03308ba34d021821b8a111e4ffe248c6">00350</a>     <span class="keyword">public</span> function <a class="code" href="class_utopia_1_1_components_1_1_http_1_1_module_application.html#a03308ba34d021821b8a111e4ffe248c6">registerModule</a>($name, <a class="code" href="class_utopia_1_1_components_1_1_http_1_1_module_application.html">ModuleApplication</a> $module) {
<a name="l00351"></a>00351         <span class="keywordflow">if</span> (get_class($module) !=  <span class="stringliteral">&#39;Utopia\Components\Http\ModuleApplication&#39;</span>) {
<a name="l00352"></a>00352             $this-&gt;sc-&gt;logger-&gt;log(<span class="stringliteral">&quot;ERROR: only ModuleApplications are accepted in regsterModule, &quot;</span>.get_class($module).<span class="stringliteral">&quot; detected&quot;</span>, Log::LEVEL_ERROR);
<a name="l00353"></a>00353             <span class="keywordflow">return</span> $this;
<a name="l00354"></a>00354         }
<a name="l00355"></a>00355 
<a name="l00356"></a>00356         <span class="comment">//check if module is include-able</span>
<a name="l00357"></a>00357         $modules = array_merge(
<a name="l00358"></a>00358             array($module),         <span class="comment">//cannot include the api itself</span>
<a name="l00359"></a>00359             $module-&gt;<a class="code" href="class_utopia_1_1_components_1_1_http_1_1_module_application.html#adabf9c48e2c9bf149be4738eea4d84e7">getModules</a>()   <span class="comment">//cannot include subapi with itself</span>
<a name="l00360"></a>00360         );
<a name="l00361"></a>00361         <span class="keywordflow">foreach</span>($modules as $a) {
<a name="l00362"></a>00362             <span class="keywordflow">if</span> ($a-&gt;getUrl() == $this-&gt;getUrl()) {
<a name="l00363"></a>00363                 $this-&gt;sc-&gt;logger-&gt;log(<span class="stringliteral">&quot;ERROR: cannot add &#39;&quot;</span>.$module-&gt;getUrl().<span class="stringliteral">&quot;&#39;, as it will create infinite loopings&quot;</span>, Log::LEVEL_ERROR);
<a name="l00364"></a>00364                 <span class="keywordflow">return</span> $this;
<a name="l00365"></a>00365             }
<a name="l00366"></a>00366         }
<a name="l00367"></a>00367         <span class="comment">//include if okay</span>
<a name="l00368"></a>00368         $this-&gt;applications-&gt;{<span class="stringliteral">&#39;modules&#39;</span>.SEP.$name} = $module;
<a name="l00369"></a>00369         <span class="keywordflow">return</span> $this;
<a name="l00370"></a>00370     }
<a name="l00371"></a>00371 
<a name="l00377"></a><a class="code" href="class_utopia_1_1_components_1_1_http_1_1_module_application.html#adabf9c48e2c9bf149be4738eea4d84e7">00377</a>     <span class="keyword">public</span> function <a class="code" href="class_utopia_1_1_components_1_1_http_1_1_module_application.html#adabf9c48e2c9bf149be4738eea4d84e7">getModules</a>() {
<a name="l00378"></a>00378         $modules = $this-&gt;applications-&gt;get(<span class="stringliteral">&#39;modules&#39;</span>, array());
<a name="l00379"></a>00379         reset($modules);
<a name="l00380"></a>00380         $module = current($modules);
<a name="l00381"></a>00381         <span class="keywordflow">while</span> ($module != <span class="keyword">false</span>) {
<a name="l00382"></a>00382             <span class="keywordflow">foreach</span> ($module-&gt;getModules() as $modulename =&gt; $a) {
<a name="l00383"></a>00383                 <span class="keywordflow">if</span> ($a instanceof <a class="code" href="class_utopia_1_1_components_1_1_http_1_1_module_application.html">ModuleApplication</a>) {
<a name="l00384"></a>00384                     $modules[$modulename] = $a;
<a name="l00385"></a>00385                 } <span class="keywordflow">else</span> {
<a name="l00386"></a>00386                     $this-&gt;sc-&gt;logger-&gt;log(<span class="stringliteral">&#39;ERROR one object returned from getModule is not a ModuleApplication class&#39;</span>, Log::LEVEL_ERROR);
<a name="l00387"></a>00387                 }
<a name="l00388"></a>00388             }
<a name="l00389"></a>00389             $module = next($modules);
<a name="l00390"></a>00390         }
<a name="l00391"></a>00391         <span class="keywordflow">return</span> $modules;
<a name="l00392"></a>00392     }
<a name="l00393"></a>00393 
<a name="l00400"></a><a class="code" href="class_utopia_1_1_components_1_1_http_1_1_module_application.html#ad2d43a8c06f23457e0f606b8be6cd2b3">00400</a>     <span class="keyword">public</span> function <a class="code" href="class_utopia_1_1_components_1_1_http_1_1_module_application.html#ad2d43a8c06f23457e0f606b8be6cd2b3">getModuleValue</a>($name, $default=<span class="keyword">false</span>) {
<a name="l00401"></a>00401         <span class="comment">//if value already exists</span>
<a name="l00402"></a>00402         <span class="keywordflow">if</span> ($this-&gt;applications-&gt;{<span class="stringliteral">&#39;modules&#39;</span>.SEP.$name} instanceof <a class="code" href="class_utopia_1_1_components_1_1_http_1_1_module_application.html">ModuleApplication</a>) {
<a name="l00403"></a>00403             <span class="comment">//assumeing the get interested to get the module itself, rather than the data</span>
<a name="l00404"></a>00404             <span class="keywordflow">return</span> $this-&gt;applications-&gt;{<span class="stringliteral">&#39;modules&#39;</span>.SEP.$name};
<a name="l00405"></a>00405         } elseif (isset($this-&gt;applications-&gt;{<span class="stringliteral">&#39;returns&#39;</span>.SEP.<span class="stringliteral">&#39;modules&#39;</span>.SEP.$name})){
<a name="l00406"></a>00406             <span class="comment">//getting data case</span>
<a name="l00407"></a>00407             <span class="keywordflow">return</span> $this-&gt;applications-&gt;{<span class="stringliteral">&#39;returns&#39;</span>.SEP.<span class="stringliteral">&#39;modules&#39;</span>.SEP.$name};
<a name="l00408"></a>00408         }
<a name="l00409"></a>00409 
<a name="l00410"></a>00410         <span class="comment">//no such name case</span>
<a name="l00411"></a>00411         $alias = strpos($name, SEP)!=0 ? strstr($name, SEP, <span class="keyword">true</span>): $name;
<a name="l00412"></a>00412         <span class="keywordflow">if</span> (!isset($this-&gt;applications-&gt;{<span class="stringliteral">&#39;modules&#39;</span>.SEP.$alias})) {
<a name="l00413"></a>00413             $this-&gt;sc-&gt;logger-&gt;log(<span class="stringliteral">&quot;module name &#39;$alias&#39; has not been registered&quot;</span>, Log::LEVEL_ERROR);
<a name="l00414"></a>00414             <span class="keywordflow">return</span> $default;
<a name="l00415"></a>00415         }
<a name="l00416"></a>00416 
<a name="l00417"></a>00417         <span class="comment">//run module if not yet been run</span>
<a name="l00418"></a>00418         $module = $this-&gt;applications-&gt;{<span class="stringliteral">&#39;modules&#39;</span>.SEP.$alias};
<a name="l00419"></a>00419         <span class="keywordflow">if</span> ($module instanceof ModuleApplication) {
<a name="l00420"></a>00420             <span class="keywordflow">if</span> ($module-&gt;getStatus() == ApiApplication::INIT) {
<a name="l00421"></a>00421                 <span class="comment">//not run yet, run now</span>
<a name="l00422"></a>00422                 $module-&gt;run();
<a name="l00423"></a>00423             }
<a name="l00424"></a>00424             <span class="keywordflow">if</span> ($module-&gt;getStatus() !== ApiApplication::ERROR) {
<a name="l00425"></a>00425                 $rtnarray = $module-&gt;getReturnValues(<span class="stringliteral">&#39;array&#39;</span>);
<a name="l00426"></a>00426                 <span class="keywordflow">foreach</span>($rtnarray as $k =&gt; $v) {
<a name="l00427"></a>00427                     <span class="comment">//writing using &quot;alias&quot;</span>
<a name="l00428"></a>00428                     $this-&gt;applications-&gt;{<span class="stringliteral">&#39;returns&#39;</span>.SEP.<span class="stringliteral">&#39;modules&#39;</span>.SEP.$alias.SEP.$k} = $v;
<a name="l00429"></a>00429                 }
<a name="l00430"></a>00430                 <span class="comment">//reading using &quot;name&quot;</span>
<a name="l00431"></a>00431                 <span class="keywordflow">return</span> $this-&gt;applications-&gt;get(<span class="stringliteral">&#39;returns&#39;</span>.SEP.<span class="stringliteral">&#39;modules&#39;</span>.SEP.$name, $default);
<a name="l00432"></a>00432             } <span class="keywordflow">else</span> {
<a name="l00433"></a>00433                 $this-&gt;sc-&gt;logger-&gt;log(<span class="stringliteral">&quot;module name &#39;$name&#39; returned error&quot;</span>, Log::LEVEL_ERROR);
<a name="l00434"></a>00434                 <span class="keywordflow">return</span> $default;
<a name="l00435"></a>00435             }
<a name="l00436"></a>00436         } <span class="keywordflow">else</span> {
<a name="l00437"></a>00437             $this-&gt;sc-&gt;logger-&gt;log(<span class="stringliteral">&quot;the object of module name &#39;$name&#39; is not valid&quot;</span>, Log::LEVEL_ERROR);
<a name="l00438"></a>00438         }
<a name="l00439"></a>00439     }
<a name="l00440"></a>00440 }
</pre></div></div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><b>ModuleController.php</b>      </li>
      <li class="footer">Generated on Fri Mar 4 2011 23:22:16 for utopia3 by&#160;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.3 </li>
    </ul>
  </div>
<!--- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Data Structures</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Functions</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>


</body>
</html>
