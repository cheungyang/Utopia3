<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>utopia3: trunk/lib/components/mallocworks/DataParser/XmlParserEngine.php Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript">
$(document).ready(initResizable);
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body onload='searchBox.OnSelectItem(0);'>
<!-- Generated by Doxygen 1.7.3 -->
<script type="text/javascript"><!--
var searchBox = new SearchBox("searchBox", "search",false,'Search');
--></script>
<div id="top">
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">utopia3</div>
   <div id="projectbrief">utopia framework - version3</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.html"><span>Namespaces</span></a></li>
      <li><a href="annotated.html"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li id="searchli">
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('_xml_parser_engine_8php.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<h1>trunk/lib/components/mallocworks/DataParser/XmlParserEngine.php</h1>  </div>
</div>
<div class="contents">
<div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 &lt;?php
<a name="l00002"></a>00002 <span class="keyword">namespace </span>\Utopia\Components\DataParser;
<a name="l00003"></a>00003 
<a name="l00004"></a>00004 use \Utopia\Components\DataParser\IParserEngine;
<a name="l00005"></a>00005 
<a name="l00006"></a><a class="code" href="class_utopia_1_1_components_1_1_data_parser_1_1_xml_parser_engine.html">00006</a> <span class="keyword">class </span><a class="code" href="class_utopia_1_1_components_1_1_data_parser_1_1_xml_parser_engine.html">XmlParserEngine</a> <span class="keyword">implements</span> <a class="code" href="interface_utopia_1_1_components_1_1_data_parser_1_1_i_parser_engine.html">IParserEngine</a> {
<a name="l00007"></a>00007 
<a name="l00008"></a>00008     <span class="keyword">public</span> function __construct() {
<a name="l00009"></a>00009 
<a name="l00010"></a>00010     }
<a name="l00011"></a>00011 
<a name="l00012"></a>00012     <span class="keyword">public</span> function getType() {
<a name="l00013"></a>00013         <span class="keywordflow">return</span> Parser::TYPE_XML;
<a name="l00014"></a>00014     }
<a name="l00015"></a>00015 
<a name="l00016"></a><a class="code" href="class_utopia_1_1_components_1_1_data_parser_1_1_xml_parser_engine.html#aa40a2c570a65e6f8d8a55af28cd6e595">00016</a>     <span class="keyword">public</span> function <a class="code" href="class_utopia_1_1_components_1_1_data_parser_1_1_xml_parser_engine.html#aa40a2c570a65e6f8d8a55af28cd6e595">acceptExtract</a>($input) {
<a name="l00017"></a>00017         <span class="keywordflow">if</span> (file_exists($input) &amp;&amp; !is_dir($input)) {
<a name="l00018"></a>00018             <span class="comment">//extension check</span>
<a name="l00019"></a>00019             $ext = trim(strrchr($input, <span class="charliteral">&#39;.&#39;</span>),<span class="charliteral">&#39;.&#39;</span>);
<a name="l00020"></a>00020             <span class="keywordflow">if</span> (strtolower($ext) == <span class="stringliteral">&#39;xml&#39;</span>) {
<a name="l00021"></a>00021                 <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00022"></a>00022             } <span class="keywordflow">else</span> {
<a name="l00023"></a>00023                 <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00024"></a>00024             }
<a name="l00025"></a>00025         } elseif (preg_match(<span class="stringliteral">&#39;/[\w]+:\/\//&#39;</span>, $input)) {
<a name="l00026"></a>00026             <span class="comment">//assume we can open all urls</span>
<a name="l00027"></a>00027             <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00028"></a>00028         } <span class="keywordflow">else</span> {
<a name="l00029"></a>00029             <span class="keywordflow">try</span> {
<a name="l00030"></a>00030                 $rtn = <span class="keyword">new</span> \SimpleXMLElement($input);
<a name="l00031"></a>00031                 <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00032"></a>00032             } <span class="keywordflow">catch</span>(Exception $e) {
<a name="l00033"></a>00033                 <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00034"></a>00034             }
<a name="l00035"></a>00035         }
<a name="l00036"></a>00036     }
<a name="l00037"></a>00037 
<a name="l00038"></a><a class="code" href="class_utopia_1_1_components_1_1_data_parser_1_1_xml_parser_engine.html#a0e48ec53c3dc0fdc3918ca54041744e7">00038</a>     <span class="keyword">public</span> function <a class="code" href="class_utopia_1_1_components_1_1_data_parser_1_1_xml_parser_engine.html#a0e48ec53c3dc0fdc3918ca54041744e7">acceptPack</a>($data) {
<a name="l00039"></a>00039         <span class="keywordflow">if</span> (is_array($data)) {
<a name="l00040"></a>00040             <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00041"></a>00041         } <span class="keywordflow">else</span> {
<a name="l00042"></a>00042             <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00043"></a>00043         }
<a name="l00044"></a>00044     }
<a name="l00045"></a>00045 
<a name="l00053"></a><a class="code" href="class_utopia_1_1_components_1_1_data_parser_1_1_xml_parser_engine.html#a3dffec125cfe41516f0ae24acdb87901">00053</a>     <span class="keyword">public</span> function <a class="code" href="class_utopia_1_1_components_1_1_data_parser_1_1_xml_parser_engine.html#a3dffec125cfe41516f0ae24acdb87901">extract</a>($input, $args=array()) {
<a name="l00054"></a>00054         <span class="keywordflow">try</span> {
<a name="l00055"></a>00055             <span class="keywordflow">if</span> (file_exists($input) &amp;&amp; !is_dir($input)){
<a name="l00056"></a>00056                 <span class="comment">//get data from file</span>
<a name="l00057"></a>00057                 $data = file_get_contents($input);
<a name="l00058"></a>00058             } elseif (preg_match(<span class="stringliteral">&#39;/[\w]+:\/\//&#39;</span>, $input)) {
<a name="l00059"></a>00059                 <span class="comment">//get data from uri/stream source</span>
<a name="l00060"></a>00060                 $ch = curl_init();
<a name="l00061"></a>00061                 curl_setopt ($ch, CURLOPT_URL, $input);
<a name="l00062"></a>00062                 curl_setopt ($ch, CURLOPT_HEADER, 0);
<a name="l00063"></a>00063                 ob_start();
<a name="l00064"></a>00064                 curl_exec ($ch);
<a name="l00065"></a>00065                 curl_close ($ch);
<a name="l00066"></a>00066                 $data = ob_get_clean();
<a name="l00067"></a>00067             } <span class="keywordflow">else</span> {
<a name="l00068"></a>00068                 <span class="comment">//input is ready the data</span>
<a name="l00069"></a>00069                 $data = $input;
<a name="l00070"></a>00070             }
<a name="l00071"></a>00071 
<a name="l00072"></a>00072             $flatten = isset($args[<span class="stringliteral">&#39;flatten&#39;</span>])? $args[<span class="stringliteral">&#39;flatten&#39;</span>]: <span class="keyword">true</span>;
<a name="l00073"></a>00073             $targetchild = isset($args[<span class="stringliteral">&#39;targetchild&#39;</span>])? $args[<span class="stringliteral">&#39;targetchild&#39;</span>]: <span class="stringliteral">&#39;&#39;</span>;
<a name="l00074"></a>00074             $offset = isset($args[<span class="stringliteral">&#39;offset&#39;</span>])? $args[<span class="stringliteral">&#39;offset&#39;</span>]: 0;
<a name="l00075"></a>00075             $limit = isset($args[<span class="stringliteral">&#39;limit&#39;</span>])? $args[<span class="stringliteral">&#39;limit&#39;</span>]: 100;
<a name="l00076"></a>00076 
<a name="l00077"></a>00077             $xmlobj = <span class="keyword">new</span> \SimpleXMLElement($data);
<a name="l00078"></a>00078             <span class="keywordflow">return</span> array($xmlobj-&gt;getName()=&gt;$this-&gt;_simpleXMLToArray($xmlobj, $flatten, $targetchild, $offset, $limit));
<a name="l00079"></a>00079         } <span class="keywordflow">catch</span>(Exception $e) {
<a name="l00080"></a>00080             <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00081"></a>00081         }
<a name="l00082"></a>00082     }
<a name="l00083"></a>00083 
<a name="l00084"></a>00084     <span class="keyword">public</span> function pack($data) {
<a name="l00085"></a>00085         <span class="keywordflow">return</span> $this-&gt;_prettyXML(
<a name="l00086"></a>00086             <span class="stringliteral">&#39;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#39;</span>.$this-&gt;_manualAtoX($data)
<a name="l00087"></a>00087         );
<a name="l00088"></a>00088 <span class="comment">/*</span>
<a name="l00089"></a>00089 <span class="comment">        try {</span>
<a name="l00090"></a>00090 <span class="comment">            $xmlobj = $this-&gt;_arrayToSimpleXmlElement($data);</span>
<a name="l00091"></a>00091 <span class="comment"></span>
<a name="l00092"></a>00092 <span class="comment">            if (is_null($xmlobj)){</span>
<a name="l00093"></a>00093 <span class="comment">                return &#39;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#39;;</span>
<a name="l00094"></a>00094 <span class="comment">            } else {</span>
<a name="l00095"></a>00095 <span class="comment">                $str = html_entity_decode($xmlobj-&gt;asXML());</span>
<a name="l00096"></a>00096 <span class="comment">                //$str = html_entity_decode($this-&gt;_prettyXml($xmlobj-&gt;asXML()));</span>
<a name="l00097"></a>00097 <span class="comment">                return $str;</span>
<a name="l00098"></a>00098 <span class="comment">            }</span>
<a name="l00099"></a>00099 <span class="comment">        } catch (Exception $e) {</span>
<a name="l00100"></a>00100 <span class="comment">            return false;</span>
<a name="l00101"></a>00101 <span class="comment">        }*/</span>
<a name="l00102"></a>00102     }
<a name="l00103"></a>00103 
<a name="l00104"></a>00104 
<a name="l00105"></a>00105     <span class="keyword">private</span> function _manualAtoX($data, $parentkey=<span class="stringliteral">&#39;&#39;</span>){
<a name="l00106"></a>00106         $str = <span class="stringliteral">&#39;&#39;</span>;
<a name="l00107"></a>00107         <span class="keywordflow">if</span> (is_array($data) &amp;&amp; !empty($data)){
<a name="l00108"></a>00108             <span class="keywordflow">foreach</span>($data as $key =&gt; $val) {
<a name="l00109"></a>00109                 <span class="keywordflow">if</span> (!empty($parentkey)) {
<a name="l00110"></a>00110                     $key = $parentkey;
<a name="l00111"></a>00111                 }
<a name="l00112"></a>00112 
<a name="l00113"></a>00113                 <span class="keywordflow">if</span> ($val === <span class="stringliteral">&#39;&#39;</span>) {
<a name="l00114"></a>00114                     $str .= <span class="stringliteral">&quot;&lt;$key/&gt;&quot;</span>;
<a name="l00115"></a>00115                 } elseif (is_array($val)) {
<a name="l00116"></a>00116                     <span class="comment">//check if value keys are numbers</span>
<a name="l00117"></a>00117                     reset($val);
<a name="l00118"></a>00118                     <span class="keywordflow">if</span> (current($val) == <span class="keyword">false</span>) {
<a name="l00119"></a>00119                         $is_seq = <span class="keyword">false</span>;
<a name="l00120"></a>00120                     } <span class="keywordflow">else</span> {
<a name="l00121"></a>00121                         <span class="keywordflow">while</span>(current($val)!=<span class="keyword">false</span> &amp;&amp; is_int(key($val))){
<a name="l00122"></a>00122                             next($val);
<a name="l00123"></a>00123                         }
<a name="l00124"></a>00124                         $is_seq = current($val) == <span class="keyword">false</span>? <span class="keyword">true</span>: <span class="keyword">false</span>;
<a name="l00125"></a>00125                     }
<a name="l00126"></a>00126 
<a name="l00127"></a>00127                     <span class="keywordflow">if</span> ($is_seq) {
<a name="l00128"></a>00128                         $str .= $this-&gt;_manualAtoX($val, $key);
<a name="l00129"></a>00129                     } <span class="keywordflow">else</span> {
<a name="l00130"></a>00130                         $str .= sprintf(<span class="stringliteral">&quot;&lt;%s&gt;%s&lt;/%s&gt;&quot;</span>, $key, $this-&gt;_manualAtoX($val), $key);
<a name="l00131"></a>00131                     }
<a name="l00132"></a>00132                 } <span class="keywordflow">else</span> {
<a name="l00133"></a>00133                     $str .= sprintf(<span class="stringliteral">&quot;&lt;%s&gt;%s&lt;/%s&gt;&quot;</span>, $key, $val, $key);
<a name="l00134"></a>00134                 }
<a name="l00135"></a>00135             }
<a name="l00136"></a>00136         }
<a name="l00137"></a>00137         <span class="keywordflow">return</span> $str;
<a name="l00138"></a>00138     }
<a name="l00139"></a>00139 
<a name="l00140"></a>00140 
<a name="l00149"></a>00149     <span class="keyword">private</span> function _arrayToSimpleXmlElement($data, $xml=null) {
<a name="l00150"></a>00150         $valueKey=<span class="stringliteral">&#39;@value&#39;</span>;
<a name="l00151"></a>00151         $attributesKey=<span class="stringliteral">&#39;@attributes&#39;</span>;
<a name="l00152"></a>00152         $childrenKey=<span class="stringliteral">&#39;@children&#39;</span>;
<a name="l00153"></a>00153 
<a name="l00154"></a>00154         <span class="keywordflow">foreach</span>($data as $key =&gt; $val) {
<a name="l00155"></a>00155             <span class="keywordflow">if</span> ($key == $attributesKey) {
<a name="l00156"></a>00156                 <span class="comment">//not support for now</span>
<a name="l00157"></a>00157             } elseif ($key == $childrenKey) {
<a name="l00158"></a>00158                 <span class="comment">//pass to next level</span>
<a name="l00159"></a>00159                 $xml = $this-&gt;_arrayToSimpleXmlElement($val, $xml);
<a name="l00160"></a>00160             } elseif (!is_array($val)) {
<a name="l00161"></a>00161                 <span class="comment">//bottom reached</span>
<a name="l00162"></a>00162                 <span class="comment">//$safe_value = &quot;&lt;![CDATA[&quot;.preg_replace(&#39;/&amp;(?!\w+;)/&#39;, &#39;&amp;amp;&#39;, $val).&quot;]]&gt;&quot;;</span>
<a name="l00163"></a>00163                 $safe_value = preg_replace(<span class="stringliteral">&#39;/&amp;(?!\w+;)/&#39;</span>, <span class="stringliteral">&#39;&amp;amp;&#39;</span>, htmlentities($val));
<a name="l00164"></a>00164                 <span class="comment">//echo &quot;&gt;&gt;1: $safe_value\n&quot;;</span>
<a name="l00165"></a>00165 
<a name="l00166"></a>00166                 <span class="keywordflow">if</span> (is_null($xml)){
<a name="l00167"></a>00167                     $xml = <span class="keyword">new</span> \SimpleXMLElement(<span class="stringliteral">&quot;&lt;$key&gt;{$safe_value}&lt;/$key&gt;&quot;</span>);
<a name="l00168"></a>00168                 } <span class="keywordflow">else</span> {
<a name="l00169"></a>00169                     $xml-&gt;addChild($key, $safe_value);
<a name="l00170"></a>00170                 }
<a name="l00171"></a>00171             } elseif (isset($val[$valueKey])) {
<a name="l00172"></a>00172                 <span class="comment">//bottom reached, non flatten mode</span>
<a name="l00173"></a>00173                 <span class="comment">//$safe_value = &quot;&lt;![CDATA[&quot;.preg_replace(&#39;/&amp;(?!\w+;)/&#39;, &#39;&amp;amp;&#39;, $val).&quot;]]&gt;&quot;;</span>
<a name="l00174"></a>00174                 $safe_value = preg_replace(<span class="stringliteral">&#39;/&amp;(?!\w+;)/&#39;</span>, <span class="stringliteral">&#39;&amp;amp;&#39;</span>, htmlentities($val));
<a name="l00175"></a>00175                 <span class="comment">//echo &quot;&gt;&gt;2: $safe_value\n&quot;;</span>
<a name="l00176"></a>00176 
<a name="l00177"></a>00177                 <span class="keywordflow">if</span> (is_null($xml)){
<a name="l00178"></a>00178                     $xml = <span class="keyword">new</span> \SimpleXMLElement(<span class="stringliteral">&quot;&lt;$key&gt;{$safe_value}&lt;/$key&gt;&quot;</span>);
<a name="l00179"></a>00179                 } <span class="keywordflow">else</span> {
<a name="l00180"></a>00180                     $xml-&gt;addChild($key, $safe_value);
<a name="l00181"></a>00181                 }
<a name="l00182"></a>00182             } <span class="keywordflow">else</span> {
<a name="l00183"></a>00183                 <span class="comment">//go deeper</span>
<a name="l00184"></a>00184                 <span class="keywordflow">if</span> (is_null($xml)){
<a name="l00185"></a>00185                     $xml = <span class="keyword">new</span> \SimpleXMLElement(<span class="stringliteral">&quot;&lt;$key/&gt;&quot;</span>);
<a name="l00186"></a>00186                     $this-&gt;_arrayToSimpleXmlElement($val, $xml, $key);
<a name="l00187"></a>00187                 } <span class="keywordflow">else</span> {
<a name="l00188"></a>00188                     <span class="comment">//check if value keys are numbers</span>
<a name="l00189"></a>00189                     reset($val);
<a name="l00190"></a>00190                     <span class="keywordflow">if</span> (current($val) == <span class="keyword">false</span>) {
<a name="l00191"></a>00191                         $is_seq = <span class="keyword">false</span>;
<a name="l00192"></a>00192                     } <span class="keywordflow">else</span> {
<a name="l00193"></a>00193                         <span class="keywordflow">while</span>(current($val)!=<span class="keyword">false</span> &amp;&amp; is_int(key($val))){
<a name="l00194"></a>00194                             next($val);
<a name="l00195"></a>00195                         }
<a name="l00196"></a>00196                         $is_seq = current($val) == <span class="keyword">false</span>? <span class="keyword">true</span>: <span class="keyword">false</span>;
<a name="l00197"></a>00197                     }
<a name="l00198"></a>00198 
<a name="l00199"></a>00199                     <span class="comment">//handling for each case (is_seq)</span>
<a name="l00200"></a>00200                     <span class="keywordflow">if</span> ($is_seq) {
<a name="l00201"></a>00201                         <span class="comment">//probably an array sequence</span>
<a name="l00202"></a>00202                         <span class="keywordflow">foreach</span>($val as $subkey =&gt; $subarray) {
<a name="l00203"></a>00203                             <span class="keywordflow">if</span> (is_array($subarray)) {
<a name="l00204"></a>00204                                 $subxml = $xml-&gt;addChild($key);
<a name="l00205"></a>00205                                 $this-&gt;_arrayToSimpleXmlElement($subarray, $subxml);
<a name="l00206"></a>00206                             } <span class="keywordflow">else</span> {
<a name="l00207"></a>00207                                 $safe_value = preg_replace(<span class="stringliteral">&#39;/&amp;(?!\w+;)/&#39;</span>, <span class="stringliteral">&#39;&amp;amp;&#39;</span>, htmlentities($subarray));
<a name="l00208"></a>00208                                 <span class="comment">//echo &quot;&gt;&gt;3: $safe_value\n&quot;;</span>
<a name="l00209"></a>00209 
<a name="l00210"></a>00210                                 $xml-&gt;addChild($key, $safe_value);
<a name="l00211"></a>00211                             }
<a name="l00212"></a>00212                         }
<a name="l00213"></a>00213                     } <span class="keywordflow">else</span> {
<a name="l00214"></a>00214                         $subxml = $xml-&gt;addChild($key);
<a name="l00215"></a>00215                         $this-&gt;_arrayToSimpleXmlElement($val, $subxml);
<a name="l00216"></a>00216                     }
<a name="l00217"></a>00217                 }
<a name="l00218"></a>00218             }
<a name="l00219"></a>00219         }
<a name="l00220"></a>00220         <span class="keywordflow">return</span> $xml;
<a name="l00221"></a>00221     }
<a name="l00222"></a>00222 
<a name="l00223"></a>00223 
<a name="l00255"></a>00255     <span class="keyword">private</span> function _simpleXMLToArray($xml, $flatten, $targetchild, $offset, $limit){
<a name="l00256"></a>00256         $valueKey=<span class="stringliteral">&#39;@value&#39;</span>;
<a name="l00257"></a>00257         $attributesKey=<span class="stringliteral">&#39;@attributes&#39;</span>;
<a name="l00258"></a>00258         $childrenKey=<span class="stringliteral">&#39;@children&#39;</span>;
<a name="l00259"></a>00259 
<a name="l00260"></a>00260         $return = array();
<a name="l00261"></a>00261         <span class="keywordflow">if</span>(!($xml instanceof \SimpleXMLElement)){<span class="keywordflow">return</span> $return;}
<a name="l00262"></a>00262         $name = $xml-&gt;getName();
<a name="l00263"></a>00263 
<a name="l00264"></a>00264         $_value = trim((<span class="keywordtype">string</span>)$xml);
<a name="l00265"></a>00265         <span class="keywordflow">if</span>(strlen($_value)==0){$_value = null;};
<a name="l00266"></a>00266 
<a name="l00267"></a>00267         <span class="keywordflow">if</span>($_value!==null){
<a name="l00268"></a>00268             <span class="keywordflow">if</span>(!$flatten){$return[$valueKey] = $_value;}
<a name="l00269"></a>00269             <span class="keywordflow">else</span>{$return = $_value;}
<a name="l00270"></a>00270         }
<a name="l00271"></a>00271 
<a name="l00272"></a>00272         <span class="comment">//for targetchild offset counting</span>
<a name="l00273"></a>00273         $target_offset = 0;
<a name="l00274"></a>00274         $target_count = 0;
<a name="l00275"></a>00275 
<a name="l00276"></a>00276         $children = array();
<a name="l00277"></a>00277         $first = <span class="keyword">true</span>;
<a name="l00278"></a>00278         <span class="keywordflow">foreach</span>($xml-&gt;children() as $elementName =&gt; $child){
<a name="l00279"></a>00279             <span class="comment">//check if we need to extract just a limited subset of this child</span>
<a name="l00280"></a>00280             <span class="keywordflow">if</span> (!empty($targetchild) &amp;&amp; $elementName == $targetchild){
<a name="l00281"></a>00281                 <span class="keywordflow">if</span> ($target_offset++ &lt; $offset){
<a name="l00282"></a>00282                     <span class="comment">//skip until offset reached</span>
<a name="l00283"></a>00283                     <span class="keywordflow">continue</span>;
<a name="l00284"></a>00284                 } elseif($target_count++ &gt;= $limit) {
<a name="l00285"></a>00285                     <span class="comment">//stop when count reached</span>
<a name="l00286"></a>00286                     <span class="keywordflow">break</span>;
<a name="l00287"></a>00287                 }
<a name="l00288"></a>00288             }
<a name="l00289"></a>00289 
<a name="l00290"></a>00290             <span class="comment">//value fetching</span>
<a name="l00291"></a>00291             $value = $this-&gt;_simpleXMLToArray($child, $flatten, $targetchild, $offset, $limit);
<a name="l00292"></a>00292             <span class="keywordflow">if</span>(isset($children[$elementName])){
<a name="l00293"></a>00293                 <span class="keywordflow">if</span>($first){
<a name="l00294"></a>00294                     $temp = $children[$elementName];
<a name="l00295"></a>00295                     unset($children[$elementName]);
<a name="l00296"></a>00296                     $children[$elementName][] = $temp;
<a name="l00297"></a>00297                     $first=<span class="keyword">false</span>;
<a name="l00298"></a>00298                 }
<a name="l00299"></a>00299                 $children[$elementName][] = empty($value)? <span class="stringliteral">&#39;&#39;</span>:$value;
<a name="l00300"></a>00300             }
<a name="l00301"></a>00301             <span class="keywordflow">else</span>{
<a name="l00302"></a>00302                 $children[$elementName] = empty($value)? <span class="stringliteral">&#39;&#39;</span>:$value;
<a name="l00303"></a>00303             }
<a name="l00304"></a>00304         }
<a name="l00305"></a>00305         <span class="keywordflow">if</span>(count($children)&gt;0){
<a name="l00306"></a>00306             <span class="keywordflow">if</span>(!$flatten){$return[$childrenKey] = $children;}
<a name="l00307"></a>00307             <span class="keywordflow">else</span>{$return = array_merge($return,$children);}
<a name="l00308"></a>00308         }
<a name="l00309"></a>00309 
<a name="l00310"></a>00310         <span class="keywordflow">if</span> (!$flatten) {
<a name="l00311"></a>00311             $attributes = array();
<a name="l00312"></a>00312             <span class="keywordflow">foreach</span>($xml-&gt;attributes() as $name=&gt;$value){
<a name="l00313"></a>00313                 $attributes[$name] = trim($value);
<a name="l00314"></a>00314             }
<a name="l00315"></a>00315             <span class="keywordflow">if</span>(count($attributes)&gt;=0){
<a name="l00316"></a>00316                 <span class="keywordflow">if</span>(!$flatten){$return[$attributesKey] = $attributes;}
<a name="l00317"></a>00317                 <span class="keywordflow">else</span>{$return = array_merge($return, $attributes);}
<a name="l00318"></a>00318             }
<a name="l00319"></a>00319         }
<a name="l00320"></a>00320 
<a name="l00321"></a>00321         <span class="keywordflow">return</span> $return;
<a name="l00322"></a>00322     }
<a name="l00323"></a>00323 
<a name="l00324"></a>00324     <span class="keyword">private</span> function _prettyXML($string) {
<a name="l00325"></a>00325         <span class="comment">//ob_end_clean();print_r($string); die();</span>
<a name="l00326"></a>00326 
<a name="l00327"></a>00327         <span class="comment">//add opening tag</span>
<a name="l00328"></a>00328         $string = str_replace(<span class="stringliteral">&#39;&lt;?xml version=&quot;1.0&quot;?&gt;&#39;</span>, <span class="stringliteral">&#39;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#39;</span>, $string);
<a name="l00329"></a>00329 
<a name="l00333"></a>00333         $string =preg_replace(<span class="stringliteral">&quot;/&gt;\s*&lt;/&quot;</span>,<span class="stringliteral">&quot;&gt;\n&lt;&quot;</span>,$string);
<a name="l00334"></a>00334 
<a name="l00338"></a>00338         $xmlArray = explode(<span class="stringliteral">&quot;\n&quot;</span>,$string);
<a name="l00339"></a>00339 
<a name="l00343"></a>00343         $currIndent = 0;
<a name="l00344"></a>00344 
<a name="l00348"></a>00348         $string = array_shift($xmlArray) . <span class="stringliteral">&quot;\n&quot;</span>;
<a name="l00349"></a>00349 
<a name="l00350"></a>00350         <span class="keywordflow">foreach</span>($xmlArray as $element) {
<a name="l00355"></a>00355             <span class="keywordflow">if</span> (preg_match(<span class="stringliteral">&#39;/^&lt;([\w])+[^&gt;\/]*&gt;$/U&#39;</span>,$element)) {
<a name="l00356"></a>00356                 $string .=  str_repeat(<span class="charliteral">&#39; &#39;</span>, $currIndent) . $element . <span class="stringliteral">&quot;\n&quot;</span>;
<a name="l00357"></a>00357                 $currIndent += 4;
<a name="l00358"></a>00358             }
<a name="l00359"></a>00359 
<a name="l00363"></a>00363             elseif ( preg_match(<span class="stringliteral">&#39;/^&lt;\/.+&gt;$/&#39;</span>,$element)) {
<a name="l00364"></a>00364                 $currIndent -= 4;
<a name="l00365"></a>00365                 $string .=  $currIndent&gt;0?
<a name="l00366"></a>00366                     str_repeat(<span class="charliteral">&#39; &#39;</span>, $currIndent) . $element . <span class="stringliteral">&quot;\n&quot;</span>:
<a name="l00367"></a>00367                     $element . <span class="stringliteral">&quot;\n&quot;</span>;
<a name="l00368"></a>00368             }
<a name="l00372"></a>00372             <span class="keywordflow">else</span> {
<a name="l00373"></a>00373                 $string .=  $currIndent&gt;0?
<a name="l00374"></a>00374                     str_repeat(<span class="charliteral">&#39; &#39;</span>, $currIndent) . $element . <span class="stringliteral">&quot;\n&quot;</span>:
<a name="l00375"></a>00375                     $element . <span class="stringliteral">&quot;\n&quot;</span>;
<a name="l00376"></a>00376             }
<a name="l00377"></a>00377         }
<a name="l00378"></a>00378 
<a name="l00379"></a>00379         <span class="keywordflow">return</span> $string;
<a name="l00380"></a>00380     }
<a name="l00381"></a>00381 }
</pre></div></div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><b>XmlParserEngine.php</b>      </li>
      <li class="footer">Generated on Fri Mar 4 2011 23:22:16 for utopia3 by&#160;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.3 </li>
    </ul>
  </div>
<!--- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Data Structures</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Functions</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>


</body>
</html>
