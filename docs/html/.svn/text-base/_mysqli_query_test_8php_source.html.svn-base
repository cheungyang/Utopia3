<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>utopia3: trunk/lib/components/mallocworks/DataAccess/tests/MysqliQueryTest.php Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript">
$(document).ready(initResizable);
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body onload='searchBox.OnSelectItem(0);'>
<!-- Generated by Doxygen 1.7.3 -->
<script type="text/javascript"><!--
var searchBox = new SearchBox("searchBox", "search",false,'Search');
--></script>
<div id="top">
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">utopia3</div>
   <div id="projectbrief">utopia framework - version3</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.html"><span>Namespaces</span></a></li>
      <li><a href="annotated.html"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li id="searchli">
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('_mysqli_query_test_8php.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<h1>trunk/lib/components/mallocworks/DataAccess/tests/MysqliQueryTest.php</h1>  </div>
</div>
<div class="contents">
<div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 &lt;?php
<a name="l00002"></a>00002 <span class="comment">//require_once &#39;PHPUnit/Framework.php&#39;;</span>
<a name="l00003"></a>00003 require_once dirname(__FILE__).<span class="stringliteral">&#39;/../../Object/DataObject.php&#39;</span>;
<a name="l00004"></a>00004 require_once dirname(__FILE__).<span class="stringliteral">&#39;/../../Autoloader/Autoload.php&#39;</span>;
<a name="l00005"></a>00005 
<a name="l00006"></a>00006 use Utopia\Components\Autoloader\<a class="code" href="class_utopia_1_1_components_1_1_autoloader_1_1_autoload.html">Autoload</a>;
<a name="l00007"></a>00007 use Utopia\Components\Model\<a class="code" href="class_utopia_1_1_components_1_1_model_1_1_mysqli_query.html">MysqliQuery</a>;
<a name="l00008"></a>00008 
<a name="l00009"></a><a class="code" href="class_mysqli_query_test.html">00009</a> <span class="keyword">class </span><a class="code" href="class_mysqli_query_test.html">MysqliQueryTest</a> <span class="keyword">extends</span> PHPUnit_Framework_TestCase
<a name="l00010"></a>00010 {
<a name="l00011"></a>00011     <span class="keyword">protected</span> function setUp() {
<a name="l00012"></a>00012         $autoload = <span class="keyword">new</span> <a class="code" href="class_utopia_1_1_components_1_1_autoloader_1_1_autoload.html">Autoload</a>();
<a name="l00013"></a>00013         $autoload-&gt;register(<span class="stringliteral">&#39;lib/Components/mallocworks&#39;</span>, <span class="stringliteral">&#39;Utopia\Components&#39;</span>)
<a name="l00014"></a>00014             -&gt;register(<span class="stringliteral">&#39;lib/Core&#39;</span>, <span class="stringliteral">&#39;Utopia\Core&#39;</span>)
<a name="l00015"></a>00015             -&gt;register(<span class="stringliteral">&#39;lib/Components/doctrine&#39;</span>, <span class="stringliteral">&#39;Doctrine&#39;</span>)
<a name="l00016"></a>00016             -&gt;register(<span class="stringliteral">&#39;lib/Components/symfony&#39;</span>, <span class="stringliteral">&#39;Symfony\Components&#39;</span>);
<a name="l00017"></a>00017     }
<a name="l00018"></a>00018 
<a name="l00019"></a>00019     <span class="keyword">protected</span> function tearDown() {
<a name="l00020"></a>00020     }
<a name="l00021"></a>00021 
<a name="l00022"></a>00022     <span class="keyword">public</span> function testDelete() {
<a name="l00023"></a>00023         $this-&gt;assertEquals(<span class="stringliteral">&#39;DELETE FROM article WHERE ( (id=?) )&#39;</span>, MysqliQuery::delete(<span class="stringliteral">&#39;article&#39;</span>)-&gt;where(<span class="stringliteral">&#39;id&#39;</span>,10)-&gt;getSql() );
<a name="l00024"></a>00024         $this-&gt;assertEquals(<span class="stringliteral">&#39;DELETE FROM article WHERE ( (id=?) ) ORDER BY id ASC LIMIT 1&#39;</span>, MysqliQuery::delete(<span class="stringliteral">&#39;article&#39;</span>)-&gt;where(<span class="stringliteral">&#39;id&#39;</span>,10)-&gt;order(<span class="stringliteral">&#39;id&#39;</span>,<span class="stringliteral">&#39;ASC&#39;</span>)-&gt;limit(1)-&gt;getSql() );
<a name="l00025"></a>00025     }
<a name="l00026"></a>00026 
<a name="l00027"></a>00027     <span class="keyword">public</span> function testUpdate() {
<a name="l00028"></a>00028         $q = MysqliQuery::update(<span class="stringliteral">&#39;article&#39;</span>);
<a name="l00029"></a>00029         $this-&gt;assertEquals(<span class="stringliteral">&#39;UPDATE article SET `a`=? WHERE ( (id=?) )&#39;</span>, $q-&gt;set(<span class="charliteral">&#39;a&#39;</span>, <span class="charliteral">&#39;A&#39;</span>)-&gt;where(<span class="stringliteral">&#39;id&#39;</span>,10)-&gt;getSql() );
<a name="l00030"></a>00030         $this-&gt;assertEquals(array(<span class="charliteral">&#39;A&#39;</span>,10), $q-&gt;getParams());
<a name="l00031"></a>00031         $q = MysqliQuery::update(<span class="stringliteral">&#39;article&#39;</span>);
<a name="l00032"></a>00032         $this-&gt;assertEquals(<span class="stringliteral">&#39;UPDATE article SET `a`=? , `b`=? WHERE ( (id=?) )&#39;</span>, $q-&gt;set(array(<span class="charliteral">&#39;a&#39;</span>=&gt;<span class="charliteral">&#39;A&#39;</span>,<span class="charliteral">&#39;b&#39;</span>=&gt;<span class="charliteral">&#39;B&#39;</span>))-&gt;where(<span class="stringliteral">&#39;id&#39;</span>,10)-&gt;getSql() );
<a name="l00033"></a>00033         $this-&gt;assertEquals(array(<span class="charliteral">&#39;A&#39;</span>,<span class="charliteral">&#39;B&#39;</span>,10), $q-&gt;getParams());
<a name="l00034"></a>00034 
<a name="l00035"></a>00035         <span class="comment">//with order/limit</span>
<a name="l00036"></a>00036         $q = MysqliQuery::update(<span class="stringliteral">&#39;article&#39;</span>);
<a name="l00037"></a>00037         $this-&gt;assertEquals(<span class="stringliteral">&#39;UPDATE article SET `a`=? WHERE ( (id=?) ) LIMIT 1&#39;</span>, $q-&gt;set(array(<span class="charliteral">&#39;a&#39;</span>=&gt;10))-&gt;where(<span class="stringliteral">&#39;id&#39;</span>,10)-&gt;limit(1)-&gt;getSql() );
<a name="l00038"></a>00038         $this-&gt;assertEquals(array(10,10), $q-&gt;getParams());
<a name="l00039"></a>00039         $q = MysqliQuery::update(<span class="stringliteral">&#39;article&#39;</span>);
<a name="l00040"></a>00040         $this-&gt;assertEquals(<span class="stringliteral">&#39;UPDATE article SET `a`=? WHERE ( (id=?) ) ORDER BY id ASC LIMIT 1&#39;</span>, $q-&gt;set(array(<span class="charliteral">&#39;a&#39;</span>=&gt;10))-&gt;where(<span class="stringliteral">&#39;id&#39;</span>,10)-&gt;limit(1)-&gt;order(<span class="stringliteral">&#39;id&#39;</span>,<span class="stringliteral">&#39;ASC&#39;</span>)-&gt;getSql() );
<a name="l00041"></a>00041         $this-&gt;assertEquals(array(10,10), $q-&gt;getParams());
<a name="l00042"></a>00042     }
<a name="l00043"></a>00043 
<a name="l00044"></a>00044     <span class="keyword">public</span> function testInsert() {
<a name="l00045"></a>00045         $q = MysqliQuery::insert(<span class="stringliteral">&#39;article&#39;</span>);
<a name="l00046"></a>00046         $this-&gt;assertEquals(<span class="stringliteral">&#39;INSERT INTO article (`a`, `b`) VALUES(?, ?)&#39;</span>, $q-&gt;values(array(<span class="charliteral">&#39;a&#39;</span>=&gt;<span class="charliteral">&#39;A&#39;</span>,<span class="charliteral">&#39;b&#39;</span>=&gt;<span class="charliteral">&#39;B&#39;</span>))-&gt;getSql() );
<a name="l00047"></a>00047         $this-&gt;assertEquals(array(<span class="charliteral">&#39;A&#39;</span>,<span class="charliteral">&#39;B&#39;</span>), $q-&gt;getParams());
<a name="l00048"></a>00048         $q = MysqliQuery::insert(<span class="stringliteral">&#39;article&#39;</span>);
<a name="l00049"></a>00049         $this-&gt;assertEquals(<span class="stringliteral">&#39;INSERT INTO article (`a`, `b`) VALUES(?, ?) ON DUPLICATE KEY UPDATE `a`=?&#39;</span>, $q-&gt;values(array(<span class="charliteral">&#39;a&#39;</span>=&gt;<span class="charliteral">&#39;A&#39;</span>,<span class="charliteral">&#39;b&#39;</span>=&gt;<span class="charliteral">&#39;B&#39;</span>))-&gt;duplicatekey(<span class="charliteral">&#39;a&#39;</span>)-&gt;getSql() );
<a name="l00050"></a>00050         $this-&gt;assertEquals(array(<span class="charliteral">&#39;A&#39;</span>,<span class="charliteral">&#39;B&#39;</span>,<span class="charliteral">&#39;A&#39;</span>), $q-&gt;getParams());
<a name="l00051"></a>00051         $q = MysqliQuery::insert(<span class="stringliteral">&#39;article&#39;</span>);
<a name="l00052"></a>00052         $this-&gt;assertEquals(<span class="stringliteral">&#39;INSERT INTO article (`a`, `b`) VALUES(?, ?) ON DUPLICATE KEY UPDATE `a`=? , `b`=?&#39;</span>, $q-&gt;values(array(<span class="charliteral">&#39;a&#39;</span>=&gt;<span class="charliteral">&#39;A&#39;</span>,<span class="charliteral">&#39;b&#39;</span>=&gt;<span class="charliteral">&#39;B&#39;</span>))-&gt;duplicatekey(array(<span class="charliteral">&#39;a&#39;</span>,<span class="charliteral">&#39;b&#39;</span>))-&gt;getSql() );
<a name="l00053"></a>00053         $this-&gt;assertEquals(array(<span class="charliteral">&#39;A&#39;</span>,<span class="charliteral">&#39;B&#39;</span>,<span class="charliteral">&#39;A&#39;</span>,<span class="charliteral">&#39;B&#39;</span>), $q-&gt;getParams());
<a name="l00054"></a>00054     }
<a name="l00055"></a>00055 
<a name="l00056"></a>00056     <span class="keyword">public</span> function testSelect() {
<a name="l00057"></a>00057         <span class="comment">//select</span>
<a name="l00058"></a>00058         $this-&gt;assertEquals(<span class="stringliteral">&#39;SELECT * FROM a&#39;</span>, MysqliQuery::select(<span class="charliteral">&#39;*&#39;</span>)-&gt;from(<span class="charliteral">&#39;a&#39;</span>)-&gt;getSql() );
<a name="l00059"></a>00059         $this-&gt;assertEquals(<span class="stringliteral">&#39;SELECT a, b FROM a&#39;</span>, MysqliQuery::select(array(<span class="charliteral">&#39;a&#39;</span>,<span class="charliteral">&#39;b&#39;</span>))-&gt;from(<span class="charliteral">&#39;a&#39;</span>)-&gt;getSql() );
<a name="l00060"></a>00060         $this-&gt;assertEquals(<span class="stringliteral">&#39;SELECT DISTINCT * FROM a&#39;</span>, MysqliQuery::select(<span class="charliteral">&#39;*&#39;</span>)-&gt;from(<span class="charliteral">&#39;a&#39;</span>)-&gt;distinct(<span class="keyword">true</span>)-&gt;getSql() );
<a name="l00061"></a>00061 
<a name="l00062"></a>00062         <span class="comment">//from</span>
<a name="l00063"></a>00063         $this-&gt;assertEquals(<span class="stringliteral">&#39;SELECT * FROM a&#39;</span>, MysqliQuery::select(<span class="charliteral">&#39;*&#39;</span>)-&gt;from(<span class="charliteral">&#39;a&#39;</span>)-&gt;getSql() );
<a name="l00064"></a>00064         $this-&gt;assertEquals(<span class="stringliteral">&#39;SELECT * FROM a, b&#39;</span>, MysqliQuery::select(<span class="charliteral">&#39;*&#39;</span>)-&gt;from(array(<span class="charliteral">&#39;a&#39;</span>,<span class="charliteral">&#39;b&#39;</span>))-&gt;getSql() );
<a name="l00065"></a>00065         $this-&gt;assertEquals(<span class="stringliteral">&#39;SELECT * FROM a LEFT JOIN b ON a.id=b.id&#39;</span>, MysqliQuery::select(<span class="charliteral">&#39;*&#39;</span>)-&gt;from(<span class="charliteral">&#39;a&#39;</span>)-&gt;leftJoin(<span class="charliteral">&#39;b&#39;</span>,<span class="stringliteral">&#39;a.id=b.id&#39;</span>)-&gt;getSql() );
<a name="l00066"></a>00066 
<a name="l00067"></a>00067         <span class="comment">//where</span>
<a name="l00068"></a>00068         $q = MysqliQuery::select(<span class="charliteral">&#39;*&#39;</span>);
<a name="l00069"></a>00069         $this-&gt;assertEquals(<span class="stringliteral">&#39;SELECT * FROM a WHERE ( (a=?) )&#39;</span>, $q-&gt;from(<span class="charliteral">&#39;a&#39;</span>)-&gt;where(<span class="charliteral">&#39;a&#39;</span>,<span class="charliteral">&#39;b&#39;</span>)-&gt;getSql());
<a name="l00070"></a>00070         $this-&gt;assertEquals(array(<span class="charliteral">&#39;b&#39;</span>), $q-&gt;getParams());
<a name="l00071"></a>00071         $q = MysqliQuery::select(<span class="charliteral">&#39;*&#39;</span>);
<a name="l00072"></a>00072         $this-&gt;assertEquals(<span class="stringliteral">&#39;SELECT * FROM a WHERE ( (a=?) &amp;&amp; (b=?) )&#39;</span>, $q-&gt;from(<span class="charliteral">&#39;a&#39;</span>)-&gt;where(array(<span class="charliteral">&#39;a&#39;</span>=&gt;<span class="charliteral">&#39;A&#39;</span>,<span class="charliteral">&#39;b&#39;</span>=&gt;<span class="charliteral">&#39;B&#39;</span>))-&gt;getSql());
<a name="l00073"></a>00073         $this-&gt;assertEquals(array(<span class="charliteral">&#39;A&#39;</span>,<span class="charliteral">&#39;B&#39;</span>), $q-&gt;getParams());
<a name="l00074"></a>00074         $q = MysqliQuery::select(<span class="charliteral">&#39;*&#39;</span>);
<a name="l00075"></a>00075         $this-&gt;assertEquals(<span class="stringliteral">&#39;SELECT * FROM a WHERE ( (a=?) ) || ( (b=?) )&#39;</span>, $q-&gt;from(<span class="charliteral">&#39;a&#39;</span>)-&gt;where(<span class="charliteral">&#39;a&#39;</span>,<span class="charliteral">&#39;A&#39;</span>)-&gt;orWhere(<span class="charliteral">&#39;b&#39;</span>,<span class="charliteral">&#39;B&#39;</span>)-&gt;getSql());
<a name="l00076"></a>00076         $this-&gt;assertEquals(array(<span class="charliteral">&#39;A&#39;</span>,<span class="charliteral">&#39;B&#39;</span>), $q-&gt;getParams());
<a name="l00077"></a>00077         $q = MysqliQuery::select(<span class="charliteral">&#39;*&#39;</span>);
<a name="l00078"></a>00078         $this-&gt;assertEquals(<span class="stringliteral">&#39;SELECT * FROM a WHERE ( (a=?) ) || ( (b=?) &amp;&amp; (c=?) )&#39;</span>, $q-&gt;from(<span class="charliteral">&#39;a&#39;</span>)-&gt;where(<span class="charliteral">&#39;a&#39;</span>,<span class="charliteral">&#39;A&#39;</span>)-&gt;orWhere(array(<span class="charliteral">&#39;b&#39;</span>=&gt;<span class="charliteral">&#39;B&#39;</span>,<span class="charliteral">&#39;c&#39;</span>=&gt;<span class="charliteral">&#39;C&#39;</span>))-&gt;getSql());
<a name="l00079"></a>00079         $this-&gt;assertEquals(array(<span class="charliteral">&#39;A&#39;</span>,<span class="charliteral">&#39;B&#39;</span>,<span class="charliteral">&#39;C&#39;</span>), $q-&gt;getParams());
<a name="l00080"></a>00080 
<a name="l00081"></a>00081         <span class="comment">//group &amp; having</span>
<a name="l00082"></a>00082         $this-&gt;assertEquals(<span class="stringliteral">&#39;SELECT *, COUNT(*) as __count FROM a GROUP BY id HAVING id=2&#39;</span>, MysqliQuery::select(<span class="charliteral">&#39;*&#39;</span>)-&gt;from(<span class="charliteral">&#39;a&#39;</span>)-&gt;group(<span class="stringliteral">&#39;id&#39;</span>)-&gt;having(<span class="stringliteral">&#39;id=2&#39;</span>)-&gt;getSql() );
<a name="l00083"></a>00083 
<a name="l00084"></a>00084         <span class="comment">//order, limit</span>
<a name="l00085"></a>00085         $this-&gt;assertEquals(<span class="stringliteral">&#39;SELECT * FROM a ORDER BY id ASC&#39;</span>, MysqliQuery::select(<span class="charliteral">&#39;*&#39;</span>)-&gt;from(<span class="charliteral">&#39;a&#39;</span>)-&gt;order(<span class="stringliteral">&#39;id&#39;</span>,<span class="stringliteral">&#39;asc&#39;</span>)-&gt;getSql() );
<a name="l00086"></a>00086         $this-&gt;assertEquals(<span class="stringliteral">&#39;SELECT * FROM a LIMIT 10&#39;</span>, MysqliQuery::select(<span class="charliteral">&#39;*&#39;</span>)-&gt;from(<span class="charliteral">&#39;a&#39;</span>)-&gt;limit(10)-&gt;getSql() );
<a name="l00087"></a>00087 
<a name="l00088"></a>00088         <span class="comment">//offset</span>
<a name="l00089"></a>00089         $this-&gt;assertEquals(<span class="stringliteral">&#39;SELECT * FROM a LIMIT 5,0&#39;</span>, MysqliQuery::select(<span class="charliteral">&#39;*&#39;</span>)-&gt;from(<span class="charliteral">&#39;a&#39;</span>)-&gt;offset(5)-&gt;getSql() );
<a name="l00090"></a>00090         $this-&gt;assertEquals(<span class="stringliteral">&#39;SELECT * FROM a LIMIT 5,10&#39;</span>, MysqliQuery::select(<span class="charliteral">&#39;*&#39;</span>)-&gt;from(<span class="charliteral">&#39;a&#39;</span>)-&gt;offset(5)-&gt;limit(10)-&gt;getSql() );
<a name="l00091"></a>00091         $this-&gt;assertEquals(<span class="stringliteral">&#39;SELECT * FROM a WHERE ( (id&gt;?) ) ORDER BY id ASC&#39;</span>, MysqliQuery::select(<span class="charliteral">&#39;*&#39;</span>)-&gt;from(<span class="charliteral">&#39;a&#39;</span>)-&gt;offset(<span class="stringliteral">&#39;id&#39;</span>,<span class="stringliteral">&#39;20&#39;</span>,<span class="stringliteral">&#39;ASC&#39;</span>)-&gt;getSql() );
<a name="l00092"></a>00092         $q = MysqliQuery::select(<span class="charliteral">&#39;*&#39;</span>);
<a name="l00093"></a>00093         $this-&gt;assertEquals(<span class="stringliteral">&#39;SELECT * FROM a WHERE ( (a=?) &amp;&amp; (id&gt;?) ) ORDER BY id ASC&#39;</span>, $q-&gt;from(<span class="charliteral">&#39;a&#39;</span>)-&gt;where(<span class="charliteral">&#39;a&#39;</span>,<span class="charliteral">&#39;A&#39;</span>)-&gt;offset(<span class="stringliteral">&#39;id&#39;</span>,<span class="stringliteral">&#39;20&#39;</span>,<span class="stringliteral">&#39;ASC&#39;</span>)-&gt;getSql() );
<a name="l00094"></a>00094         $this-&gt;assertEquals(array(<span class="charliteral">&#39;A&#39;</span>,20), $q-&gt;getParams());
<a name="l00095"></a>00095         $q = MysqliQuery::select(<span class="charliteral">&#39;*&#39;</span>);
<a name="l00096"></a>00096         $this-&gt;assertEquals(<span class="stringliteral">&#39;SELECT * FROM a WHERE ( (a=?) &amp;&amp; (id&gt;?) ) || ( (b=?) &amp;&amp; (id&gt;?) ) ORDER BY id ASC&#39;</span>, $q-&gt;from(<span class="charliteral">&#39;a&#39;</span>)-&gt;where(<span class="charliteral">&#39;a&#39;</span>,<span class="charliteral">&#39;A&#39;</span>)-&gt;orWhere(<span class="charliteral">&#39;b&#39;</span>,<span class="charliteral">&#39;B&#39;</span>)-&gt;offset(<span class="stringliteral">&#39;id&#39;</span>,<span class="stringliteral">&#39;20&#39;</span>,<span class="stringliteral">&#39;ASC&#39;</span>)-&gt;getSql() );
<a name="l00097"></a>00097         $this-&gt;assertEquals(array(<span class="charliteral">&#39;A&#39;</span>,20,<span class="charliteral">&#39;B&#39;</span>,20), $q-&gt;getParams());
<a name="l00098"></a>00098     }
<a name="l00099"></a>00099 }
</pre></div></div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><b>MysqliQueryTest.php</b>      </li>
      <li class="footer">Generated on Fri Mar 4 2011 23:20:12 for utopia3 by&#160;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.3 </li>
    </ul>
  </div>
<!--- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Data Structures</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Functions</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>


</body>
</html>
