<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>utopia3: trunk/lib/components/symfony/Yaml/Parser.php Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript">
$(document).ready(initResizable);
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body onload='searchBox.OnSelectItem(0);'>
<!-- Generated by Doxygen 1.7.3 -->
<script type="text/javascript"><!--
var searchBox = new SearchBox("searchBox", "search",false,'Search');
--></script>
<div id="top">
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">utopia3</div>
   <div id="projectbrief">utopia framework - version3</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.html"><span>Namespaces</span></a></li>
      <li><a href="annotated.html"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li id="searchli">
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('_yaml_2_parser_8php.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<h1>trunk/lib/components/symfony/Yaml/Parser.php</h1>  </div>
</div>
<div class="contents">
<div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 &lt;?php
<a name="l00002"></a>00002 
<a name="l00003"></a>00003 <span class="keyword">namespace </span>Symfony\Components\Yaml;
<a name="l00004"></a>00004 
<a name="l00005"></a>00005 <span class="comment">/*</span>
<a name="l00006"></a>00006 <span class="comment"> * This file is part of the Symfony package.</span>
<a name="l00007"></a>00007 <span class="comment"> * (c) Fabien Potencier &lt;fabien.potencier@symfony-project.com&gt;</span>
<a name="l00008"></a>00008 <span class="comment"> *</span>
<a name="l00009"></a>00009 <span class="comment"> * For the full copyright and license information, please view the LICENSE</span>
<a name="l00010"></a>00010 <span class="comment"> * file that was distributed with this source code.</span>
<a name="l00011"></a>00011 <span class="comment"> */</span>
<a name="l00012"></a>00012 
<a name="l00020"></a>00020 <span class="keyword">class </span>Parser
<a name="l00021"></a>00021 {
<a name="l00022"></a>00022     <span class="keyword">protected</span> $offset         = 0;
<a name="l00023"></a>00023     <span class="keyword">protected</span> $lines          = array();
<a name="l00024"></a>00024     <span class="keyword">protected</span> $currentLineNb  = -1;
<a name="l00025"></a>00025     <span class="keyword">protected</span> $currentLine    = <span class="stringliteral">&#39;&#39;</span>;
<a name="l00026"></a>00026     <span class="keyword">protected</span> $refs           = array();
<a name="l00027"></a>00027 
<a name="l00033"></a><a class="code" href="class_symfony_1_1_components_1_1_yaml_1_1_parser.html#aa9388d8255ba88ef404307c6aee9fb37">00033</a>     <span class="keyword">public</span> function __construct($offset = 0)
<a name="l00034"></a>00034     {
<a name="l00035"></a>00035         $this-&gt;offset = $offset;
<a name="l00036"></a>00036     }
<a name="l00037"></a>00037 
<a name="l00047"></a><a class="code" href="class_symfony_1_1_components_1_1_yaml_1_1_parser.html#ae646f55333c0c77dc5b912df945862c5">00047</a>     <span class="keyword">public</span> function parse($value)
<a name="l00048"></a>00048     {
<a name="l00049"></a>00049         $this-&gt;currentLineNb = -1;
<a name="l00050"></a>00050         $this-&gt;currentLine = <span class="stringliteral">&#39;&#39;</span>;
<a name="l00051"></a>00051         $this-&gt;lines = explode(<span class="stringliteral">&quot;\n&quot;</span>, $this-&gt;cleanup($value));
<a name="l00052"></a>00052 
<a name="l00053"></a>00053         <span class="keywordflow">if</span> (function_exists(<span class="stringliteral">&#39;mb_internal_encoding&#39;</span>) &amp;&amp; ((<span class="keywordtype">int</span>) ini_get(<span class="stringliteral">&#39;mbstring.func_overload&#39;</span>)) &amp; 2) {
<a name="l00054"></a>00054             $mbEncoding = mb_internal_encoding();
<a name="l00055"></a>00055             mb_internal_encoding(<span class="stringliteral">&#39;ASCII&#39;</span>);
<a name="l00056"></a>00056         }
<a name="l00057"></a>00057 
<a name="l00058"></a>00058         $data = array();
<a name="l00059"></a>00059         <span class="keywordflow">while</span> ($this-&gt;moveToNextLine()) {
<a name="l00060"></a>00060             <span class="keywordflow">if</span> ($this-&gt;isCurrentLineEmpty()) {
<a name="l00061"></a>00061                 <span class="keywordflow">continue</span>;
<a name="l00062"></a>00062             }
<a name="l00063"></a>00063 
<a name="l00064"></a>00064             <span class="comment">// tab?</span>
<a name="l00065"></a>00065             <span class="keywordflow">if</span> (preg_match(<span class="stringliteral">&#39;#^\t+#&#39;</span>, $this-&gt;currentLine)) {
<a name="l00066"></a>00066                 <span class="keywordflow">throw</span> <span class="keyword">new</span> <a class="code" href="class_symfony_1_1_components_1_1_yaml_1_1_parser_exception.html">ParserException</a>(sprintf(<span class="stringliteral">&#39;A YAML file cannot contain tabs as indentation at line %d (%s).&#39;</span>, $this-&gt;getRealCurrentLineNb() + 1, $this-&gt;currentLine));
<a name="l00067"></a>00067             }
<a name="l00068"></a>00068 
<a name="l00069"></a>00069             $isRef = $isInPlace = $isProcessed = <span class="keyword">false</span>;
<a name="l00070"></a>00070             <span class="keywordflow">if</span> (preg_match(<span class="stringliteral">&#39;#^\-((?P&lt;leadspaces&gt;\s+)(?P&lt;value&gt;.+?))?\s*$#&#39;</span>, $this-&gt;currentLine, $values)) {
<a name="l00071"></a>00071                 <span class="keywordflow">if</span> (isset($values[<span class="stringliteral">&#39;value&#39;</span>]) &amp;&amp; preg_match(<span class="stringliteral">&#39;#^&amp;(?P&lt;ref&gt;[^ ]+) *(?P&lt;value&gt;.*)#&#39;</span>, $values[<span class="stringliteral">&#39;value&#39;</span>], $matches)) {
<a name="l00072"></a>00072                     $isRef = $matches[<span class="stringliteral">&#39;ref&#39;</span>];
<a name="l00073"></a>00073                     $values[<span class="stringliteral">&#39;value&#39;</span>] = $matches[<span class="stringliteral">&#39;value&#39;</span>];
<a name="l00074"></a>00074                 }
<a name="l00075"></a>00075 
<a name="l00076"></a>00076                 <span class="comment">// array</span>
<a name="l00077"></a>00077                 <span class="keywordflow">if</span> (!isset($values[<span class="stringliteral">&#39;value&#39;</span>]) || <span class="stringliteral">&#39;&#39;</span> == trim($values[<span class="stringliteral">&#39;value&#39;</span>], <span class="charliteral">&#39; &#39;</span>) || 0 === strpos(ltrim($values[<span class="stringliteral">&#39;value&#39;</span>], <span class="charliteral">&#39; &#39;</span>), <span class="charliteral">&#39;#&#39;</span>)) {
<a name="l00078"></a>00078                     $c = $this-&gt;getRealCurrentLineNb() + 1;
<a name="l00079"></a>00079                     $parser = <span class="keyword">new</span> <a class="code" href="class_symfony_1_1_components_1_1_yaml_1_1_parser.html">Parser</a>($c);
<a name="l00080"></a>00080                     $parser-&gt;refs =&amp; $this-&gt;refs;
<a name="l00081"></a>00081                     $data[] = $parser-&gt;parse($this-&gt;getNextEmbedBlock());
<a name="l00082"></a>00082                 } <span class="keywordflow">else</span> {
<a name="l00083"></a>00083                     <span class="keywordflow">if</span> (isset($values[<span class="stringliteral">&#39;leadspaces&#39;</span>])
<a name="l00084"></a>00084                         &amp;&amp; <span class="charliteral">&#39; &#39;</span> == $values[<span class="stringliteral">&#39;leadspaces&#39;</span>]
<a name="l00085"></a>00085                         &amp;&amp; preg_match(<span class="stringliteral">&#39;#^(?P&lt;key&gt;&#39;</span>.Inline::REGEX_QUOTED_STRING.<span class="stringliteral">&#39;|[^ \&#39;&quot;\{].*?) *\:(\s+(?P&lt;value&gt;.+?))?\s*$#&#39;</span>, $values[<span class="stringliteral">&#39;value&#39;</span>], $matches)
<a name="l00086"></a>00086                     ) {
<a name="l00087"></a>00087                         <span class="comment">// this is a compact notation element, add to next block and parse</span>
<a name="l00088"></a>00088                         $c = $this-&gt;getRealCurrentLineNb();
<a name="l00089"></a>00089                         $parser = <span class="keyword">new</span> <a class="code" href="class_symfony_1_1_components_1_1_yaml_1_1_parser.html">Parser</a>($c);
<a name="l00090"></a>00090                         $parser-&gt;refs =&amp; $this-&gt;refs;
<a name="l00091"></a>00091 
<a name="l00092"></a>00092                         $block = $values[<span class="stringliteral">&#39;value&#39;</span>];
<a name="l00093"></a>00093                         <span class="keywordflow">if</span> (!$this-&gt;isNextLineIndented()) {
<a name="l00094"></a>00094                             $block .= <span class="stringliteral">&quot;\n&quot;</span>.$this-&gt;getNextEmbedBlock($this-&gt;getCurrentLineIndentation() + 2);
<a name="l00095"></a>00095                         }
<a name="l00096"></a>00096 
<a name="l00097"></a>00097                         $data[] = $parser-&gt;parse($block);
<a name="l00098"></a>00098                     } <span class="keywordflow">else</span> {
<a name="l00099"></a>00099                         $data[] = $this-&gt;parseValue($values[<span class="stringliteral">&#39;value&#39;</span>]);
<a name="l00100"></a>00100                     }
<a name="l00101"></a>00101                 }
<a name="l00102"></a>00102             } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (preg_match(<span class="stringliteral">&#39;#^(?P&lt;key&gt;&#39;</span>.Inline::REGEX_QUOTED_STRING.<span class="stringliteral">&#39;|[^ \&#39;&quot;].*?) *\:(\s+(?P&lt;value&gt;.+?))?\s*$#&#39;</span>, $this-&gt;currentLine, $values)) {
<a name="l00103"></a>00103                 $key = Inline::parseScalar($values[<span class="stringliteral">&#39;key&#39;</span>]);
<a name="l00104"></a>00104 
<a name="l00105"></a>00105                 <span class="keywordflow">if</span> (<span class="stringliteral">&#39;&lt;&lt;&#39;</span> === $key) {
<a name="l00106"></a>00106                     <span class="keywordflow">if</span> (isset($values[<span class="stringliteral">&#39;value&#39;</span>]) &amp;&amp; <span class="charliteral">&#39;*&#39;</span> === substr($values[<span class="stringliteral">&#39;value&#39;</span>], 0, 1)) {
<a name="l00107"></a>00107                         $isInPlace = substr($values[<span class="stringliteral">&#39;value&#39;</span>], 1);
<a name="l00108"></a>00108                         <span class="keywordflow">if</span> (!array_key_exists($isInPlace, $this-&gt;refs)) {
<a name="l00109"></a>00109                             <span class="keywordflow">throw</span> <span class="keyword">new</span> <a class="code" href="class_symfony_1_1_components_1_1_yaml_1_1_parser_exception.html">ParserException</a>(sprintf(<span class="stringliteral">&#39;Reference &quot;%s&quot; does not exist at line %s (%s).&#39;</span>, $isInPlace, $this-&gt;getRealCurrentLineNb() + 1, $this-&gt;currentLine));
<a name="l00110"></a>00110                         }
<a name="l00111"></a>00111                     } <span class="keywordflow">else</span> {
<a name="l00112"></a>00112                         <span class="keywordflow">if</span> (isset($values[<span class="stringliteral">&#39;value&#39;</span>]) &amp;&amp; $values[<span class="stringliteral">&#39;value&#39;</span>] !== <span class="stringliteral">&#39;&#39;</span>) {
<a name="l00113"></a>00113                             $value = $values[<span class="stringliteral">&#39;value&#39;</span>];
<a name="l00114"></a>00114                         } <span class="keywordflow">else</span> {
<a name="l00115"></a>00115                             $value = $this-&gt;getNextEmbedBlock();
<a name="l00116"></a>00116                         }
<a name="l00117"></a>00117                         $c = $this-&gt;getRealCurrentLineNb() + 1;
<a name="l00118"></a>00118                         $parser = <span class="keyword">new</span> <a class="code" href="class_symfony_1_1_components_1_1_yaml_1_1_parser.html">Parser</a>($c);
<a name="l00119"></a>00119                         $parser-&gt;refs =&amp; $this-&gt;refs;
<a name="l00120"></a>00120                         $parsed = $parser-&gt;parse($value);
<a name="l00121"></a>00121 
<a name="l00122"></a>00122                         $merged = array();
<a name="l00123"></a>00123                         <span class="keywordflow">if</span> (!is_array($parsed)) {
<a name="l00124"></a>00124                             <span class="keywordflow">throw</span> <span class="keyword">new</span> <a class="code" href="class_symfony_1_1_components_1_1_yaml_1_1_parser_exception.html">ParserException</a>(sprintf(<span class="stringliteral">&#39;YAML merge keys used with a scalar value instead of an array at line %s (%s)&#39;</span>, $this-&gt;getRealCurrentLineNb() + 1, $this-&gt;currentLine));
<a name="l00125"></a>00125                         } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (isset($parsed[0])) {
<a name="l00126"></a>00126                             <span class="comment">// Numeric array, merge individual elements</span>
<a name="l00127"></a>00127                             <span class="keywordflow">foreach</span> (array_reverse($parsed) as $parsedItem) {
<a name="l00128"></a>00128                                 <span class="keywordflow">if</span> (!is_array($parsedItem)) {
<a name="l00129"></a>00129                                     <span class="keywordflow">throw</span> <span class="keyword">new</span> <a class="code" href="class_symfony_1_1_components_1_1_yaml_1_1_parser_exception.html">ParserException</a>(sprintf(<span class="stringliteral">&#39;Merge items must be arrays at line %s (%s).&#39;</span>, $this-&gt;getRealCurrentLineNb() + 1, $parsedItem));
<a name="l00130"></a>00130                                 }
<a name="l00131"></a>00131                                 $merged = array_merge($parsedItem, $merged);
<a name="l00132"></a>00132                             }
<a name="l00133"></a>00133                         } <span class="keywordflow">else</span> {
<a name="l00134"></a>00134                             <span class="comment">// Associative array, merge</span>
<a name="l00135"></a>00135                             $merged = array_merge($merge, $parsed);
<a name="l00136"></a>00136                         }
<a name="l00137"></a>00137 
<a name="l00138"></a>00138                         $isProcessed = $merged;
<a name="l00139"></a>00139                     }
<a name="l00140"></a>00140                 } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (isset($values[<span class="stringliteral">&#39;value&#39;</span>]) &amp;&amp; preg_match(<span class="stringliteral">&#39;#^&amp;(?P&lt;ref&gt;[^ ]+) *(?P&lt;value&gt;.*)#&#39;</span>, $values[<span class="stringliteral">&#39;value&#39;</span>], $matches)) {
<a name="l00141"></a>00141                     $isRef = $matches[<span class="stringliteral">&#39;ref&#39;</span>];
<a name="l00142"></a>00142                     $values[<span class="stringliteral">&#39;value&#39;</span>] = $matches[<span class="stringliteral">&#39;value&#39;</span>];
<a name="l00143"></a>00143                 }
<a name="l00144"></a>00144 
<a name="l00145"></a>00145                 <span class="keywordflow">if</span> ($isProcessed) {
<a name="l00146"></a>00146                     <span class="comment">// Merge keys</span>
<a name="l00147"></a>00147                     $data = $isProcessed;
<a name="l00148"></a>00148                 }
<a name="l00149"></a>00149                 <span class="comment">// hash</span>
<a name="l00150"></a>00150                 <span class="keywordflow">else</span> <span class="keywordflow">if</span> (!isset($values[<span class="stringliteral">&#39;value&#39;</span>]) || <span class="stringliteral">&#39;&#39;</span> == trim($values[<span class="stringliteral">&#39;value&#39;</span>], <span class="charliteral">&#39; &#39;</span>) || 0 === strpos(ltrim($values[<span class="stringliteral">&#39;value&#39;</span>], <span class="charliteral">&#39; &#39;</span>), <span class="charliteral">&#39;#&#39;</span>)) {
<a name="l00151"></a>00151                     <span class="comment">// if next line is less indented or equal, then it means that the current value is null</span>
<a name="l00152"></a>00152                     <span class="keywordflow">if</span> ($this-&gt;isNextLineIndented()) {
<a name="l00153"></a>00153                         $data[$key] = null;
<a name="l00154"></a>00154                     } <span class="keywordflow">else</span> {
<a name="l00155"></a>00155                         $c = $this-&gt;getRealCurrentLineNb() + 1;
<a name="l00156"></a>00156                         $parser = <span class="keyword">new</span> <a class="code" href="class_symfony_1_1_components_1_1_yaml_1_1_parser.html">Parser</a>($c);
<a name="l00157"></a>00157                         $parser-&gt;refs =&amp; $this-&gt;refs;
<a name="l00158"></a>00158                         $data[$key] = $parser-&gt;parse($this-&gt;getNextEmbedBlock());
<a name="l00159"></a>00159                     }
<a name="l00160"></a>00160                 } <span class="keywordflow">else</span> {
<a name="l00161"></a>00161                     <span class="keywordflow">if</span> ($isInPlace) {
<a name="l00162"></a>00162                         $data = $this-&gt;refs[$isInPlace];
<a name="l00163"></a>00163                     } <span class="keywordflow">else</span> {
<a name="l00164"></a>00164                         $data[$key] = $this-&gt;parseValue($values[<span class="stringliteral">&#39;value&#39;</span>]);
<a name="l00165"></a>00165                     }
<a name="l00166"></a>00166                 }
<a name="l00167"></a>00167             } <span class="keywordflow">else</span> {
<a name="l00168"></a>00168                 <span class="comment">// 1-liner followed by newline</span>
<a name="l00169"></a>00169                 <span class="keywordflow">if</span> (2 == count($this-&gt;lines) &amp;&amp; empty($this-&gt;lines[1])) {
<a name="l00170"></a>00170                     $value = Inline::load($this-&gt;lines[0]);
<a name="l00171"></a>00171                     <span class="keywordflow">if</span> (is_array($value)) {
<a name="l00172"></a>00172                         $first = reset($value);
<a name="l00173"></a>00173                         <span class="keywordflow">if</span> (<span class="charliteral">&#39;*&#39;</span> === substr($first, 0, 1)) {
<a name="l00174"></a>00174                             $data = array();
<a name="l00175"></a>00175                             <span class="keywordflow">foreach</span> ($value as $alias) {
<a name="l00176"></a>00176                                 $data[] = $this-&gt;refs[substr($alias, 1)];
<a name="l00177"></a>00177                             }
<a name="l00178"></a>00178                             $value = $data;
<a name="l00179"></a>00179                         }
<a name="l00180"></a>00180                     }
<a name="l00181"></a>00181 
<a name="l00182"></a>00182                     <span class="keywordflow">if</span> (isset($mbEncoding)) {
<a name="l00183"></a>00183                         mb_internal_encoding($mbEncoding);
<a name="l00184"></a>00184                     }
<a name="l00185"></a>00185 
<a name="l00186"></a>00186                     <span class="keywordflow">return</span> $value;
<a name="l00187"></a>00187                 }
<a name="l00188"></a>00188 
<a name="l00189"></a>00189                 <span class="keywordflow">switch</span> (preg_last_error()) {
<a name="l00190"></a>00190                     <span class="keywordflow">case</span> PREG_INTERNAL_ERROR:
<a name="l00191"></a>00191                         $error = <span class="stringliteral">&#39;Internal PCRE error on line&#39;</span>;
<a name="l00192"></a>00192                         <span class="keywordflow">break</span>;
<a name="l00193"></a>00193                     <span class="keywordflow">case</span> PREG_BACKTRACK_LIMIT_ERROR:
<a name="l00194"></a>00194                         $error = <span class="stringliteral">&#39;pcre.backtrack_limit reached on line&#39;</span>;
<a name="l00195"></a>00195                         <span class="keywordflow">break</span>;
<a name="l00196"></a>00196                     <span class="keywordflow">case</span> PREG_RECURSION_LIMIT_ERROR:
<a name="l00197"></a>00197                         $error = <span class="stringliteral">&#39;pcre.recursion_limit reached on line&#39;</span>;
<a name="l00198"></a>00198                         <span class="keywordflow">break</span>;
<a name="l00199"></a>00199                     <span class="keywordflow">case</span> PREG_BAD_UTF8_ERROR:
<a name="l00200"></a>00200                         $error = <span class="stringliteral">&#39;Malformed UTF-8 data on line&#39;</span>;
<a name="l00201"></a>00201                         <span class="keywordflow">break</span>;
<a name="l00202"></a>00202                     <span class="keywordflow">case</span> PREG_BAD_UTF8_OFFSET_ERROR:
<a name="l00203"></a>00203                         $error = <span class="stringliteral">&#39;Offset doesn\&#39;t correspond to the begin of a valid UTF-8 code point on line&#39;</span>;
<a name="l00204"></a>00204                         <span class="keywordflow">break</span>;
<a name="l00205"></a>00205                     <span class="keywordflow">default</span>:
<a name="l00206"></a>00206                         $error = <span class="stringliteral">&#39;Unable to parse line&#39;</span>;
<a name="l00207"></a>00207                 }
<a name="l00208"></a>00208 
<a name="l00209"></a>00209                 <span class="keywordflow">throw</span> <span class="keyword">new</span> <a class="code" href="class_symfony_1_1_components_1_1_yaml_1_1_parser_exception.html">ParserException</a>(sprintf(<span class="stringliteral">&#39;%s %d (%s).&#39;</span>, $error, $this-&gt;getRealCurrentLineNb() + 1, $this-&gt;currentLine));
<a name="l00210"></a>00210             }
<a name="l00211"></a>00211 
<a name="l00212"></a>00212             <span class="keywordflow">if</span> ($isRef) {
<a name="l00213"></a>00213                 $this-&gt;refs[$isRef] = end($data);
<a name="l00214"></a>00214             }
<a name="l00215"></a>00215         }
<a name="l00216"></a>00216 
<a name="l00217"></a>00217         <span class="keywordflow">if</span> (isset($mbEncoding)) {
<a name="l00218"></a>00218             mb_internal_encoding($mbEncoding);
<a name="l00219"></a>00219         }
<a name="l00220"></a>00220 
<a name="l00221"></a>00221         <span class="keywordflow">return</span> empty($data) ? null : $data;
<a name="l00222"></a>00222     }
<a name="l00223"></a>00223 
<a name="l00229"></a><a class="code" href="class_symfony_1_1_components_1_1_yaml_1_1_parser.html#afed732413dcd90e7e27f15f9a693a933">00229</a>     <span class="keyword">protected</span> function getRealCurrentLineNb()
<a name="l00230"></a>00230     {
<a name="l00231"></a>00231         <span class="keywordflow">return</span> $this-&gt;currentLineNb + $this-&gt;offset;
<a name="l00232"></a>00232     }
<a name="l00233"></a>00233 
<a name="l00239"></a><a class="code" href="class_symfony_1_1_components_1_1_yaml_1_1_parser.html#afab1ea78369d49700e8269645a560ebe">00239</a>     <span class="keyword">protected</span> function getCurrentLineIndentation()
<a name="l00240"></a>00240     {
<a name="l00241"></a>00241         <span class="keywordflow">return</span> strlen($this-&gt;currentLine) - strlen(ltrim($this-&gt;currentLine, <span class="charliteral">&#39; &#39;</span>));
<a name="l00242"></a>00242     }
<a name="l00243"></a>00243 
<a name="l00253"></a><a class="code" href="class_symfony_1_1_components_1_1_yaml_1_1_parser.html#a094d72cd70df641bbb7c4d87647e7afe">00253</a>     <span class="keyword">protected</span> function getNextEmbedBlock($indentation = null)
<a name="l00254"></a>00254     {
<a name="l00255"></a>00255         $this-&gt;moveToNextLine();
<a name="l00256"></a>00256 
<a name="l00257"></a>00257         <span class="keywordflow">if</span> (null === $indentation) {
<a name="l00258"></a>00258             $newIndent = $this-&gt;getCurrentLineIndentation();
<a name="l00259"></a>00259 
<a name="l00260"></a>00260             <span class="keywordflow">if</span> (!$this-&gt;isCurrentLineEmpty() &amp;&amp; 0 == $newIndent) {
<a name="l00261"></a>00261                 <span class="keywordflow">throw</span> <span class="keyword">new</span> <a class="code" href="class_symfony_1_1_components_1_1_yaml_1_1_parser_exception.html">ParserException</a>(sprintf(<span class="stringliteral">&#39;Indentation problem at line %d (%s)&#39;</span>, $this-&gt;getRealCurrentLineNb() + 1, $this-&gt;currentLine));
<a name="l00262"></a>00262             }
<a name="l00263"></a>00263         } <span class="keywordflow">else</span> {
<a name="l00264"></a>00264             $newIndent = $indentation;
<a name="l00265"></a>00265         }
<a name="l00266"></a>00266 
<a name="l00267"></a>00267         $data = array(substr($this-&gt;currentLine, $newIndent));
<a name="l00268"></a>00268 
<a name="l00269"></a>00269         <span class="keywordflow">while</span> ($this-&gt;moveToNextLine()) {
<a name="l00270"></a>00270             <span class="keywordflow">if</span> ($this-&gt;isCurrentLineEmpty()) {
<a name="l00271"></a>00271                 <span class="keywordflow">if</span> ($this-&gt;isCurrentLineBlank()) {
<a name="l00272"></a>00272                     $data[] = substr($this-&gt;currentLine, $newIndent);
<a name="l00273"></a>00273                 }
<a name="l00274"></a>00274 
<a name="l00275"></a>00275                 <span class="keywordflow">continue</span>;
<a name="l00276"></a>00276             }
<a name="l00277"></a>00277 
<a name="l00278"></a>00278             $indent = $this-&gt;getCurrentLineIndentation();
<a name="l00279"></a>00279 
<a name="l00280"></a>00280             <span class="keywordflow">if</span> (preg_match(<span class="stringliteral">&#39;#^(?P&lt;text&gt; *)$#&#39;</span>, $this-&gt;currentLine, $match)) {
<a name="l00281"></a>00281                 <span class="comment">// empty line</span>
<a name="l00282"></a>00282                 $data[] = $match[<span class="stringliteral">&#39;text&#39;</span>];
<a name="l00283"></a>00283             } <span class="keywordflow">else</span> <span class="keywordflow">if</span> ($indent &gt;= $newIndent) {
<a name="l00284"></a>00284                 $data[] = substr($this-&gt;currentLine, $newIndent);
<a name="l00285"></a>00285             } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (0 == $indent) {
<a name="l00286"></a>00286                 $this-&gt;moveToPreviousLine();
<a name="l00287"></a>00287 
<a name="l00288"></a>00288                 <span class="keywordflow">break</span>;
<a name="l00289"></a>00289             } <span class="keywordflow">else</span> {
<a name="l00290"></a>00290                 <span class="keywordflow">throw</span> <span class="keyword">new</span> <a class="code" href="class_symfony_1_1_components_1_1_yaml_1_1_parser_exception.html">ParserException</a>(sprintf(<span class="stringliteral">&#39;Indentation problem at line %d (%s)&#39;</span>, $this-&gt;getRealCurrentLineNb() + 1, $this-&gt;currentLine));
<a name="l00291"></a>00291             }
<a name="l00292"></a>00292         }
<a name="l00293"></a>00293 
<a name="l00294"></a>00294         <span class="keywordflow">return</span> implode(<span class="stringliteral">&quot;\n&quot;</span>, $data);
<a name="l00295"></a>00295     }
<a name="l00296"></a>00296 
<a name="l00300"></a><a class="code" href="class_symfony_1_1_components_1_1_yaml_1_1_parser.html#a23295181488f2269374ba055ab73f133">00300</a>     <span class="keyword">protected</span> function moveToNextLine()
<a name="l00301"></a>00301     {
<a name="l00302"></a>00302         <span class="keywordflow">if</span> ($this-&gt;currentLineNb &gt;= count($this-&gt;lines) - 1) {
<a name="l00303"></a>00303             <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00304"></a>00304         }
<a name="l00305"></a>00305 
<a name="l00306"></a>00306         $this-&gt;currentLine = $this-&gt;lines[++$this-&gt;currentLineNb];
<a name="l00307"></a>00307 
<a name="l00308"></a>00308         <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00309"></a>00309     }
<a name="l00310"></a>00310 
<a name="l00314"></a><a class="code" href="class_symfony_1_1_components_1_1_yaml_1_1_parser.html#a793efbbdb80289712c6d8b13974a0794">00314</a>     <span class="keyword">protected</span> function moveToPreviousLine()
<a name="l00315"></a>00315     {
<a name="l00316"></a>00316         $this-&gt;currentLine = $this-&gt;lines[--$this-&gt;currentLineNb];
<a name="l00317"></a>00317     }
<a name="l00318"></a>00318 
<a name="l00328"></a><a class="code" href="class_symfony_1_1_components_1_1_yaml_1_1_parser.html#a090d97f0d830c8a3a6d4962636b9081b">00328</a>     <span class="keyword">protected</span> function parseValue($value)
<a name="l00329"></a>00329     {
<a name="l00330"></a>00330         <span class="keywordflow">if</span> (<span class="charliteral">&#39;*&#39;</span> === substr($value, 0, 1)) {
<a name="l00331"></a>00331             <span class="keywordflow">if</span> (<span class="keyword">false</span> !== $pos = strpos($value, <span class="charliteral">&#39;#&#39;</span>)) {
<a name="l00332"></a>00332                 $value = substr($value, 1, $pos - 2);
<a name="l00333"></a>00333             } <span class="keywordflow">else</span> {
<a name="l00334"></a>00334                 $value = substr($value, 1);
<a name="l00335"></a>00335             }
<a name="l00336"></a>00336 
<a name="l00337"></a>00337             <span class="keywordflow">if</span> (!array_key_exists($value, $this-&gt;refs)) {
<a name="l00338"></a>00338                 <span class="keywordflow">throw</span> <span class="keyword">new</span> <a class="code" href="class_symfony_1_1_components_1_1_yaml_1_1_parser_exception.html">ParserException</a>(sprintf(<span class="stringliteral">&#39;Reference &quot;%s&quot; does not exist (%s).&#39;</span>, $value, $this-&gt;currentLine));
<a name="l00339"></a>00339             }
<a name="l00340"></a>00340             <span class="keywordflow">return</span> $this-&gt;refs[$value];
<a name="l00341"></a>00341         }
<a name="l00342"></a>00342 
<a name="l00343"></a>00343         <span class="keywordflow">if</span> (preg_match(<span class="stringliteral">&#39;/^(?P&lt;separator&gt;\||&gt;)(?P&lt;modifiers&gt;\+|\-|\d+|\+\d+|\-\d+|\d+\+|\d+\-)?(?P&lt;comments&gt; +#.*)?$/&#39;</span>, $value, $matches)) {
<a name="l00344"></a>00344             $modifiers = isset($matches[<span class="stringliteral">&#39;modifiers&#39;</span>]) ? $matches[<span class="stringliteral">&#39;modifiers&#39;</span>] : <span class="stringliteral">&#39;&#39;</span>;
<a name="l00345"></a>00345 
<a name="l00346"></a>00346             <span class="keywordflow">return</span> $this-&gt;parseFoldedScalar($matches[<span class="stringliteral">&#39;separator&#39;</span>], preg_replace(<span class="stringliteral">&#39;#\d+#&#39;</span>, <span class="stringliteral">&#39;&#39;</span>, $modifiers), intval(abs($modifiers)));
<a name="l00347"></a>00347         } <span class="keywordflow">else</span> {
<a name="l00348"></a>00348             <span class="keywordflow">return</span> Inline::load($value);
<a name="l00349"></a>00349         }
<a name="l00350"></a>00350     }
<a name="l00351"></a>00351 
<a name="l00361"></a><a class="code" href="class_symfony_1_1_components_1_1_yaml_1_1_parser.html#aca51709db86f3336fa0cd8773cc791d0">00361</a>     <span class="keyword">protected</span> function parseFoldedScalar($separator, $indicator = <span class="stringliteral">&#39;&#39;</span>, $indentation = 0)
<a name="l00362"></a>00362     {
<a name="l00363"></a>00363         $separator = <span class="charliteral">&#39;|&#39;</span> == $separator ? <span class="stringliteral">&quot;\n&quot;</span> : <span class="charliteral">&#39; &#39;</span>;
<a name="l00364"></a>00364         $text = <span class="stringliteral">&#39;&#39;</span>;
<a name="l00365"></a>00365 
<a name="l00366"></a>00366         $notEOF = $this-&gt;moveToNextLine();
<a name="l00367"></a>00367 
<a name="l00368"></a>00368         <span class="keywordflow">while</span> ($notEOF &amp;&amp; $this-&gt;isCurrentLineBlank()) {
<a name="l00369"></a>00369             $text .= <span class="stringliteral">&quot;\n&quot;</span>;
<a name="l00370"></a>00370 
<a name="l00371"></a>00371             $notEOF = $this-&gt;moveToNextLine();
<a name="l00372"></a>00372         }
<a name="l00373"></a>00373 
<a name="l00374"></a>00374         <span class="keywordflow">if</span> (!$notEOF) {
<a name="l00375"></a>00375             <span class="keywordflow">return</span> <span class="stringliteral">&#39;&#39;</span>;
<a name="l00376"></a>00376         }
<a name="l00377"></a>00377 
<a name="l00378"></a>00378         <span class="keywordflow">if</span> (!preg_match(<span class="stringliteral">&#39;#^(?P&lt;indent&gt;&#39;</span>.($indentation ? str_repeat(<span class="charliteral">&#39; &#39;</span>, $indentation) : <span class="stringliteral">&#39; +&#39;</span>).<span class="stringliteral">&#39;)(?P&lt;text&gt;.*)$#&#39;</span>, $this-&gt;currentLine, $matches)) {
<a name="l00379"></a>00379             $this-&gt;moveToPreviousLine();
<a name="l00380"></a>00380 
<a name="l00381"></a>00381             <span class="keywordflow">return</span> <span class="stringliteral">&#39;&#39;</span>;
<a name="l00382"></a>00382         }
<a name="l00383"></a>00383 
<a name="l00384"></a>00384         $textIndent = $matches[<span class="stringliteral">&#39;indent&#39;</span>];
<a name="l00385"></a>00385         $previousIndent = 0;
<a name="l00386"></a>00386 
<a name="l00387"></a>00387         $text .= $matches[<span class="stringliteral">&#39;text&#39;</span>].$separator;
<a name="l00388"></a>00388         <span class="keywordflow">while</span> ($this-&gt;currentLineNb + 1 &lt; count($this-&gt;lines)) {
<a name="l00389"></a>00389             $this-&gt;moveToNextLine();
<a name="l00390"></a>00390 
<a name="l00391"></a>00391             <span class="keywordflow">if</span> (preg_match(<span class="stringliteral">&#39;#^(?P&lt;indent&gt; {&#39;</span>.strlen($textIndent).<span class="stringliteral">&#39;,})(?P&lt;text&gt;.+)$#&#39;</span>, $this-&gt;currentLine, $matches)) {
<a name="l00392"></a>00392                 <span class="keywordflow">if</span> (<span class="charliteral">&#39; &#39;</span> == $separator &amp;&amp; $previousIndent != $matches[<span class="stringliteral">&#39;indent&#39;</span>]) {
<a name="l00393"></a>00393                     $text = substr($text, 0, -1).<span class="stringliteral">&quot;\n&quot;</span>;
<a name="l00394"></a>00394                 }
<a name="l00395"></a>00395                 $previousIndent = $matches[<span class="stringliteral">&#39;indent&#39;</span>];
<a name="l00396"></a>00396 
<a name="l00397"></a>00397                 $text .= str_repeat(<span class="charliteral">&#39; &#39;</span>, $diff = strlen($matches[<span class="stringliteral">&#39;indent&#39;</span>]) - strlen($textIndent)).$matches[<span class="stringliteral">&#39;text&#39;</span>].($diff ? <span class="stringliteral">&quot;\n&quot;</span> : $separator);
<a name="l00398"></a>00398             } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (preg_match(<span class="stringliteral">&#39;#^(?P&lt;text&gt; *)$#&#39;</span>, $this-&gt;currentLine, $matches)) {
<a name="l00399"></a>00399                 $text .= preg_replace(<span class="stringliteral">&#39;#^ {1,&#39;</span>.strlen($textIndent).<span class="stringliteral">&#39;}#&#39;</span>, <span class="stringliteral">&#39;&#39;</span>, $matches[<span class="stringliteral">&#39;text&#39;</span>]).<span class="stringliteral">&quot;\n&quot;</span>;
<a name="l00400"></a>00400             } <span class="keywordflow">else</span> {
<a name="l00401"></a>00401                 $this-&gt;moveToPreviousLine();
<a name="l00402"></a>00402 
<a name="l00403"></a>00403                 <span class="keywordflow">break</span>;
<a name="l00404"></a>00404             }
<a name="l00405"></a>00405         }
<a name="l00406"></a>00406 
<a name="l00407"></a>00407         <span class="keywordflow">if</span> (<span class="charliteral">&#39; &#39;</span> == $separator) {
<a name="l00408"></a>00408             <span class="comment">// replace last separator by a newline</span>
<a name="l00409"></a>00409             $text = preg_replace(<span class="stringliteral">&#39;/ (\n*)$/&#39;</span>, <span class="stringliteral">&quot;\n$1&quot;</span>, $text);
<a name="l00410"></a>00410         }
<a name="l00411"></a>00411 
<a name="l00412"></a>00412         <span class="keywordflow">switch</span> ($indicator) {
<a name="l00413"></a>00413             <span class="keywordflow">case</span> <span class="stringliteral">&#39;&#39;</span>:
<a name="l00414"></a>00414                 $text = preg_replace(<span class="stringliteral">&#39;#\n+$#s&#39;</span>, <span class="stringliteral">&quot;\n&quot;</span>, $text);
<a name="l00415"></a>00415                 <span class="keywordflow">break</span>;
<a name="l00416"></a>00416             <span class="keywordflow">case</span> <span class="charliteral">&#39;+&#39;</span>:
<a name="l00417"></a>00417                 <span class="keywordflow">break</span>;
<a name="l00418"></a>00418             <span class="keywordflow">case</span> <span class="charliteral">&#39;-&#39;</span>:
<a name="l00419"></a>00419                 $text = preg_replace(<span class="stringliteral">&#39;#\n+$#s&#39;</span>, <span class="stringliteral">&#39;&#39;</span>, $text);
<a name="l00420"></a>00420                 <span class="keywordflow">break</span>;
<a name="l00421"></a>00421         }
<a name="l00422"></a>00422 
<a name="l00423"></a>00423         <span class="keywordflow">return</span> $text;
<a name="l00424"></a>00424     }
<a name="l00425"></a>00425 
<a name="l00431"></a><a class="code" href="class_symfony_1_1_components_1_1_yaml_1_1_parser.html#a007cdf42dc438be788d23206f14e7396">00431</a>     <span class="keyword">protected</span> function isNextLineIndented()
<a name="l00432"></a>00432     {
<a name="l00433"></a>00433         $currentIndentation = $this-&gt;getCurrentLineIndentation();
<a name="l00434"></a>00434         $notEOF = $this-&gt;moveToNextLine();
<a name="l00435"></a>00435 
<a name="l00436"></a>00436         <span class="keywordflow">while</span> ($notEOF &amp;&amp; $this-&gt;isCurrentLineEmpty()) {
<a name="l00437"></a>00437             $notEOF = $this-&gt;moveToNextLine();
<a name="l00438"></a>00438         }
<a name="l00439"></a>00439 
<a name="l00440"></a>00440         <span class="keywordflow">if</span> (<span class="keyword">false</span> === $notEOF) {
<a name="l00441"></a>00441             <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00442"></a>00442         }
<a name="l00443"></a>00443 
<a name="l00444"></a>00444         $ret = <span class="keyword">false</span>;
<a name="l00445"></a>00445         <span class="keywordflow">if</span> ($this-&gt;getCurrentLineIndentation() &lt;= $currentIndentation) {
<a name="l00446"></a>00446             $ret = <span class="keyword">true</span>;
<a name="l00447"></a>00447         }
<a name="l00448"></a>00448 
<a name="l00449"></a>00449         $this-&gt;moveToPreviousLine();
<a name="l00450"></a>00450 
<a name="l00451"></a>00451         <span class="keywordflow">return</span> $ret;
<a name="l00452"></a>00452     }
<a name="l00453"></a>00453 
<a name="l00459"></a><a class="code" href="class_symfony_1_1_components_1_1_yaml_1_1_parser.html#ae7bb7c2fd370a72c6f119b53ee64eb82">00459</a>     <span class="keyword">protected</span> function isCurrentLineEmpty()
<a name="l00460"></a>00460     {
<a name="l00461"></a>00461         <span class="keywordflow">return</span> $this-&gt;isCurrentLineBlank() || $this-&gt;isCurrentLineComment();
<a name="l00462"></a>00462     }
<a name="l00463"></a>00463 
<a name="l00469"></a><a class="code" href="class_symfony_1_1_components_1_1_yaml_1_1_parser.html#a071146be0626e2ff9537f3b741b511d6">00469</a>     <span class="keyword">protected</span> function isCurrentLineBlank()
<a name="l00470"></a>00470     {
<a name="l00471"></a>00471         <span class="keywordflow">return</span> <span class="stringliteral">&#39;&#39;</span> == trim($this-&gt;currentLine, <span class="charliteral">&#39; &#39;</span>);
<a name="l00472"></a>00472     }
<a name="l00473"></a>00473 
<a name="l00479"></a><a class="code" href="class_symfony_1_1_components_1_1_yaml_1_1_parser.html#af9c00798454b2a4b7c360c3bba9f6b10">00479</a>     <span class="keyword">protected</span> function isCurrentLineComment()
<a name="l00480"></a>00480     {
<a name="l00481"></a>00481         <span class="comment">//checking explicitly the first char of the trim is faster than loops or strpos</span>
<a name="l00482"></a>00482         $ltrimmedLine = ltrim($this-&gt;currentLine, <span class="charliteral">&#39; &#39;</span>);
<a name="l00483"></a>00483         <span class="keywordflow">return</span> $ltrimmedLine[0] === <span class="charliteral">&#39;#&#39;</span>;
<a name="l00484"></a>00484     }
<a name="l00485"></a>00485 
<a name="l00493"></a><a class="code" href="class_symfony_1_1_components_1_1_yaml_1_1_parser.html#a6d462f56da02d7670e368941d918f074">00493</a>     <span class="keyword">protected</span> function cleanup($value)
<a name="l00494"></a>00494     {
<a name="l00495"></a>00495         $value = str_replace(array(<span class="stringliteral">&quot;\r\n&quot;</span>, <span class="stringliteral">&quot;\r&quot;</span>), <span class="stringliteral">&quot;\n&quot;</span>, $value);
<a name="l00496"></a>00496 
<a name="l00497"></a>00497         <span class="keywordflow">if</span> (!preg_match(<span class="stringliteral">&quot;#\n$#&quot;</span>, $value)) {
<a name="l00498"></a>00498             $value .= <span class="stringliteral">&quot;\n&quot;</span>;
<a name="l00499"></a>00499         }
<a name="l00500"></a>00500 
<a name="l00501"></a>00501         <span class="comment">// strip YAML header</span>
<a name="l00502"></a>00502         $count = 0;
<a name="l00503"></a>00503         $value = preg_replace(<span class="stringliteral">&#39;#^\%YAML[: ][\d\.]+.*\n#s&#39;</span>, <span class="stringliteral">&#39;&#39;</span>, $value, -1, $count);
<a name="l00504"></a>00504         $this-&gt;offset += $count;
<a name="l00505"></a>00505 
<a name="l00506"></a>00506         <span class="comment">// remove leading comments and/or ---</span>
<a name="l00507"></a>00507         $trimmedValue = preg_replace(<span class="stringliteral">&#39;#^((\#.*?\n)|(\-\-\-.*?\n))*#s&#39;</span>, <span class="stringliteral">&#39;&#39;</span>, $value, -1, $count);
<a name="l00508"></a>00508         <span class="keywordflow">if</span> ($count == 1) {
<a name="l00509"></a>00509             <span class="comment">// items have been removed, update the offset</span>
<a name="l00510"></a>00510             $this-&gt;offset += substr_count($value, <span class="stringliteral">&quot;\n&quot;</span>) - substr_count($trimmedValue, <span class="stringliteral">&quot;\n&quot;</span>);
<a name="l00511"></a>00511             $value = $trimmedValue;
<a name="l00512"></a>00512         }
<a name="l00513"></a>00513 
<a name="l00514"></a>00514         <span class="keywordflow">return</span> $value;
<a name="l00515"></a>00515     }
<a name="l00516"></a>00516 }
</pre></div></div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><b>Parser.php</b>      </li>
      <li class="footer">Generated on Fri Mar 4 2011 23:20:13 for utopia3 by&#160;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.3 </li>
    </ul>
  </div>
<!--- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Data Structures</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Functions</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>


</body>
</html>
