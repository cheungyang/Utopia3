<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>utopia3: trunk/lib/components/mallocworks/DataAccess/Schema.php Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript">
$(document).ready(initResizable);
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body onload='searchBox.OnSelectItem(0);'>
<!-- Generated by Doxygen 1.7.3 -->
<script type="text/javascript"><!--
var searchBox = new SearchBox("searchBox", "search",false,'Search');
--></script>
<div id="top">
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">utopia3</div>
   <div id="projectbrief">utopia framework - version3</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.html"><span>Namespaces</span></a></li>
      <li><a href="annotated.html"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li id="searchli">
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('_schema_8php.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<h1>trunk/lib/components/mallocworks/DataAccess/Schema.php</h1>  </div>
</div>
<div class="contents">
<div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 &lt;?php
<a name="l00002"></a>00002 <span class="keyword">namespace </span>Utopia\Components\Model;
<a name="l00003"></a>00003 
<a name="l00004"></a>00004 use Doctrine\DBAL\Schema\SchemaException;
<a name="l00005"></a>00005 
<a name="l00006"></a>00006 use Utopia\Components\Object\DataObject;
<a name="l00007"></a>00007 use Utopia\Components\DependencyInjection\ServiceContainer;
<a name="l00008"></a>00008 
<a name="l00009"></a><a class="code" href="class_utopia_1_1_components_1_1_model_1_1_schema.html">00009</a> <span class="keyword">class </span><a class="code" href="class_utopia_1_1_components_1_1_model_1_1_schema.html">Schema</a>
<a name="l00010"></a>00010 {
<a name="l00011"></a>00011     <span class="keyword">private</span> $_data;   <span class="comment">//DataObj</span>
<a name="l00012"></a>00012     <span class="keyword">private</span> $_schemas;<span class="comment">//DataObj</span>
<a name="l00013"></a>00013     <span class="keyword">private</span> $_sc;     <span class="comment">//ServiceContainer</span>
<a name="l00014"></a>00014     <span class="keyword">private</span> $_raw;    <span class="comment">//mixed</span>
<a name="l00015"></a>00015 
<a name="l00016"></a>00016     <span class="keyword">protected</span> $filtered_keys = array(<span class="stringliteral">&#39;index&#39;</span>, <span class="stringliteral">&#39;search&#39;</span>, <span class="stringliteral">&#39;primary&#39;</span>, <span class="stringliteral">&#39;autoincrement&#39;</span>);
<a name="l00017"></a>00017     <span class="keyword">protected</span> $identifier_keys = array(<span class="stringliteral">&#39;id&#39;</span>, <span class="stringliteral">&#39;entity_id&#39;</span>, <span class="stringliteral">&#39;loc&#39;</span>, <span class="stringliteral">&#39;seq&#39;</span>, <span class="stringliteral">&#39;ver&#39;</span>);
<a name="l00018"></a>00018 
<a name="l00019"></a>00019     <span class="keyword">public</span> function __construct(ServiceContainer $sc, $input) {
<a name="l00020"></a>00020          $this-&gt;_raw = $input;
<a name="l00021"></a>00021          $this-&gt;_sc = $sc;
<a name="l00022"></a>00022          $this-&gt;_schemas = <span class="keyword">new</span> DataObject(<span class="stringliteral">&#39;schemas&#39;</span>);
<a name="l00023"></a>00023          <span class="comment">//cache load determined by file change time</span>
<a name="l00024"></a>00024          <span class="keywordflow">try</span>{
<a name="l00025"></a>00025              $mtime = filemtime($this-&gt;_raw);
<a name="l00026"></a>00026          } <span class="keywordflow">catch</span> (Exception $e) {
<a name="l00027"></a>00027              $mtime = time();
<a name="l00028"></a>00028          }
<a name="l00029"></a>00029          $this-&gt;_schemas-&gt;load($mtime, DataObject::EXPIRE_BY_MODTIME);
<a name="l00030"></a>00030     }
<a name="l00031"></a>00031 
<a name="l00037"></a><a class="code" href="class_utopia_1_1_components_1_1_model_1_1_schema.html#ae8b01a693445c2f1d4baed5e343a1654">00037</a>     <span class="keyword">public</span> function <a class="code" href="class_utopia_1_1_components_1_1_model_1_1_schema.html#ae8b01a693445c2f1d4baed5e343a1654">getDBAMLSchemaObj</a>() {
<a name="l00038"></a>00038         $this-&gt;_loadData();
<a name="l00039"></a>00039 
<a name="l00040"></a>00040         $Schema = <span class="keyword">new</span> \Doctrine\DBAL\<a class="code" href="class_utopia_1_1_components_1_1_model_1_1_schema.html">Schema</a>\<a class="code" href="class_utopia_1_1_components_1_1_model_1_1_schema.html">Schema</a>();
<a name="l00041"></a>00041         $tables = array();
<a name="l00042"></a>00042         $entities = $this-&gt;_data-&gt;keys(<span class="stringliteral">&#39;schema&#39;</span>);
<a name="l00043"></a>00043 
<a name="l00044"></a>00044         <span class="comment">//FIELDS</span>
<a name="l00045"></a>00045         <span class="keywordflow">foreach</span>($entities as $entity) {
<a name="l00046"></a>00046             <span class="keywordflow">if</span> (in_array($entity, array(<span class="stringliteral">&#39;types&#39;</span>, <span class="stringliteral">&#39;options&#39;</span>))) {
<a name="l00047"></a>00047                 <span class="keywordflow">continue</span>;
<a name="l00048"></a>00048             }
<a name="l00049"></a>00049 
<a name="l00050"></a>00050             $rec = $this-&gt;_loadSchema($entity);
<a name="l00051"></a>00051             $tables[$entity] = $Schema-&gt;createTable($this-&gt;_data-&gt;{<span class="stringliteral">&quot;schema&gt;$entity&gt;table&quot;</span>});
<a name="l00052"></a>00052 
<a name="l00053"></a>00053             <span class="comment">//FIXME: not working: add table options</span>
<a name="l00054"></a>00054             <span class="keywordflow">if</span> (!$this-&gt;_data-&gt;isempty(<span class="stringliteral">&#39;schema&gt;options&#39;</span>)) {
<a name="l00055"></a>00055                 $this-&gt;_data-&gt;setPointer(<span class="stringliteral">&#39;schema&gt;options&#39;</span>);
<a name="l00056"></a>00056                 <span class="keywordflow">foreach</span> ($this-&gt;_data as $key =&gt; $val) {
<a name="l00057"></a>00057                     $tables[$entity]-&gt;addOption($key, $val);
<a name="l00058"></a>00058                 }
<a name="l00059"></a>00059             }
<a name="l00060"></a>00060 
<a name="l00061"></a>00061             $primary = array();
<a name="l00062"></a>00062             $index = array();
<a name="l00063"></a>00063             $uniqueindex = array();
<a name="l00064"></a>00064 
<a name="l00065"></a>00065             <span class="keywordflow">foreach</span> ($rec[<span class="stringliteral">&#39;fields&#39;</span>] as $name =&gt; $spec) {
<a name="l00066"></a>00066                 preg_match_all(<span class="stringliteral">&#39;/(\w*)(\((\d*)\))?/&#39;</span>, $spec[<span class="stringliteral">&#39;type&#39;</span>], $arr, PREG_PATTERN_ORDER);
<a name="l00067"></a>00067                 $type = $arr[1][0];
<a name="l00068"></a>00068 
<a name="l00069"></a>00069                 <span class="comment">//column</span>
<a name="l00070"></a>00070                 $opts = isset($spec[<span class="stringliteral">&#39;opts&#39;</span>])? $spec[<span class="stringliteral">&#39;opts&#39;</span>]: array();
<a name="l00071"></a>00071                 <span class="comment">//length</span>
<a name="l00072"></a>00072                 <span class="keywordflow">if</span> (isset($arr[3][0]) &amp;&amp; !empty($arr[3][0])) {
<a name="l00073"></a>00073                     $opts[<span class="stringliteral">&#39;length&#39;</span>] = $arr[3][0];
<a name="l00074"></a>00074                 }
<a name="l00075"></a>00075                 <span class="comment">//null</span>
<a name="l00076"></a>00076                 <span class="keywordflow">if</span> (isset($spec[<span class="stringliteral">&#39;req&#39;</span>]) &amp;&amp; $spec[<span class="stringliteral">&#39;req&#39;</span>]==<span class="keyword">true</span>) {
<a name="l00077"></a>00077                     $opts[<span class="stringliteral">&#39;notnull&#39;</span>] = <span class="keyword">true</span>;
<a name="l00078"></a>00078                 } <span class="keywordflow">else</span> {
<a name="l00079"></a>00079                     $opts[<span class="stringliteral">&#39;notnull&#39;</span>] = <span class="keyword">false</span>;
<a name="l00080"></a>00080                 }
<a name="l00081"></a>00081                 <span class="comment">//unsigned</span>
<a name="l00082"></a>00082                 <span class="keywordflow">if</span> (isset($spec[<span class="stringliteral">&#39;unsigned&#39;</span>])) {
<a name="l00083"></a>00083                     $opts[<span class="stringliteral">&#39;unsigned&#39;</span>] = $spec[<span class="stringliteral">&#39;unsigned&#39;</span>];
<a name="l00084"></a>00084                 }
<a name="l00085"></a>00085                 <span class="comment">//fixed</span>
<a name="l00086"></a>00086                 <span class="keywordflow">if</span> (isset($spec[<span class="stringliteral">&#39;fixed&#39;</span>])) {
<a name="l00087"></a>00087                     $opts[<span class="stringliteral">&#39;fixed&#39;</span>] = $spec[<span class="stringliteral">&#39;fixed&#39;</span>];
<a name="l00088"></a>00088                 }
<a name="l00089"></a>00089                 <span class="comment">//def</span>
<a name="l00090"></a>00090                 <span class="keywordflow">if</span> (isset($spec[<span class="stringliteral">&#39;def&#39;</span>])) {
<a name="l00091"></a>00091                     $opts[<span class="stringliteral">&#39;default&#39;</span>] = $spec[<span class="stringliteral">&#39;def&#39;</span>];
<a name="l00092"></a>00092                 }
<a name="l00093"></a>00093                 <span class="comment">//autoincrement (not working)</span>
<a name="l00094"></a>00094                 <span class="keywordflow">if</span> (isset($spec[<span class="stringliteral">&#39;autoincrement&#39;</span>]) &amp;&amp; $spec[<span class="stringliteral">&#39;autoincrement&#39;</span>]==<span class="keyword">true</span>) {
<a name="l00095"></a>00095                     $opts[<span class="stringliteral">&#39;autoincrement&#39;</span>] = <span class="keyword">true</span>;
<a name="l00096"></a>00096                     $tables[$entity]-&gt;setIdGeneratorType(\Doctrine\DBAL\<a class="code" href="class_utopia_1_1_components_1_1_model_1_1_schema.html">Schema</a>\Table::ID_IDENTITY);
<a name="l00097"></a>00097                 }
<a name="l00098"></a>00098 
<a name="l00099"></a>00099                 $tables[$entity]-&gt;addColumn($name, $type, $opts);
<a name="l00100"></a>00100 
<a name="l00101"></a>00101                 <span class="comment">//primary</span>
<a name="l00102"></a>00102                 <span class="keywordflow">if</span> (isset($spec[<span class="stringliteral">&#39;primary&#39;</span>]) &amp;&amp; $spec[<span class="stringliteral">&#39;primary&#39;</span>]==<span class="keyword">true</span>) {
<a name="l00103"></a>00103                     $primary[] = $name;
<a name="l00104"></a>00104                 }
<a name="l00105"></a>00105 
<a name="l00106"></a>00106                 <span class="comment">//uniqueindex</span>
<a name="l00107"></a>00107                 <span class="keywordflow">if</span> (isset($spec[<span class="stringliteral">&#39;uniqueindex&#39;</span>]) &amp;&amp; $spec[<span class="stringliteral">&#39;uniqueindex&#39;</span>]==<span class="keyword">true</span>) {
<a name="l00108"></a>00108                     $uniqueindex[] = $name;
<a name="l00109"></a>00109                 }
<a name="l00110"></a>00110 
<a name="l00111"></a>00111                 <span class="comment">//index</span>
<a name="l00112"></a>00112                 <span class="keywordflow">if</span> (isset($spec[<span class="stringliteral">&#39;index&#39;</span>]) &amp;&amp; $spec[<span class="stringliteral">&#39;index&#39;</span>]==<span class="keyword">true</span>) {
<a name="l00113"></a>00113                     $index[] = $name;
<a name="l00114"></a>00114                 }
<a name="l00115"></a>00115             }
<a name="l00116"></a>00116 
<a name="l00117"></a>00117             <span class="keywordflow">if</span> (!empty($primary)) {
<a name="l00118"></a>00118                 $tables[$entity]-&gt;setPrimaryKey($primary);
<a name="l00119"></a>00119             }
<a name="l00120"></a>00120             <span class="keywordflow">if</span> (!empty($uniqueindex)) {
<a name="l00121"></a>00121                 $tables[$entity]-&gt;addUniqueIndex($uniqueindex);
<a name="l00122"></a>00122             }
<a name="l00123"></a>00123             <span class="keywordflow">if</span> (!empty($index)) {
<a name="l00124"></a>00124                 $tables[$entity]-&gt;addIndex($index);
<a name="l00125"></a>00125             }
<a name="l00126"></a>00126         }
<a name="l00127"></a>00127 
<a name="l00128"></a>00128         <span class="comment">//RELATIONSHIPS</span>
<a name="l00129"></a>00129         <span class="keywordflow">foreach</span>($entities as $entity) {
<a name="l00130"></a>00130             <span class="keywordflow">if</span> (in_array($entity, array(<span class="stringliteral">&#39;types&#39;</span>, <span class="stringliteral">&#39;options&#39;</span>))) {
<a name="l00131"></a>00131                 <span class="keywordflow">continue</span>;
<a name="l00132"></a>00132             }
<a name="l00133"></a>00133 
<a name="l00134"></a>00134             $rec = $this-&gt;_loadSchema($entity);
<a name="l00135"></a>00135             <span class="keywordflow">foreach</span> ($rec[<span class="stringliteral">&#39;relationships&#39;</span>] as $field =&gt; $spec) {
<a name="l00136"></a>00136                 $tables[$entity]-&gt;addForeignKeyConstraint($tables[$spec[<span class="stringliteral">&#39;foreigntable&#39;</span>]], array($field), array($spec[<span class="stringliteral">&#39;foreignfield&#39;</span>]), array(<span class="stringliteral">&quot;onUpdate&quot;</span> =&gt; <span class="stringliteral">&quot;CASCADE&quot;</span>));
<a name="l00137"></a>00137             }
<a name="l00138"></a>00138         }
<a name="l00139"></a>00139         <span class="keywordflow">return</span> $Schema;
<a name="l00140"></a>00140     }
<a name="l00141"></a>00141 
<a name="l00142"></a>00142     <span class="keyword">public</span> function getValidationSpec($entityname) {
<a name="l00143"></a>00143         $rec = $this-&gt;_loadSchema($entityname);
<a name="l00144"></a>00144         $rtn = array();
<a name="l00145"></a>00145         <span class="keywordflow">foreach</span>($rec[<span class="stringliteral">&#39;fields&#39;</span>] as $key =&gt;  $r) {
<a name="l00146"></a>00146             $rtn[$key] = array_diff_key($r, array_flip($this-&gt;filtered_keys));
<a name="l00147"></a>00147         }
<a name="l00148"></a>00148         <span class="keywordflow">return</span> $rtn;
<a name="l00149"></a>00149     }
<a name="l00150"></a>00150 
<a name="l00151"></a>00151     <span class="keyword">public</span> function getCriteriaSpec($entityname, array $exclude) {
<a name="l00152"></a>00152         $spec = $this-&gt;getValidationSpec($entityname);
<a name="l00153"></a>00153         <span class="keywordflow">foreach</span>($spec as &amp;$s){
<a name="l00154"></a>00154             $s[<span class="stringliteral">&#39;req&#39;</span>] = <span class="keyword">false</span>;
<a name="l00155"></a>00155         }
<a name="l00156"></a>00156         <span class="keywordflow">return</span> array_diff_key($spec, array_flip($exclude));
<a name="l00157"></a>00157     }
<a name="l00158"></a>00158 
<a name="l00159"></a>00159     <span class="keyword">public</span> function getTableName($entityname) {
<a name="l00160"></a>00160         <span class="comment">//quick response</span>
<a name="l00161"></a>00161         <span class="keywordflow">if</span> (isset($this-&gt;_data-&gt;{<span class="stringliteral">&quot;schema&gt;$entityname&gt;table&quot;</span>})) {
<a name="l00162"></a>00162             <span class="keywordflow">return</span> $this-&gt;_data-&gt;{<span class="stringliteral">&quot;schema&gt;$entityname&gt;table&quot;</span>};
<a name="l00163"></a>00163         }
<a name="l00164"></a>00164 
<a name="l00165"></a>00165         <span class="comment">//check if entity exists</span>
<a name="l00166"></a>00166         $this-&gt;_loadData();
<a name="l00167"></a>00167         <span class="keywordflow">if</span> (!isset($this-&gt;_data-&gt;{<span class="stringliteral">&quot;schema&gt;$entityname&gt;table&quot;</span>})) {
<a name="l00168"></a>00168             <span class="keywordflow">throw</span> <span class="keyword">new</span> ModelException(<span class="stringliteral">&quot;table name for &#39;$entityname&#39; does not exist&quot;</span>);
<a name="l00169"></a>00169         }
<a name="l00170"></a>00170         <span class="keywordflow">return</span> $this-&gt;_data-&gt;{<span class="stringliteral">&quot;schema&gt;$entityname&gt;table&quot;</span>};
<a name="l00171"></a>00171     }
<a name="l00172"></a>00172 
<a name="l00173"></a>00173     <span class="keyword">public</span> function getIdentifierKeys(){
<a name="l00174"></a>00174         <span class="keywordflow">return</span> $this-&gt;identifier_keys;
<a name="l00175"></a>00175     }
<a name="l00176"></a>00176 
<a name="l00177"></a>00177     <span class="keyword">public</span> function getEntityNames() {
<a name="l00178"></a>00178         <span class="keywordflow">if</span> (!isset($this-&gt;_data-&gt;schema)) {
<a name="l00179"></a>00179             $this-&gt;_loadData();
<a name="l00180"></a>00180         }
<a name="l00181"></a>00181 
<a name="l00182"></a>00182         $keys = array();
<a name="l00183"></a>00183         $this-&gt;_data-&gt;setPointer(<span class="stringliteral">&#39;schema&#39;</span>);
<a name="l00184"></a>00184         <span class="keywordflow">foreach</span>($this-&gt;_data as $key =&gt; $value) {
<a name="l00185"></a>00185             <span class="keywordflow">if</span> (isset($value[<span class="stringliteral">&#39;table&#39;</span>])) {
<a name="l00186"></a>00186                 $keys[] = $key;
<a name="l00187"></a>00187             }
<a name="l00188"></a>00188         }
<a name="l00189"></a>00189         <span class="keywordflow">return</span> $keys;
<a name="l00190"></a>00190     }
<a name="l00191"></a>00191 
<a name="l00192"></a>00192     <span class="keyword">public</span> function is_loc($entityname) {
<a name="l00193"></a>00193         <span class="comment">//check if entity exists</span>
<a name="l00194"></a>00194         $this-&gt;_loadData();
<a name="l00195"></a>00195         <span class="keywordflow">if</span> (!isset($this-&gt;_data-&gt;{<span class="stringliteral">&quot;schema&gt;$entityname&quot;</span>})) {
<a name="l00196"></a>00196             <span class="keywordflow">throw</span> <span class="keyword">new</span> ModelException(<span class="stringliteral">&quot;schema for &#39;$entityname&#39; does not exist&quot;</span>);
<a name="l00197"></a>00197         }
<a name="l00198"></a>00198 
<a name="l00199"></a>00199         <span class="comment">//parse fields and relationships</span>
<a name="l00200"></a>00200         <span class="keywordflow">return</span> in_array(<span class="stringliteral">&#39;translateable&#39;</span>, $this-&gt;_data-&gt;get(<span class="stringliteral">&quot;schema&gt;$entityname&gt;type&quot;</span>, array()));
<a name="l00201"></a>00201     }
<a name="l00202"></a>00202 
<a name="l00203"></a>00203     <span class="keyword">public</span> function is_seq($entityname) {
<a name="l00204"></a>00204         <span class="comment">//check if entity exists</span>
<a name="l00205"></a>00205         $this-&gt;_loadData();
<a name="l00206"></a>00206         <span class="keywordflow">if</span> (!isset($this-&gt;_data-&gt;{<span class="stringliteral">&quot;schema&gt;$entityname&quot;</span>})) {
<a name="l00207"></a>00207             <span class="keywordflow">throw</span> <span class="keyword">new</span> ModelException(<span class="stringliteral">&quot;schema for &#39;$entityname&#39; does not exist&quot;</span>);
<a name="l00208"></a>00208         }
<a name="l00209"></a>00209 
<a name="l00210"></a>00210         <span class="comment">//parse fields and relationships</span>
<a name="l00211"></a>00211         <span class="keywordflow">return</span> in_array(<span class="stringliteral">&#39;chainable&#39;</span>, $this-&gt;_data-&gt;get(<span class="stringliteral">&quot;schema&gt;$entityname&gt;type&quot;</span>, array()));
<a name="l00212"></a>00212     }
<a name="l00213"></a>00213 
<a name="l00214"></a>00214     <span class="keyword">public</span> function is_ver($entityname) {
<a name="l00215"></a>00215         <span class="comment">//check if entity exists</span>
<a name="l00216"></a>00216         $this-&gt;_loadData();
<a name="l00217"></a>00217         <span class="keywordflow">if</span> (!isset($this-&gt;_data-&gt;{<span class="stringliteral">&quot;schema&gt;$entityname&quot;</span>})) {
<a name="l00218"></a>00218             <span class="keywordflow">throw</span> <span class="keyword">new</span> ModelException(<span class="stringliteral">&quot;schema for &#39;$entityname&#39; does not exist&quot;</span>);
<a name="l00219"></a>00219         }
<a name="l00220"></a>00220 
<a name="l00221"></a>00221         <span class="comment">//parse fields and relationships</span>
<a name="l00222"></a>00222         <span class="keywordflow">return</span> in_array(<span class="stringliteral">&#39;versionable&#39;</span>, $this-&gt;_data-&gt;get(<span class="stringliteral">&quot;schema&gt;$entityname&gt;type&quot;</span>, array()));
<a name="l00223"></a>00223     }
<a name="l00224"></a>00224 
<a name="l00225"></a>00225     <span class="keyword">private</span> function _loadData() {
<a name="l00226"></a>00226         <span class="comment">//load schema from file</span>
<a name="l00227"></a>00227         <span class="keywordflow">if</span> (!isset($this-&gt;_data)) {
<a name="l00228"></a>00228             $this-&gt;_data = <span class="keyword">new</span> DataObject(<span class="stringliteral">&#39;schema.config&#39;</span>);
<a name="l00229"></a>00229              <span class="keywordflow">try</span>{
<a name="l00230"></a>00230                  $mtime = filemtime($this-&gt;_raw);
<a name="l00231"></a>00231              } <span class="keywordflow">catch</span> (Exception $e) {
<a name="l00232"></a>00232                  $mtime = time();
<a name="l00233"></a>00233              }
<a name="l00234"></a>00234             $this-&gt;_data-&gt;load($mtime, DataObject::EXPIRE_BY_MODTIME);
<a name="l00235"></a>00235             <span class="keywordflow">if</span> ($this-&gt;_data-&gt;get(<span class="stringliteral">&#39;&#39;</span>) == <span class="keyword">false</span>){
<a name="l00236"></a>00236                 $parser = $this-&gt;_sc-&gt;parser;
<a name="l00237"></a>00237                 $this-&gt;_data-&gt;set(<span class="stringliteral">&#39;&#39;</span>, $parser-&gt;asArray($this-&gt;_raw));
<a name="l00238"></a>00238                 $this-&gt;_data-&gt;save();
<a name="l00239"></a>00239             }
<a name="l00240"></a>00240         }
<a name="l00241"></a>00241     }
<a name="l00242"></a>00242 
<a name="l00243"></a>00243     <span class="keyword">private</span> function _loadSchema($entityname) {
<a name="l00244"></a>00244         <span class="comment">//quick response</span>
<a name="l00245"></a>00245         <span class="keywordflow">if</span> (isset($this-&gt;_schemas-&gt;{$entityname})) {
<a name="l00246"></a>00246             <span class="keywordflow">return</span> $this-&gt;_schemas-&gt;{$entityname};
<a name="l00247"></a>00247         }
<a name="l00248"></a>00248 
<a name="l00249"></a>00249         <span class="comment">//check if entity exists</span>
<a name="l00250"></a>00250         $this-&gt;_loadData();
<a name="l00251"></a>00251         <span class="keywordflow">if</span> (!isset($this-&gt;_data-&gt;{<span class="stringliteral">&quot;schema&gt;$entityname&quot;</span>})) {
<a name="l00252"></a>00252             <span class="keywordflow">throw</span> <span class="keyword">new</span> ModelException(<span class="stringliteral">&quot;schema for &#39;$entityname&#39; does not exist at &#39;&quot;</span> .$this-&gt;_raw.<span class="stringliteral">&quot;&#39;&quot;</span>);
<a name="l00253"></a>00253         }
<a name="l00254"></a>00254 
<a name="l00255"></a>00255         <span class="comment">//parse fields and relationships</span>
<a name="l00256"></a>00256         $types = $this-&gt;_data-&gt;{<span class="stringliteral">&quot;schema&gt;$entityname&gt;type&quot;</span>};
<a name="l00257"></a>00257         <span class="keywordflow">if</span> (!is_array($types)) {
<a name="l00258"></a>00258             $types = array($types);
<a name="l00259"></a>00259         }
<a name="l00260"></a>00260         $fields = $this-&gt;_data-&gt;get(<span class="stringliteral">&quot;schema&gt;$entityname&gt;fields&quot;</span>, array());
<a name="l00261"></a>00261         $relationships = $this-&gt;_data-&gt;get(<span class="stringliteral">&quot;schema&gt;$entityname&gt;relationships&quot;</span>, array());
<a name="l00262"></a>00262         <span class="keywordflow">foreach</span>($types as $type) {
<a name="l00263"></a>00263             $fields = array_merge_recursive($fields, $this-&gt;_data-&gt;get(<span class="stringliteral">&quot;schema&gt;types&gt;$type&gt;fields&quot;</span>, array()));
<a name="l00264"></a>00264             $relationships = array_merge_recursive($relationships, $this-&gt;_data-&gt;get(<span class="stringliteral">&quot;schema&gt;types&gt;$type&gt;relationships&quot;</span>, array()));
<a name="l00265"></a>00265         }
<a name="l00266"></a>00266 
<a name="l00267"></a>00267         <span class="comment">//make a doctrine schema</span>
<a name="l00268"></a>00268         $this-&gt;_schemas-&gt;{$entityname} = array(<span class="stringliteral">&#39;fields&#39;</span>=&gt;$fields, <span class="stringliteral">&#39;relationships&#39;</span>=&gt;$relationships);
<a name="l00269"></a>00269         $this-&gt;_schemas-&gt;save();
<a name="l00270"></a>00270         <span class="keywordflow">return</span> $this-&gt;_schemas-&gt;{$entityname};
<a name="l00271"></a>00271     }
<a name="l00272"></a>00272 }
</pre></div></div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><b>Schema.php</b>      </li>
      <li class="footer">Generated on Fri Mar 4 2011 23:22:16 for utopia3 by&#160;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.3 </li>
    </ul>
  </div>
<!--- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Data Structures</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Functions</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>


</body>
</html>
