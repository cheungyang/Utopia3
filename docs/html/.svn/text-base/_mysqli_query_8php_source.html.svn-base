<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>utopia3: trunk/lib/components/mallocworks/DataAccess/MysqliQuery.php Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript">
$(document).ready(initResizable);
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body onload='searchBox.OnSelectItem(0);'>
<!-- Generated by Doxygen 1.7.3 -->
<script type="text/javascript"><!--
var searchBox = new SearchBox("searchBox", "search",false,'Search');
--></script>
<div id="top">
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">utopia3</div>
   <div id="projectbrief">utopia framework - version3</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.html"><span>Namespaces</span></a></li>
      <li><a href="annotated.html"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li id="searchli">
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('_mysqli_query_8php.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<h1>trunk/lib/components/mallocworks/DataAccess/MysqliQuery.php</h1>  </div>
</div>
<div class="contents">
<div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 &lt;?php
<a name="l00002"></a>00002 <span class="keyword">namespace </span>Utopia\Components\Model;
<a name="l00003"></a>00003 
<a name="l00004"></a><a class="code" href="class_utopia_1_1_components_1_1_model_1_1_mysqli_query.html">00004</a> <span class="keyword">class </span><a class="code" href="class_utopia_1_1_components_1_1_model_1_1_mysqli_query.html">MysqliQuery</a>
<a name="l00005"></a>00005 {
<a name="l00006"></a>00006     <span class="keyword">private</span> $_p, $_op, $_dirty;
<a name="l00007"></a>00007 
<a name="l00008"></a>00008     <span class="keyword">private</span> $_params; <span class="comment">//for prepare statement parameters</span>
<a name="l00009"></a>00009     <span class="keyword">private</span> $_query;  <span class="comment">//for prepare statement query</span>
<a name="l00010"></a>00010 
<a name="l00016"></a><a class="code" href="class_utopia_1_1_components_1_1_model_1_1_mysqli_query.html#a08bb7825352815d7349d4288c83f7fef">00016</a>     <span class="keyword">static</span> <span class="keyword">public</span> function select($mixed=<span class="charliteral">&#39;*&#39;</span>)
<a name="l00017"></a>00017     {
<a name="l00018"></a>00018         $i = <span class="keyword">new</span> <span class="keyword">self</span>(<span class="stringliteral">&#39;select&#39;</span>);
<a name="l00019"></a>00019         <span class="keywordflow">if</span> (is_array($mixed)){
<a name="l00020"></a>00020             $i-&gt;_p[<span class="stringliteral">&#39;select&#39;</span>] = $mixed;
<a name="l00021"></a>00021         } <span class="keywordflow">else</span> {
<a name="l00022"></a>00022             $i-&gt;_p[<span class="stringliteral">&#39;select&#39;</span>][] = $mixed;
<a name="l00023"></a>00023         }
<a name="l00024"></a>00024         <span class="keywordflow">return</span> $i;
<a name="l00025"></a>00025     }
<a name="l00026"></a>00026 
<a name="l00032"></a><a class="code" href="class_utopia_1_1_components_1_1_model_1_1_mysqli_query.html#a8d91cfbac9dbdbe9f53f45cebd1c8e65">00032</a>     <span class="keyword">static</span> <span class="keyword">public</span> function <a class="code" href="class_utopia_1_1_components_1_1_model_1_1_mysqli_query.html#a8d91cfbac9dbdbe9f53f45cebd1c8e65">insert</a>($table) {
<a name="l00033"></a>00033         $i = <span class="keyword">new</span> <span class="keyword">self</span>(<span class="stringliteral">&#39;insert&#39;</span>);
<a name="l00034"></a>00034         $i-&gt;_p[<span class="stringliteral">&#39;from&#39;</span>] = $table;
<a name="l00035"></a>00035         <span class="keywordflow">return</span> $i;
<a name="l00036"></a>00036     }
<a name="l00037"></a>00037 
<a name="l00043"></a><a class="code" href="class_utopia_1_1_components_1_1_model_1_1_mysqli_query.html#aeb8134848cb31e6bca48bf1173c8fa06">00043</a>     <span class="keyword">static</span> <span class="keyword">public</span> function <span class="keyword">delete</span>($table) {
<a name="l00044"></a>00044         $i = <span class="keyword">new</span> <span class="keyword">self</span>(<span class="stringliteral">&#39;delete&#39;</span>);
<a name="l00045"></a>00045         $i-&gt;_p[<span class="stringliteral">&#39;from&#39;</span>] = $table;
<a name="l00046"></a>00046         <span class="keywordflow">return</span> $i;
<a name="l00047"></a>00047     }
<a name="l00048"></a>00048 
<a name="l00054"></a><a class="code" href="class_utopia_1_1_components_1_1_model_1_1_mysqli_query.html#ad7c30a1e0690b78ce4048f8ad19dfe8f">00054</a>     <span class="keyword">static</span> <span class="keyword">public</span> function <a class="code" href="class_utopia_1_1_components_1_1_model_1_1_mysqli_query.html#ad7c30a1e0690b78ce4048f8ad19dfe8f">update</a>($table) {
<a name="l00055"></a>00055         $i = <span class="keyword">new</span> <span class="keyword">self</span>(<span class="stringliteral">&#39;update&#39;</span>);
<a name="l00056"></a>00056         $i-&gt;_p[<span class="stringliteral">&#39;from&#39;</span>] = $table;
<a name="l00057"></a>00057         <span class="keywordflow">return</span> $i;
<a name="l00058"></a>00058     }
<a name="l00059"></a>00059 
<a name="l00065"></a><a class="code" href="class_utopia_1_1_components_1_1_model_1_1_mysqli_query.html#adec08e0690fdad2cafb61def28144352">00065</a>     <span class="keyword">protected</span> function __construct($op)
<a name="l00066"></a>00066     {
<a name="l00067"></a>00067         $this-&gt;reset();
<a name="l00068"></a>00068         $this-&gt;_op = $op;
<a name="l00069"></a>00069         $this-&gt;_dirty = <span class="keyword">true</span>;
<a name="l00070"></a>00070     }
<a name="l00071"></a>00071 
<a name="l00077"></a><a class="code" href="class_utopia_1_1_components_1_1_model_1_1_mysqli_query.html#a4a20559544fdf4dcb457e258dc976cf8">00077</a>     <span class="keyword">public</span> function reset()
<a name="l00078"></a>00078     {
<a name="l00079"></a>00079         $this-&gt;_p = array(
<a name="l00080"></a>00080             <span class="stringliteral">&#39;values&#39;</span> =&gt; array(),
<a name="l00081"></a>00081             <span class="stringliteral">&#39;set&#39;</span>    =&gt; array(),
<a name="l00082"></a>00082             <span class="stringliteral">&#39;select&#39;</span> =&gt; array(),
<a name="l00083"></a>00083             <span class="stringliteral">&#39;leftjoin&#39;</span> =&gt; array(),
<a name="l00084"></a>00084             <span class="stringliteral">&#39;distinct&#39;</span> =&gt; <span class="keyword">false</span>,
<a name="l00085"></a>00085             <span class="stringliteral">&#39;from&#39;</span>   =&gt; <span class="stringliteral">&#39;&#39;</span>,
<a name="l00086"></a>00086             <span class="stringliteral">&#39;where&#39;</span>  =&gt; array(),
<a name="l00087"></a>00087             <span class="stringliteral">&#39;wherecount&#39;</span>=&gt;0,
<a name="l00088"></a>00088             <span class="stringliteral">&#39;having&#39;</span> =&gt; <span class="stringliteral">&#39;&#39;</span>,
<a name="l00089"></a>00089             <span class="stringliteral">&#39;group&#39;</span>  =&gt; <span class="stringliteral">&#39;&#39;</span>,
<a name="l00090"></a>00090             <span class="stringliteral">&#39;order&#39;</span>  =&gt; array(),
<a name="l00091"></a>00091             <span class="stringliteral">&#39;limit&#39;</span>  =&gt; <span class="stringliteral">&#39;&#39;</span>,
<a name="l00092"></a>00092             <span class="stringliteral">&#39;offset&#39;</span> =&gt; 0,
<a name="l00093"></a>00093             <span class="stringliteral">&#39;duplicatedkey&#39;</span> =&gt; array()
<a name="l00094"></a>00094         );
<a name="l00095"></a>00095         $this-&gt;_dirty = <span class="keyword">true</span>;
<a name="l00096"></a>00096         <span class="keywordflow">return</span> $this;
<a name="l00097"></a>00097     }
<a name="l00098"></a>00098 
<a name="l00104"></a><a class="code" href="class_utopia_1_1_components_1_1_model_1_1_mysqli_query.html#ab126fd2d00bd45edebfb5bcce1b53fb3">00104</a>     <span class="keyword">public</span> function distinct($bool=<span class="keyword">true</span>)
<a name="l00105"></a>00105     {
<a name="l00106"></a>00106         $this-&gt;_p[<span class="stringliteral">&#39;distinct&#39;</span>] = $bool;
<a name="l00107"></a>00107         $this-&gt;_dirty = <span class="keyword">true</span>;
<a name="l00108"></a>00108         <span class="keywordflow">return</span> $this;
<a name="l00109"></a>00109     }
<a name="l00110"></a>00110 
<a name="l00116"></a><a class="code" href="class_utopia_1_1_components_1_1_model_1_1_mysqli_query.html#a8e929d769efc19fbd29888157f8aa836">00116</a>     <span class="keyword">public</span> function <a class="code" href="class_utopia_1_1_components_1_1_model_1_1_mysqli_query.html#a8e929d769efc19fbd29888157f8aa836">values</a>($mixed) {
<a name="l00117"></a>00117         <span class="keywordflow">if</span> (empty($mixed) || $mixed == <span class="keyword">false</span>)
<a name="l00118"></a>00118         {
<a name="l00119"></a>00119             <span class="keywordflow">return</span> $this;
<a name="l00120"></a>00120         }
<a name="l00121"></a>00121         $this-&gt;_p[<span class="stringliteral">&#39;values&#39;</span>] = $mixed;
<a name="l00122"></a>00122         $this-&gt;_dirty = <span class="keyword">true</span>;
<a name="l00123"></a>00123         <span class="keywordflow">return</span> $this;
<a name="l00124"></a>00124     }
<a name="l00125"></a>00125 
<a name="l00131"></a><a class="code" href="class_utopia_1_1_components_1_1_model_1_1_mysqli_query.html#aa7898b3e3faaf768b5454fe69fa66d79">00131</a>     <span class="keyword">public</span> function <a class="code" href="class_utopia_1_1_components_1_1_model_1_1_mysqli_query.html#aa7898b3e3faaf768b5454fe69fa66d79">duplicatekey</a>($mixed) {
<a name="l00132"></a>00132         <span class="keywordflow">if</span> (empty($mixed)) {
<a name="l00133"></a>00133             <span class="keywordflow">return</span> $this;
<a name="l00134"></a>00134         }
<a name="l00135"></a>00135 
<a name="l00136"></a>00136         <span class="keywordflow">if</span> (is_array($mixed)) {
<a name="l00137"></a>00137             $this-&gt;_p[<span class="stringliteral">&#39;duplicatedkey&#39;</span>] = array_merge($this-&gt;_p[<span class="stringliteral">&#39;duplicatedkey&#39;</span>], $mixed);
<a name="l00138"></a>00138         } <span class="keywordflow">else</span> {
<a name="l00139"></a>00139             $this-&gt;_p[<span class="stringliteral">&#39;duplicatedkey&#39;</span>][] = $mixed;
<a name="l00140"></a>00140         }
<a name="l00141"></a>00141         $this-&gt;_dirty = <span class="keyword">true</span>;
<a name="l00142"></a>00142         <span class="keywordflow">return</span> $this;
<a name="l00143"></a>00143     }
<a name="l00144"></a>00144 
<a name="l00150"></a><a class="code" href="class_utopia_1_1_components_1_1_model_1_1_mysqli_query.html#a3c45dd96b0790e54b96e524a08036d4d">00150</a>     <span class="keyword">public</span> function from($mixed)
<a name="l00151"></a>00151     {
<a name="l00152"></a>00152         <span class="keywordflow">if</span> (empty($mixed) || $mixed == <span class="keyword">false</span>)
<a name="l00153"></a>00153         {
<a name="l00154"></a>00154             <span class="keywordflow">return</span> $this;
<a name="l00155"></a>00155         }
<a name="l00156"></a>00156 
<a name="l00157"></a>00157         <span class="keywordflow">if</span> (is_array($mixed)){
<a name="l00158"></a>00158             $this-&gt;_p[<span class="stringliteral">&#39;from&#39;</span>] = $mixed;
<a name="l00159"></a>00159         } <span class="keywordflow">else</span> {
<a name="l00160"></a>00160             $this-&gt;_p[<span class="stringliteral">&#39;from&#39;</span>] = array($mixed);
<a name="l00161"></a>00161         }
<a name="l00162"></a>00162         $this-&gt;_dirty = <span class="keyword">true</span>;
<a name="l00163"></a>00163         <span class="keywordflow">return</span> $this;
<a name="l00164"></a>00164     }
<a name="l00165"></a>00165 
<a name="l00172"></a><a class="code" href="class_utopia_1_1_components_1_1_model_1_1_mysqli_query.html#aa9d66ccf2c0805128fe23a8560ee3740">00172</a>     <span class="keyword">public</span> function leftJoin($table, $on)
<a name="l00173"></a>00173     {
<a name="l00174"></a>00174         $this-&gt;_p[<span class="stringliteral">&#39;leftjoin&#39;</span>][] = array($table, $on);
<a name="l00175"></a>00175         $this-&gt;_dirty = <span class="keyword">true</span>;
<a name="l00176"></a>00176         <span class="keywordflow">return</span> $this;
<a name="l00177"></a>00177     }
<a name="l00178"></a>00178 
<a name="l00186"></a><a class="code" href="class_utopia_1_1_components_1_1_model_1_1_mysqli_query.html#a55cc3f3618ce16414ef63de5152d77bc">00186</a>     <span class="keyword">public</span> function where($mixed, $value=<span class="stringliteral">&#39;__NOTHING__&#39;</span>, $if=<span class="keyword">true</span>)
<a name="l00187"></a>00187     {
<a name="l00188"></a>00188         <span class="keywordflow">if</span> (!$if || empty($mixed) || $mixed == <span class="keyword">false</span>) {
<a name="l00189"></a>00189             <span class="keywordflow">return</span> $this;
<a name="l00190"></a>00190         }
<a name="l00191"></a>00191 
<a name="l00192"></a>00192         <span class="comment">//print_r($mixed);</span>
<a name="l00193"></a>00193 
<a name="l00194"></a>00194         <span class="keywordflow">if</span> (is_array($mixed) &amp;&amp; is_string($value) &amp;&amp; strcmp($value,<span class="stringliteral">&quot;__NOTHING__&quot;</span>)==0){
<a name="l00195"></a>00195             <span class="keywordflow">foreach</span>($mixed as $key =&gt; $val){
<a name="l00196"></a>00196                 <span class="keywordflow">if</span> (is_numeric($key) &amp;&amp; is_array($val)) {
<a name="l00197"></a>00197                     <span class="comment">//recruveively add where</span>
<a name="l00198"></a>00198                     $this-&gt;where($val);
<a name="l00199"></a>00199                 } <span class="keywordflow">else</span> {
<a name="l00200"></a>00200                     <span class="comment">//add &#39;=?&#39; if &#39;?&#39; does not exist</span>
<a name="l00201"></a>00201                     <span class="keywordflow">if</span> (strpos($key,<span class="charliteral">&#39;?&#39;</span>) == <span class="keyword">false</span>) {
<a name="l00202"></a>00202                         $key = $key.<span class="stringliteral">&#39;=?&#39;</span>;
<a name="l00203"></a>00203                     }
<a name="l00204"></a>00204                     $this-&gt;_p[<span class="stringliteral">&#39;where&#39;</span>][$this-&gt;_p[<span class="stringliteral">&#39;wherecount&#39;</span>]][$key] = $val;
<a name="l00205"></a>00205                 }
<a name="l00206"></a>00206             }
<a name="l00207"></a>00207         } elseif (!is_array($mixed)) {
<a name="l00208"></a>00208            <span class="keywordflow">if</span> (is_string($value) &amp;&amp; strcmp($value,<span class="stringliteral">&quot;__NOTHING__&quot;</span>)==0) {
<a name="l00209"></a>00209                <span class="keywordflow">if</span> (strpos($mixed,<span class="charliteral">&#39;?&#39;</span>) == <span class="keyword">false</span>) {
<a name="l00210"></a>00210                    $this-&gt;_p[<span class="stringliteral">&#39;where&#39;</span>][$this-&gt;_p[<span class="stringliteral">&#39;wherecount&#39;</span>]][$mixed] = <span class="stringliteral">&#39;__NOTHING__&#39;</span>;
<a name="l00211"></a>00211                } <span class="keywordflow">else</span> {
<a name="l00212"></a>00212                    <span class="keywordflow">throw</span> <span class="keyword">new</span> <a class="code" href="class_utopia_1_1_components_1_1_model_1_1_model_exception.html">ModelException</a>(<span class="stringliteral">&quot;no value is specified for where statement $mixed&quot;</span>, ERROR_MYSQL_PARAM);
<a name="l00213"></a>00213                }
<a name="l00214"></a>00214            } <span class="keywordflow">else</span> {
<a name="l00215"></a>00215                <span class="keywordflow">if</span> (strpos($mixed,<span class="charliteral">&#39;?&#39;</span>) == <span class="keyword">false</span>){
<a name="l00216"></a>00216                    $this-&gt;_p[<span class="stringliteral">&#39;where&#39;</span>][$this-&gt;_p[<span class="stringliteral">&#39;wherecount&#39;</span>]][$mixed.<span class="stringliteral">&#39;=?&#39;</span>] = $value;
<a name="l00217"></a>00217                } <span class="keywordflow">else</span> {
<a name="l00218"></a>00218                    $this-&gt;_p[<span class="stringliteral">&#39;where&#39;</span>][$this-&gt;_p[<span class="stringliteral">&#39;wherecount&#39;</span>]][$mixed] = $value;
<a name="l00219"></a>00219                }
<a name="l00220"></a>00220            }
<a name="l00221"></a>00221         }
<a name="l00222"></a>00222         $this-&gt;_dirty = <span class="keyword">true</span>;
<a name="l00223"></a>00223         <span class="keywordflow">return</span> $this;
<a name="l00224"></a>00224     }
<a name="l00225"></a>00225 
<a name="l00233"></a><a class="code" href="class_utopia_1_1_components_1_1_model_1_1_mysqli_query.html#a21f793ee22b71fc157abdd61e7df26b8">00233</a>     <span class="keyword">public</span> function orWhere($mixed, $value=<span class="stringliteral">&#39;__NOTHING__&#39;</span>, $if=<span class="keyword">true</span>)
<a name="l00234"></a>00234     {
<a name="l00235"></a>00235         $this-&gt;_p[<span class="stringliteral">&#39;wherecount&#39;</span>]++;
<a name="l00236"></a>00236         <span class="keywordflow">return</span> $this-&gt;where($mixed, $value, $if);
<a name="l00237"></a>00237     }
<a name="l00238"></a>00238 
<a name="l00245"></a><a class="code" href="class_utopia_1_1_components_1_1_model_1_1_mysqli_query.html#aa40af7676e4737c259704eef897f0e55">00245</a>     <span class="keyword">public</span> function <span class="keyword">set</span>($mixed, $value=<span class="stringliteral">&#39;&#39;</span>)
<a name="l00246"></a>00246     {
<a name="l00247"></a>00247         <span class="keywordflow">if</span> (is_array($mixed)){
<a name="l00248"></a>00248             $this-&gt;_p[<span class="stringliteral">&#39;set&#39;</span>] = array_merge($this-&gt;_p[<span class="stringliteral">&#39;set&#39;</span>], $mixed);
<a name="l00249"></a>00249         } <span class="keywordflow">else</span> {
<a name="l00250"></a>00250            $this-&gt;_p[<span class="stringliteral">&#39;set&#39;</span>][$mixed] = $value;
<a name="l00251"></a>00251         }
<a name="l00252"></a>00252         $this-&gt;_dirty = <span class="keyword">true</span>;
<a name="l00253"></a>00253         <span class="keywordflow">return</span> $this;
<a name="l00254"></a>00254     }
<a name="l00255"></a>00255 
<a name="l00261"></a><a class="code" href="class_utopia_1_1_components_1_1_model_1_1_mysqli_query.html#ae07dd7b545dde44a68dbaf48134df9aa">00261</a>     <span class="keyword">public</span> function having($mixed)
<a name="l00262"></a>00262     {
<a name="l00263"></a>00263         <span class="keywordflow">if</span> (empty($mixed) || $mixed == <span class="keyword">false</span>) {
<a name="l00264"></a>00264             <span class="keywordflow">return</span> $this;
<a name="l00265"></a>00265         }
<a name="l00266"></a>00266         $this-&gt;_p[<span class="stringliteral">&#39;having&#39;</span>] = $mixed;
<a name="l00267"></a>00267         $this-&gt;_dirty = <span class="keyword">true</span>;
<a name="l00268"></a>00268         <span class="keywordflow">return</span> $this;
<a name="l00269"></a>00269     }
<a name="l00270"></a>00270 
<a name="l00276"></a><a class="code" href="class_utopia_1_1_components_1_1_model_1_1_mysqli_query.html#aff6bd5db36979d4d96c37eacc78bd297">00276</a>     <span class="keyword">public</span> function group($mixed)
<a name="l00277"></a>00277     {
<a name="l00278"></a>00278         <span class="keywordflow">if</span> (empty($mixed) || $mixed == <span class="keyword">false</span>) {
<a name="l00279"></a>00279             <span class="keywordflow">return</span> $this;
<a name="l00280"></a>00280         }
<a name="l00281"></a>00281 
<a name="l00282"></a>00282         <span class="keywordflow">if</span> (is_array($mixed)){
<a name="l00283"></a>00283             $this-&gt;_p[<span class="stringliteral">&#39;group&#39;</span>] = $mixed;
<a name="l00284"></a>00284         } <span class="keywordflow">else</span> {
<a name="l00285"></a>00285             $this-&gt;_p[<span class="stringliteral">&#39;group&#39;</span>][] = $mixed;
<a name="l00286"></a>00286         }
<a name="l00287"></a>00287 
<a name="l00288"></a>00288         $this-&gt;_p[<span class="stringliteral">&#39;select&#39;</span>][] = <span class="stringliteral">&#39;COUNT(*) as __count&#39;</span>;
<a name="l00289"></a>00289         $this-&gt;_dirty = <span class="keyword">true</span>;
<a name="l00290"></a>00290         <span class="keywordflow">return</span> $this;
<a name="l00291"></a>00291     }
<a name="l00292"></a>00292 
<a name="l00299"></a><a class="code" href="class_utopia_1_1_components_1_1_model_1_1_mysqli_query.html#a9e5340febfe10eb38e4421fc10c7fe5b">00299</a>     <span class="keyword">public</span> function order($mixed, $order=<span class="stringliteral">&#39;DESC&#39;</span>)
<a name="l00300"></a>00300     {
<a name="l00301"></a>00301         <span class="keywordflow">if</span> (empty($mixed) || $mixed == <span class="keyword">false</span>) {
<a name="l00302"></a>00302             <span class="keywordflow">return</span> $this;
<a name="l00303"></a>00303         }
<a name="l00304"></a>00304 
<a name="l00305"></a>00305         <span class="keywordflow">if</span> (is_array($mixed)){
<a name="l00306"></a>00306             $this-&gt;_p[<span class="stringliteral">&#39;order&#39;</span>][] = $mixed;
<a name="l00307"></a>00307         } <span class="keywordflow">else</span> {
<a name="l00308"></a>00308             $this-&gt;_p[<span class="stringliteral">&#39;order&#39;</span>][] = array($mixed, strtoupper($order) == <span class="stringliteral">&#39;DESC&#39;</span>? <span class="stringliteral">&#39;DESC&#39;</span>:<span class="stringliteral">&#39;ASC&#39;</span>);
<a name="l00309"></a>00309         }
<a name="l00310"></a>00310         $this-&gt;_dirty = <span class="keyword">true</span>;
<a name="l00311"></a>00311         <span class="keywordflow">return</span> $this;
<a name="l00312"></a>00312     }
<a name="l00313"></a>00313 
<a name="l00319"></a><a class="code" href="class_utopia_1_1_components_1_1_model_1_1_mysqli_query.html#a3b7ebd61086747ad204d79ce0ee9d962">00319</a>     <span class="keyword">public</span> function limit($int)
<a name="l00320"></a>00320     {
<a name="l00321"></a>00321         <span class="keywordflow">if</span> (empty($int) || $int == <span class="keyword">false</span>) {
<a name="l00322"></a>00322             <span class="keywordflow">return</span> $this;
<a name="l00323"></a>00323         }
<a name="l00324"></a>00324         $this-&gt;_p[<span class="stringliteral">&#39;limit&#39;</span>] = $int;
<a name="l00325"></a>00325         $this-&gt;_dirty = <span class="keyword">true</span>;
<a name="l00326"></a>00326         <span class="keywordflow">return</span> $this;
<a name="l00327"></a>00327     }
<a name="l00328"></a>00328 
<a name="l00343"></a><a class="code" href="class_utopia_1_1_components_1_1_model_1_1_mysqli_query.html#a2cd86182b53a88199f3e796d46f17a20">00343</a>     <span class="keyword">public</span> function offset($mixed, $value=<span class="stringliteral">&#39;&#39;</span>, $order=<span class="stringliteral">&#39;DESC&#39;</span>)
<a name="l00344"></a>00344     {
<a name="l00345"></a>00345         <span class="keywordflow">if</span> (empty($mixed) || $mixed == <span class="keyword">false</span>) {
<a name="l00346"></a>00346             <span class="keywordflow">return</span> $this;
<a name="l00347"></a>00347         }
<a name="l00348"></a>00348 
<a name="l00349"></a>00349         <span class="keywordflow">if</span> (is_array($mixed)){
<a name="l00350"></a>00350             list($field,$value) = $mixed;
<a name="l00351"></a>00351         } <span class="keywordflow">else</span> {
<a name="l00352"></a>00352             $field = $mixed;
<a name="l00353"></a>00353         }
<a name="l00354"></a>00354 
<a name="l00355"></a>00355         <span class="keywordflow">if</span> (!is_int($field) &amp;&amp; !empty($value)){
<a name="l00356"></a>00356             <span class="comment">//add a where to replace offset</span>
<a name="l00357"></a>00357             $key = strtoupper($order) == <span class="stringliteral">&#39;DESC&#39;</span>? <span class="stringliteral">&quot;$field&lt;?&quot;</span>: <span class="stringliteral">&quot;$field&gt;?&quot;</span>;
<a name="l00358"></a>00358 
<a name="l00359"></a>00359             <span class="comment">//add where at each OR group</span>
<a name="l00360"></a>00360             <span class="keywordflow">if</span> (!isset($this-&gt;_p[<span class="stringliteral">&#39;where&#39;</span>][0])) {
<a name="l00361"></a>00361                 $this-&gt;_p[<span class="stringliteral">&#39;where&#39;</span>][0] = array();
<a name="l00362"></a>00362             }
<a name="l00363"></a>00363             <span class="keywordflow">foreach</span>($this-&gt;_p[<span class="stringliteral">&#39;where&#39;</span>] as &amp;$where) {
<a name="l00364"></a>00364                 $where[$key] = $value;
<a name="l00365"></a>00365             }
<a name="l00366"></a>00366 
<a name="l00367"></a>00367             <span class="comment">//add this as highest ordering criteria</span>
<a name="l00368"></a>00368             array_unshift($this-&gt;_p[<span class="stringliteral">&#39;order&#39;</span>], array($field, $order));
<a name="l00369"></a>00369         } <span class="keywordflow">else</span> {
<a name="l00370"></a>00370             <span class="comment">//numeric handling</span>
<a name="l00371"></a>00371             $this-&gt;_p[<span class="stringliteral">&#39;offset&#39;</span>] = $field;
<a name="l00372"></a>00372         }
<a name="l00373"></a>00373         $this-&gt;_dirty = <span class="keyword">true</span>;
<a name="l00374"></a>00374         <span class="keywordflow">return</span> $this;
<a name="l00375"></a>00375     }
<a name="l00376"></a>00376 
<a name="l00384"></a><a class="code" href="class_utopia_1_1_components_1_1_model_1_1_mysqli_query.html#af55f91cde1992f911951cd0153bdb302">00384</a>     <span class="keyword">public</span> function getSql($spec = array())
<a name="l00385"></a>00385     {
<a name="l00386"></a>00386         <span class="keywordflow">if</span> ($this-&gt;_dirty) {
<a name="l00387"></a>00387             $this-&gt;_params = array();
<a name="l00388"></a>00388             $this-&gt;_query = $this-&gt;{<span class="stringliteral">&#39;gen&#39;</span>.ucfirst($this-&gt;_op).<span class="stringliteral">&#39;Stmt&#39;</span>}();
<a name="l00389"></a>00389             $this-&gt;_dirty = <span class="keyword">false</span>;
<a name="l00390"></a>00390         }
<a name="l00391"></a>00391         <span class="keywordflow">return</span> $this-&gt;_query;
<a name="l00392"></a>00392     }
<a name="l00393"></a>00393 
<a name="l00399"></a><a class="code" href="class_utopia_1_1_components_1_1_model_1_1_mysqli_query.html#ae32cd7c32721b02d676bb63b4b1366db">00399</a>     <span class="keyword">public</span> function getParams()
<a name="l00400"></a>00400     {
<a name="l00401"></a>00401         <span class="keywordflow">if</span> ($this-&gt;_dirty) {
<a name="l00402"></a>00402             $this-&gt;_params = array();
<a name="l00403"></a>00403             $this-&gt;{<span class="stringliteral">&#39;gen&#39;</span>.ucfirst($this-&gt;_op).<span class="stringliteral">&#39;Stmt&#39;</span>}();
<a name="l00404"></a>00404             $this-&gt;_dirty = <span class="keyword">false</span>;
<a name="l00405"></a>00405         }
<a name="l00406"></a>00406         <span class="keywordflow">return</span> $this-&gt;_params;
<a name="l00407"></a>00407     }
<a name="l00408"></a>00408 
<a name="l00409"></a>00409     <span class="keyword">public</span> function getStmtIdx($params){
<a name="l00410"></a>00410         $idx = <span class="stringliteral">&#39;&#39;</span>;
<a name="l00411"></a>00411         $rtnarr = array();
<a name="l00412"></a>00412 
<a name="l00413"></a>00413         <span class="keywordflow">foreach</span>($params as $param){
<a name="l00414"></a>00414             <span class="keywordflow">if</span> (is_array($param)){
<a name="l00415"></a>00415                 $subrtnarry = $this-&gt;getStmtIdx($param);
<a name="l00416"></a>00416                 $idx .= array_shift($subrtnarry);
<a name="l00417"></a>00417                 $rtnarr = array_merge($rtnarr, $subrtnarry);
<a name="l00418"></a>00418             } elseif (is_float($param)){
<a name="l00419"></a>00419                 $idx .= <span class="charliteral">&#39;d&#39;</span>;
<a name="l00420"></a>00420                 $rtnarr[] = $param;
<a name="l00421"></a>00421             } elseif (is_int($param) || is_bool($param)) {
<a name="l00422"></a>00422                 $idx .= <span class="charliteral">&#39;i&#39;</span>;
<a name="l00423"></a>00423                 $rtnarr[] = $param;
<a name="l00424"></a>00424             } <span class="keywordflow">else</span> {
<a name="l00425"></a>00425                 $idx .= <span class="charliteral">&#39;s&#39;</span>;
<a name="l00426"></a>00426                 $rtnarr[] = $param;
<a name="l00427"></a>00427             }
<a name="l00428"></a>00428         }
<a name="l00429"></a>00429 
<a name="l00430"></a>00430         array_unshift($rtnarr, $idx);
<a name="l00431"></a>00431         <span class="keywordflow">return</span> $rtnarr;
<a name="l00432"></a>00432     }
<a name="l00433"></a>00433 
<a name="l00434"></a>00434     <span class="keyword">public</span> function getOperation() {
<a name="l00435"></a>00435         <span class="keywordflow">return</span> $this-&gt;_op;
<a name="l00436"></a>00436     }
<a name="l00437"></a>00437 
<a name="l00438"></a>00438     <span class="keyword">private</span> function _getWhere($where){
<a name="l00439"></a>00439         <span class="keywordflow">if</span> (empty($where)) {
<a name="l00440"></a>00440             <span class="keywordflow">return</span> <span class="stringliteral">&#39;&#39;</span>;
<a name="l00441"></a>00441         }
<a name="l00442"></a>00442 
<a name="l00443"></a>00443         $wherestr = array();
<a name="l00444"></a>00444         <span class="keywordflow">foreach</span>($where as $a){
<a name="l00445"></a>00445             <span class="keywordflow">if</span> (is_null($a) || !is_array($a)){
<a name="l00446"></a>00446                 <span class="keywordflow">continue</span>;
<a name="l00447"></a>00447             }
<a name="l00448"></a>00448             <span class="comment">//$where = $this-&gt;_addDot(array_keys($a));</span>
<a name="l00449"></a>00449             $where = array_keys($a);
<a name="l00450"></a>00450             $wherestr[] = <span class="stringliteral">&#39;( (&#39;</span>.implode(<span class="stringliteral">&#39;) &amp;&amp; (&#39;</span>, $where).<span class="stringliteral">&#39;) )&#39;</span>;
<a name="l00451"></a>00451 
<a name="l00452"></a>00452             <span class="comment">//parameters</span>
<a name="l00453"></a>00453             <span class="keywordflow">foreach</span>(array_values($a) as $v){
<a name="l00454"></a>00454                 <span class="keywordflow">if</span> ($v == <span class="stringliteral">&quot;__NOTHING__&quot;</span>) {
<a name="l00455"></a>00455                     <span class="keywordflow">continue</span>;
<a name="l00456"></a>00456                 }
<a name="l00457"></a>00457                 $this-&gt;_params = is_array($v)
<a name="l00458"></a>00458                     ? array_merge($this-&gt;_params, $v)
<a name="l00459"></a>00459                     : array_merge($this-&gt;_params, array($v));
<a name="l00460"></a>00460             }
<a name="l00461"></a>00461         }
<a name="l00462"></a>00462         <span class="keywordflow">return</span> <span class="stringliteral">&#39; WHERE &#39;</span>.implode(<span class="stringliteral">&#39; || &#39;</span>, $wherestr);
<a name="l00463"></a>00463     }
<a name="l00464"></a>00464 
<a name="l00465"></a>00465     <span class="keyword">protected</span> function genSelectStmt()
<a name="l00466"></a>00466     {
<a name="l00467"></a>00467         $sql = <span class="stringliteral">&#39;&#39;</span>;
<a name="l00468"></a>00468 
<a name="l00469"></a>00469         $select = implode(<span class="stringliteral">&#39;, &#39;</span>,$this-&gt;_p[<span class="stringliteral">&#39;select&#39;</span>]);
<a name="l00470"></a>00470 
<a name="l00471"></a>00471         $distinct =  $this-&gt;_p[<span class="stringliteral">&#39;distinct&#39;</span>]? <span class="stringliteral">&#39;DISTINCT &#39;</span>: <span class="stringliteral">&#39;&#39;</span>;
<a name="l00472"></a>00472 
<a name="l00473"></a>00473         $from = implode(<span class="stringliteral">&#39;, &#39;</span>,$this-&gt;_p[<span class="stringliteral">&#39;from&#39;</span>]);
<a name="l00474"></a>00474 
<a name="l00475"></a>00475         $sql = <span class="stringliteral">&quot;SELECT {$distinct}{$select} FROM {$from}&quot;</span>;
<a name="l00476"></a>00476 
<a name="l00477"></a>00477         <span class="keywordflow">if</span> (!empty($this-&gt;_p[<span class="stringliteral">&#39;leftjoin&#39;</span>])){
<a name="l00478"></a>00478             $leftjoin = <span class="stringliteral">&#39;&#39;</span>;
<a name="l00479"></a>00479             <span class="keywordflow">foreach</span>($this-&gt;_p[<span class="stringliteral">&#39;leftjoin&#39;</span>] as $joins) {
<a name="l00480"></a>00480                 $leftjoin .= <span class="stringliteral">&quot; LEFT JOIN {$joins[0]} ON {$joins[1]}&quot;</span>;
<a name="l00481"></a>00481             }
<a name="l00482"></a>00482             $sql .= $leftjoin;
<a name="l00483"></a>00483         }
<a name="l00484"></a>00484 
<a name="l00485"></a>00485         $sql .= $this-&gt;_getWhere($this-&gt;_p[<span class="stringliteral">&#39;where&#39;</span>]);
<a name="l00486"></a>00486 
<a name="l00487"></a>00487         <span class="keywordflow">if</span> (!empty($this-&gt;_p[<span class="stringliteral">&#39;group&#39;</span>])){
<a name="l00488"></a>00488             $sql .= <span class="stringliteral">&#39; GROUP BY &#39;</span>.implode(<span class="stringliteral">&#39; , &#39;</span>, $this-&gt;_p[<span class="stringliteral">&#39;group&#39;</span>]);
<a name="l00489"></a>00489         }
<a name="l00490"></a>00490         <span class="keywordflow">if</span> (!empty($this-&gt;_p[<span class="stringliteral">&#39;having&#39;</span>])){
<a name="l00491"></a>00491             $sql .= <span class="stringliteral">&#39; HAVING &#39;</span>.$this-&gt;_p[<span class="stringliteral">&#39;having&#39;</span>];
<a name="l00492"></a>00492         }
<a name="l00493"></a>00493         <span class="keywordflow">if</span> (!empty($this-&gt;_p[<span class="stringliteral">&#39;order&#39;</span>])){
<a name="l00494"></a>00494             $order = array();
<a name="l00495"></a>00495             <span class="keywordflow">foreach</span>($this-&gt;_p[<span class="stringliteral">&#39;order&#39;</span>] as $o) {
<a name="l00496"></a>00496                 <span class="comment">//if &#39;DESC|ASC&#39; is plugged&#39;</span>
<a name="l00497"></a>00497                 $order[] = strpos($o[0], <span class="charliteral">&#39; &#39;</span>)? $o[0]: $o[0].<span class="charliteral">&#39; &#39;</span>.$o[1];
<a name="l00498"></a>00498             }
<a name="l00499"></a>00499             <span class="comment">//$order = $this-&gt;_addDot($order);</span>
<a name="l00500"></a>00500             $sql .= <span class="stringliteral">&#39; ORDER BY &#39;</span>.implode(<span class="charliteral">&#39;,&#39;</span>, $order);
<a name="l00501"></a>00501         }
<a name="l00502"></a>00502 
<a name="l00503"></a>00503         <span class="keywordflow">if</span> (!empty($this-&gt;_p[<span class="stringliteral">&#39;limit&#39;</span>]) || !empty($this-&gt;_p[<span class="stringliteral">&#39;offset&#39;</span>])){
<a name="l00504"></a>00504 
<a name="l00505"></a>00505             <span class="comment">//cases when limit is not specified</span>
<a name="l00506"></a>00506             <span class="keywordflow">if</span> (empty($this-&gt;_p[<span class="stringliteral">&#39;limit&#39;</span>]) || $this-&gt;_p[<span class="stringliteral">&#39;limit&#39;</span>] &lt; 0){
<a name="l00507"></a>00507                 $this-&gt;_p[<span class="stringliteral">&#39;limit&#39;</span>] = 0;
<a name="l00508"></a>00508             }
<a name="l00509"></a>00509             <span class="comment">//offset is inside limit</span>
<a name="l00510"></a>00510             $offset = !empty($this-&gt;_p[<span class="stringliteral">&#39;offset&#39;</span>])? $this-&gt;_p[<span class="stringliteral">&#39;offset&#39;</span>].<span class="charliteral">&#39;,&#39;</span>: <span class="stringliteral">&#39;&#39;</span>;
<a name="l00511"></a>00511             $sql .= <span class="stringliteral">&#39; LIMIT &#39;</span>.$offset.$this-&gt;_p[<span class="stringliteral">&#39;limit&#39;</span>];
<a name="l00512"></a>00512         }
<a name="l00513"></a>00513 
<a name="l00514"></a>00514         <span class="keywordflow">return</span> $sql;
<a name="l00515"></a>00515     }
<a name="l00516"></a>00516 
<a name="l00517"></a>00517     <span class="keyword">protected</span> function genInsertStmt()
<a name="l00518"></a>00518     {
<a name="l00519"></a>00519         $sql = <span class="stringliteral">&quot;INSERT INTO {$this-&gt;_p[&#39;from&#39;]} (%s) VALUES(%s)&quot;</span>;
<a name="l00520"></a>00520 
<a name="l00521"></a>00521         $keyarr = array_keys($this-&gt;_p[<span class="stringliteral">&#39;values&#39;</span>]);
<a name="l00522"></a>00522         $valuearr =  array_fill(0, count($this-&gt;_p[<span class="stringliteral">&#39;values&#39;</span>]), <span class="charliteral">&#39;?&#39;</span>);
<a name="l00523"></a>00523 
<a name="l00524"></a>00524         <span class="comment">//add into params list</span>
<a name="l00525"></a>00525         $this-&gt;_params = array_merge($this-&gt;_params, array_values($this-&gt;_p[<span class="stringliteral">&#39;values&#39;</span>]));
<a name="l00526"></a>00526 
<a name="l00527"></a>00527         $keys = <span class="charliteral">&#39;`&#39;</span>.implode(<span class="stringliteral">&#39;`, `&#39;</span>, $keyarr).<span class="charliteral">&#39;`&#39;</span>;
<a name="l00528"></a>00528         $vals = implode(<span class="stringliteral">&#39;, &#39;</span>,$valuearr);
<a name="l00529"></a>00529 
<a name="l00530"></a>00530         <span class="comment">//on duplicated update</span>
<a name="l00531"></a>00531         <span class="keywordflow">if</span> (!empty($this-&gt;_p[<span class="stringliteral">&#39;duplicatedkey&#39;</span>])){
<a name="l00532"></a>00532             $dups = array();
<a name="l00533"></a>00533             <span class="keywordflow">foreach</span>($this-&gt;_p[<span class="stringliteral">&#39;values&#39;</span>] as $k=&gt;$v){
<a name="l00534"></a>00534                 <span class="keywordflow">if</span> (in_array($k, $this-&gt;_p[<span class="stringliteral">&#39;duplicatedkey&#39;</span>])) {
<a name="l00535"></a>00535                     $dups[] = <span class="stringliteral">&quot;`$k`=?&quot;</span>;
<a name="l00536"></a>00536                     $this-&gt;_params[] = $v;
<a name="l00537"></a>00537                 }
<a name="l00538"></a>00538             }
<a name="l00539"></a>00539             <span class="keywordflow">if</span> (!empty($dups)) {
<a name="l00540"></a>00540                 $sql .= <span class="stringliteral">&#39; ON DUPLICATE KEY UPDATE &#39;</span>. implode(<span class="stringliteral">&#39; , &#39;</span>, $dups);
<a name="l00541"></a>00541             }
<a name="l00542"></a>00542         }
<a name="l00543"></a>00543 
<a name="l00544"></a>00544         $sql = sprintf($sql, $keys, $vals);
<a name="l00545"></a>00545         <span class="keywordflow">return</span> $sql;
<a name="l00546"></a>00546     }
<a name="l00547"></a>00547 
<a name="l00548"></a>00548     <span class="keyword">protected</span> function genDeleteStmt()
<a name="l00549"></a>00549     {
<a name="l00550"></a>00550         $sql = <span class="stringliteral">&quot;DELETE FROM {$this-&gt;_p[&#39;from&#39;]}&quot;</span>;
<a name="l00551"></a>00551 
<a name="l00552"></a>00552         $sql .= $this-&gt;_getWhere($this-&gt;_p[<span class="stringliteral">&#39;where&#39;</span>]);
<a name="l00553"></a>00553 
<a name="l00554"></a>00554         <span class="keywordflow">if</span> (!empty($this-&gt;_p[<span class="stringliteral">&#39;order&#39;</span>])){
<a name="l00555"></a>00555             $order = array();
<a name="l00556"></a>00556             <span class="keywordflow">foreach</span>($this-&gt;_p[<span class="stringliteral">&#39;order&#39;</span>] as $o) {
<a name="l00557"></a>00557                 <span class="comment">//if &#39;DESC|ASC&#39; is plugged&#39;</span>
<a name="l00558"></a>00558                 $order[] = strpos($o[0], <span class="charliteral">&#39; &#39;</span>)? $o[0]: $o[0].<span class="charliteral">&#39; &#39;</span>.$o[1];
<a name="l00559"></a>00559             }
<a name="l00560"></a>00560             <span class="comment">//$order = $this-&gt;_addDot($order);</span>
<a name="l00561"></a>00561             $sql .= <span class="stringliteral">&#39; ORDER BY &#39;</span>.implode(<span class="charliteral">&#39;,&#39;</span>, $order);
<a name="l00562"></a>00562         }
<a name="l00563"></a>00563 
<a name="l00564"></a>00564         <span class="keywordflow">if</span> (!empty($this-&gt;_p[<span class="stringliteral">&#39;limit&#39;</span>])){
<a name="l00565"></a>00565             <span class="comment">//offset is inside limit</span>
<a name="l00566"></a>00566             $sql .= <span class="stringliteral">&#39; LIMIT &#39;</span>.$this-&gt;_p[<span class="stringliteral">&#39;limit&#39;</span>];
<a name="l00567"></a>00567         }
<a name="l00568"></a>00568         <span class="keywordflow">return</span> $sql;
<a name="l00569"></a>00569     }
<a name="l00570"></a>00570 
<a name="l00571"></a>00571     <span class="keyword">protected</span> function genUpdateStmt()
<a name="l00572"></a>00572     {
<a name="l00573"></a>00573         $sql = <span class="stringliteral">&quot;UPDATE {$this-&gt;_p[&#39;from&#39;]} SET &quot;</span>;
<a name="l00574"></a>00574 
<a name="l00575"></a>00575         $set = array();
<a name="l00576"></a>00576         <span class="keywordflow">foreach</span>($this-&gt;_p[<span class="stringliteral">&#39;set&#39;</span>] as $k=&gt;$v){
<a name="l00577"></a>00577             $set[] = <span class="stringliteral">&quot;`$k`=?&quot;</span>;
<a name="l00578"></a>00578             $this-&gt;_params[] = $v;
<a name="l00579"></a>00579         }
<a name="l00580"></a>00580 
<a name="l00581"></a>00581         $sql .= implode(<span class="stringliteral">&#39; , &#39;</span>, $set);
<a name="l00582"></a>00582 
<a name="l00583"></a>00583         $sql .= $this-&gt;_getWhere($this-&gt;_p[<span class="stringliteral">&#39;where&#39;</span>]);
<a name="l00584"></a>00584 
<a name="l00585"></a>00585         <span class="keywordflow">if</span> (!empty($this-&gt;_p[<span class="stringliteral">&#39;order&#39;</span>])){
<a name="l00586"></a>00586             $order = array();
<a name="l00587"></a>00587             <span class="keywordflow">foreach</span>($this-&gt;_p[<span class="stringliteral">&#39;order&#39;</span>] as $o) {
<a name="l00588"></a>00588                 <span class="comment">//if &#39;DESC|ASC&#39; is plugged&#39;</span>
<a name="l00589"></a>00589                 $order[] = strpos($o[0], <span class="charliteral">&#39; &#39;</span>)? $o[0]: $o[0].<span class="charliteral">&#39; &#39;</span>.$o[1];
<a name="l00590"></a>00590             }
<a name="l00591"></a>00591             <span class="comment">//$order = $this-&gt;_addDot($order);</span>
<a name="l00592"></a>00592             $sql .= <span class="stringliteral">&#39; ORDER BY &#39;</span>.implode(<span class="charliteral">&#39;,&#39;</span>, $order);
<a name="l00593"></a>00593         }
<a name="l00594"></a>00594 
<a name="l00595"></a>00595         <span class="keywordflow">if</span> (!empty($this-&gt;_p[<span class="stringliteral">&#39;limit&#39;</span>])){
<a name="l00596"></a>00596             <span class="comment">//offset is inside limit</span>
<a name="l00597"></a>00597             $sql .= <span class="stringliteral">&#39; LIMIT &#39;</span>.$this-&gt;_p[<span class="stringliteral">&#39;limit&#39;</span>];
<a name="l00598"></a>00598         }
<a name="l00599"></a>00599 
<a name="l00600"></a>00600         <span class="keywordflow">return</span> $sql;
<a name="l00601"></a>00601     }
<a name="l00602"></a>00602 }
</pre></div></div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><b>MysqliQuery.php</b>      </li>
      <li class="footer">Generated on Fri Mar 4 2011 23:22:16 for utopia3 by&#160;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.3 </li>
    </ul>
  </div>
<!--- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Data Structures</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Functions</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>


</body>
</html>
