<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>utopia3: trunk/lib/components/symfony/Yaml/Inline.php Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript">
$(document).ready(initResizable);
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body onload='searchBox.OnSelectItem(0);'>
<!-- Generated by Doxygen 1.7.3 -->
<script type="text/javascript"><!--
var searchBox = new SearchBox("searchBox", "search",false,'Search');
--></script>
<div id="top">
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">utopia3</div>
   <div id="projectbrief">utopia framework - version3</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.html"><span>Namespaces</span></a></li>
      <li><a href="annotated.html"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li id="searchli">
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('_yaml_2_inline_8php.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<h1>trunk/lib/components/symfony/Yaml/Inline.php</h1>  </div>
</div>
<div class="contents">
<div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 &lt;?php
<a name="l00002"></a>00002 
<a name="l00003"></a>00003 <span class="keyword">namespace </span>Symfony\Components\Yaml;
<a name="l00004"></a>00004 
<a name="l00005"></a>00005 <span class="comment">/*</span>
<a name="l00006"></a>00006 <span class="comment"> * This file is part of the Symfony package.</span>
<a name="l00007"></a>00007 <span class="comment"> * (c) Fabien Potencier &lt;fabien.potencier@symfony-project.com&gt;</span>
<a name="l00008"></a>00008 <span class="comment"> *</span>
<a name="l00009"></a>00009 <span class="comment"> * For the full copyright and license information, please view the LICENSE</span>
<a name="l00010"></a>00010 <span class="comment"> * file that was distributed with this source code.</span>
<a name="l00011"></a>00011 <span class="comment"> */</span>
<a name="l00012"></a>00012 
<a name="l00020"></a>00020 <span class="keyword">class </span>Inline
<a name="l00021"></a>00021 {
<a name="l00022"></a>00022     <span class="keyword">const</span> REGEX_QUOTED_STRING = <span class="stringliteral">&#39;(?:&quot;([^&quot;\\\\]*(?:\\\\.[^&quot;\\\\]*)*)&quot;|\&#39;([^\&#39;]*(?:\&#39;\&#39;[^\&#39;]*)*)\&#39;)&#39;</span>;
<a name="l00023"></a>00023 
<a name="l00031"></a><a class="code" href="class_symfony_1_1_components_1_1_yaml_1_1_inline.html#a2b63bee7aa8c67d20c14ff9ba4de63a2">00031</a>     <span class="keyword">static</span> <span class="keyword">public</span> function load($value)
<a name="l00032"></a>00032     {
<a name="l00033"></a>00033         $value = trim($value);
<a name="l00034"></a>00034 
<a name="l00035"></a>00035         <span class="keywordflow">if</span> (0 == strlen($value)) {
<a name="l00036"></a>00036             <span class="keywordflow">return</span> <span class="stringliteral">&#39;&#39;</span>;
<a name="l00037"></a>00037         }
<a name="l00038"></a>00038 
<a name="l00039"></a>00039         <span class="keywordflow">if</span> (function_exists(<span class="stringliteral">&#39;mb_internal_encoding&#39;</span>) &amp;&amp; ((<span class="keywordtype">int</span>) ini_get(<span class="stringliteral">&#39;mbstring.func_overload&#39;</span>)) &amp; 2) {
<a name="l00040"></a>00040             $mbEncoding = mb_internal_encoding();
<a name="l00041"></a>00041             mb_internal_encoding(<span class="stringliteral">&#39;ASCII&#39;</span>);
<a name="l00042"></a>00042         }
<a name="l00043"></a>00043 
<a name="l00044"></a>00044         <span class="keywordflow">switch</span> ($value[0]) {
<a name="l00045"></a>00045             <span class="keywordflow">case</span> <span class="charliteral">&#39;[&#39;</span>:
<a name="l00046"></a>00046                 $result = self::parseSequence($value);
<a name="l00047"></a>00047                 <span class="keywordflow">break</span>;
<a name="l00048"></a>00048             <span class="keywordflow">case</span> <span class="charliteral">&#39;{&#39;</span>:
<a name="l00049"></a>00049                 $result = self::parseMapping($value);
<a name="l00050"></a>00050                 <span class="keywordflow">break</span>;
<a name="l00051"></a>00051             <span class="keywordflow">default</span>:
<a name="l00052"></a>00052                 $result = self::parseScalar($value);
<a name="l00053"></a>00053         }
<a name="l00054"></a>00054 
<a name="l00055"></a>00055         <span class="keywordflow">if</span> (isset($mbEncoding)) {
<a name="l00056"></a>00056             mb_internal_encoding($mbEncoding);
<a name="l00057"></a>00057         }
<a name="l00058"></a>00058 
<a name="l00059"></a>00059         <span class="keywordflow">return</span> $result;
<a name="l00060"></a>00060     }
<a name="l00061"></a>00061 
<a name="l00071"></a><a class="code" href="class_symfony_1_1_components_1_1_yaml_1_1_inline.html#a8ef997303a6826dd4a87fff9c13b5d1d">00071</a>     <span class="keyword">static</span> <span class="keyword">public</span> function dump($value)
<a name="l00072"></a>00072     {
<a name="l00073"></a>00073         $trueValues = <span class="stringliteral">&#39;1.1&#39;</span> == Yaml::getSpecVersion() ? array(<span class="stringliteral">&#39;true&#39;</span>, <span class="stringliteral">&#39;on&#39;</span>, <span class="charliteral">&#39;+&#39;</span>, <span class="stringliteral">&#39;yes&#39;</span>, <span class="charliteral">&#39;y&#39;</span>) : array(<span class="stringliteral">&#39;true&#39;</span>);
<a name="l00074"></a>00074         $falseValues = <span class="stringliteral">&#39;1.1&#39;</span> == Yaml::getSpecVersion() ? array(<span class="stringliteral">&#39;false&#39;</span>, <span class="stringliteral">&#39;off&#39;</span>, <span class="charliteral">&#39;-&#39;</span>, <span class="stringliteral">&#39;no&#39;</span>, <span class="charliteral">&#39;n&#39;</span>) : array(<span class="stringliteral">&#39;false&#39;</span>);
<a name="l00075"></a>00075 
<a name="l00076"></a>00076         <span class="keywordflow">switch</span> (<span class="keyword">true</span>) {
<a name="l00077"></a>00077             <span class="keywordflow">case</span> is_resource($value):
<a name="l00078"></a>00078                 <span class="keywordflow">throw</span> <span class="keyword">new</span> <a class="code" href="class_symfony_1_1_components_1_1_yaml_1_1_exception.html">Exception</a>(<span class="stringliteral">&#39;Unable to dump PHP resources in a YAML file.&#39;</span>);
<a name="l00079"></a>00079             <span class="keywordflow">case</span> is_object($value):
<a name="l00080"></a>00080                 <span class="keywordflow">return</span> <span class="stringliteral">&#39;!!php/object:&#39;</span>.serialize($value);
<a name="l00081"></a>00081             <span class="keywordflow">case</span> is_array($value):
<a name="l00082"></a>00082                 <span class="keywordflow">return</span> self::dumpArray($value);
<a name="l00083"></a>00083             <span class="keywordflow">case</span> null === $value:
<a name="l00084"></a>00084                 <span class="keywordflow">return</span> <span class="stringliteral">&#39;null&#39;</span>;
<a name="l00085"></a>00085             <span class="keywordflow">case</span> <span class="keyword">true</span> === $value:
<a name="l00086"></a>00086                 <span class="keywordflow">return</span> <span class="stringliteral">&#39;true&#39;</span>;
<a name="l00087"></a>00087             <span class="keywordflow">case</span> <span class="keyword">false</span> === $value:
<a name="l00088"></a>00088                 <span class="keywordflow">return</span> <span class="stringliteral">&#39;false&#39;</span>;
<a name="l00089"></a>00089             <span class="keywordflow">case</span> ctype_digit($value):
<a name="l00090"></a>00090                 <span class="keywordflow">return</span> is_string($value) ? <span class="stringliteral">&quot;&#39;$value&#39;&quot;</span> : (int) $value;
<a name="l00091"></a>00091             <span class="keywordflow">case</span> is_numeric($value):
<a name="l00092"></a>00092                 <span class="keywordflow">return</span> is_infinite($value) ? str_ireplace(<span class="stringliteral">&#39;INF&#39;</span>, <span class="stringliteral">&#39;.Inf&#39;</span>, strval($value)) : (is_string($value) ? <span class="stringliteral">&quot;&#39;$value&#39;&quot;</span> : $value);
<a name="l00093"></a>00093             <span class="keywordflow">case</span> <span class="keyword">false</span> !== strpos($value, <span class="stringliteral">&quot;\n&quot;</span>) || <span class="keyword">false</span> !== strpos($value, <span class="stringliteral">&quot;\r&quot;</span>):
<a name="l00094"></a>00094                 <span class="keywordflow">return</span> sprintf(<span class="stringliteral">&#39;&quot;%s&quot;&#39;</span>, str_replace(array(<span class="charliteral">&#39;&quot;&#39;</span>, <span class="stringliteral">&quot;\n&quot;</span>, <span class="stringliteral">&quot;\r&quot;</span>), array(<span class="stringliteral">&#39;\\&quot;&#39;</span>, <span class="charliteral">&#39;\n&#39;</span>, <span class="charliteral">&#39;\r&#39;</span>), $value));
<a name="l00095"></a>00095             <span class="keywordflow">case</span> preg_match(<span class="stringliteral">&#39;/[ \s \&#39; &quot; \: \{ \} \[ \] , &amp; \* \# \?] | \A[ - ? | &lt; &gt; = ! % @ ` ]/x&#39;</span>, $value):
<a name="l00096"></a>00096                 <span class="keywordflow">return</span> sprintf(<span class="stringliteral">&quot;&#39;%s&#39;&quot;</span>, str_replace(<span class="charliteral">&#39;\&#39;&#39;</span>, <span class="charliteral">&#39;\&#39;</span>\<span class="stringliteral">&#39;&#39;</span>, $value));
<a name="l00097"></a>00097             <span class="keywordflow">case</span> <span class="stringliteral">&#39;&#39;</span> == $value:
<a name="l00098"></a>00098                 <span class="keywordflow">return</span> <span class="stringliteral">&quot;&#39;&#39;&quot;</span>;
<a name="l00099"></a>00099             <span class="keywordflow">case</span> preg_match(self::getTimestampRegex(), $value):
<a name="l00100"></a>00100                 <span class="keywordflow">return</span> <span class="stringliteral">&quot;&#39;$value&#39;&quot;</span>;
<a name="l00101"></a>00101             <span class="keywordflow">case</span> in_array(strtolower($value), $trueValues):
<a name="l00102"></a>00102                 <span class="keywordflow">return</span> <span class="stringliteral">&quot;&#39;$value&#39;&quot;</span>;
<a name="l00103"></a>00103             <span class="keywordflow">case</span> in_array(strtolower($value), $falseValues):
<a name="l00104"></a>00104                 <span class="keywordflow">return</span> <span class="stringliteral">&quot;&#39;$value&#39;&quot;</span>;
<a name="l00105"></a>00105             <span class="keywordflow">case</span> in_array(strtolower($value), array(<span class="stringliteral">&#39;null&#39;</span>, <span class="charliteral">&#39;~&#39;</span>)):
<a name="l00106"></a>00106                 <span class="keywordflow">return</span> <span class="stringliteral">&quot;&#39;$value&#39;&quot;</span>;
<a name="l00107"></a>00107             <span class="keywordflow">default</span>:
<a name="l00108"></a>00108                 <span class="keywordflow">return</span> $value;
<a name="l00109"></a>00109         }
<a name="l00110"></a>00110     }
<a name="l00111"></a>00111 
<a name="l00119"></a><a class="code" href="class_symfony_1_1_components_1_1_yaml_1_1_inline.html#a14a553e044884f70a2f8fbbd4f2d21ac">00119</a>     <span class="keyword">static</span> <span class="keyword">protected</span> function dumpArray($value)
<a name="l00120"></a>00120     {
<a name="l00121"></a>00121         <span class="comment">// array</span>
<a name="l00122"></a>00122         $keys = array_keys($value);
<a name="l00123"></a>00123         <span class="keywordflow">if</span> ((1 == count($keys) &amp;&amp; <span class="charliteral">&#39;0&#39;</span> == $keys[0])
<a name="l00124"></a>00124             || (count($keys) &gt; 1 &amp;&amp; array_reduce($keys, function ($v, $w) { <span class="keywordflow">return</span> (integer) $v + $w; }, 0) == count($keys) * (count($keys) - 1) / 2)
<a name="l00125"></a>00125         ) {
<a name="l00126"></a>00126             $output = array();
<a name="l00127"></a>00127             <span class="keywordflow">foreach</span> ($value as $val) {
<a name="l00128"></a>00128                 $output[] = self::dump($val);
<a name="l00129"></a>00129             }
<a name="l00130"></a>00130 
<a name="l00131"></a>00131             <span class="keywordflow">return</span> sprintf(<span class="stringliteral">&#39;[%s]&#39;</span>, implode(<span class="stringliteral">&#39;, &#39;</span>, $output));
<a name="l00132"></a>00132         }
<a name="l00133"></a>00133 
<a name="l00134"></a>00134         <span class="comment">// mapping</span>
<a name="l00135"></a>00135         $output = array();
<a name="l00136"></a>00136         <span class="keywordflow">foreach</span> ($value as $key =&gt; $val) {
<a name="l00137"></a>00137             $output[] = sprintf(<span class="stringliteral">&#39;%s: %s&#39;</span>, self::dump($key), self::dump($val));
<a name="l00138"></a>00138         }
<a name="l00139"></a>00139 
<a name="l00140"></a>00140         <span class="keywordflow">return</span> sprintf(<span class="stringliteral">&#39;{ %s }&#39;</span>, implode(<span class="stringliteral">&#39;, &#39;</span>, $output));
<a name="l00141"></a>00141     }
<a name="l00142"></a>00142 
<a name="l00156"></a><a class="code" href="class_symfony_1_1_components_1_1_yaml_1_1_inline.html#abf37f1e7c74d7a0ed52e64c25da8e454">00156</a>     <span class="keyword">static</span> <span class="keyword">public</span> function parseScalar($scalar, $delimiters = null, $stringDelimiters = array(<span class="charliteral">&#39;&quot;&#39;</span>, <span class="stringliteral">&quot;&#39;&quot;</span>), &amp;$i = 0, $evaluate = <span class="keyword">true</span>)
<a name="l00157"></a>00157     {
<a name="l00158"></a>00158         <span class="keywordflow">if</span> (in_array($scalar[$i], $stringDelimiters)) {
<a name="l00159"></a>00159             <span class="comment">// quoted scalar</span>
<a name="l00160"></a>00160             $output = self::parseQuotedScalar($scalar, $i);
<a name="l00161"></a>00161         } <span class="keywordflow">else</span> {
<a name="l00162"></a>00162             <span class="comment">// &quot;normal&quot; string</span>
<a name="l00163"></a>00163             <span class="keywordflow">if</span> (!$delimiters) {
<a name="l00164"></a>00164                 $output = substr($scalar, $i);
<a name="l00165"></a>00165                 $i += strlen($output);
<a name="l00166"></a>00166 
<a name="l00167"></a>00167                 <span class="comment">// remove comments</span>
<a name="l00168"></a>00168                 <span class="keywordflow">if</span> (<span class="keyword">false</span> !== $strpos = strpos($output, <span class="stringliteral">&#39; #&#39;</span>)) {
<a name="l00169"></a>00169                     $output = rtrim(substr($output, 0, $strpos));
<a name="l00170"></a>00170                 }
<a name="l00171"></a>00171             } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (preg_match(<span class="stringliteral">&#39;/^(.+?)(&#39;</span>.implode(<span class="charliteral">&#39;|&#39;</span>, $delimiters).<span class="stringliteral">&#39;)/&#39;</span>, substr($scalar, $i), $match)) {
<a name="l00172"></a>00172                 $output = $match[1];
<a name="l00173"></a>00173                 $i += strlen($output);
<a name="l00174"></a>00174             } <span class="keywordflow">else</span> {
<a name="l00175"></a>00175                 <span class="keywordflow">throw</span> <span class="keyword">new</span> <a class="code" href="class_symfony_1_1_components_1_1_yaml_1_1_parser_exception.html">ParserException</a>(sprintf(<span class="stringliteral">&#39;Malformed inline YAML string (%s).&#39;</span>, $scalar));
<a name="l00176"></a>00176             }
<a name="l00177"></a>00177 
<a name="l00178"></a>00178             $output = $evaluate ? self::evaluateScalar($output) : $output;
<a name="l00179"></a>00179         }
<a name="l00180"></a>00180 
<a name="l00181"></a>00181         <span class="keywordflow">return</span> $output;
<a name="l00182"></a>00182     }
<a name="l00183"></a>00183 
<a name="l00194"></a><a class="code" href="class_symfony_1_1_components_1_1_yaml_1_1_inline.html#a217fb6f105d374552ebb185da7e13fc6">00194</a>     <span class="keyword">static</span> <span class="keyword">protected</span> function parseQuotedScalar($scalar, &amp;$i)
<a name="l00195"></a>00195     {
<a name="l00196"></a>00196         <span class="keywordflow">if</span> (!preg_match(<span class="charliteral">&#39;/&#39;</span>.self::REGEX_QUOTED_STRING.<span class="stringliteral">&#39;/A&#39;</span>, substr($scalar, $i), $match)) {
<a name="l00197"></a>00197             <span class="keywordflow">throw</span> <span class="keyword">new</span> <a class="code" href="class_symfony_1_1_components_1_1_yaml_1_1_parser_exception.html">ParserException</a>(sprintf(<span class="stringliteral">&#39;Malformed inline YAML string (%s).&#39;</span>, substr($scalar, $i)));
<a name="l00198"></a>00198         }
<a name="l00199"></a>00199 
<a name="l00200"></a>00200         $output = substr($match[0], 1, strlen($match[0]) - 2);
<a name="l00201"></a>00201 
<a name="l00202"></a>00202         <span class="keywordflow">if</span> (<span class="charliteral">&#39;&quot;&#39;</span> == $scalar[$i]) {
<a name="l00203"></a>00203             <span class="comment">// evaluate the string</span>
<a name="l00204"></a>00204             $output = str_replace(array(<span class="stringliteral">&#39;\\&quot;&#39;</span>, <span class="stringliteral">&#39;\\n&#39;</span>, <span class="stringliteral">&#39;\\r&#39;</span>), array(<span class="charliteral">&#39;&quot;&#39;</span>, <span class="stringliteral">&quot;\n&quot;</span>, <span class="stringliteral">&quot;\r&quot;</span>), $output);
<a name="l00205"></a>00205         } <span class="keywordflow">else</span> {
<a name="l00206"></a>00206             <span class="comment">// unescape &#39;</span>
<a name="l00207"></a>00207             $output = str_replace(<span class="charliteral">&#39;\&#39;</span>\<span class="stringliteral">&#39;&#39;</span>, <span class="charliteral">&#39;\&#39;&#39;</span>, $output);
<a name="l00208"></a>00208         }
<a name="l00209"></a>00209 
<a name="l00210"></a>00210         $i += strlen($match[0]);
<a name="l00211"></a>00211 
<a name="l00212"></a>00212         <span class="keywordflow">return</span> $output;
<a name="l00213"></a>00213     }
<a name="l00214"></a>00214 
<a name="l00225"></a><a class="code" href="class_symfony_1_1_components_1_1_yaml_1_1_inline.html#a841085bbaa638bd7c47b77bd167d47bc">00225</a>     <span class="keyword">static</span> <span class="keyword">protected</span> function parseSequence($sequence, &amp;$i = 0)
<a name="l00226"></a>00226     {
<a name="l00227"></a>00227         $output = array();
<a name="l00228"></a>00228         $len = strlen($sequence);
<a name="l00229"></a>00229         $i += 1;
<a name="l00230"></a>00230 
<a name="l00231"></a>00231         <span class="comment">// [foo, bar, ...]</span>
<a name="l00232"></a>00232         <span class="keywordflow">while</span> ($i &lt; $len) {
<a name="l00233"></a>00233             <span class="keywordflow">switch</span> ($sequence[$i]) {
<a name="l00234"></a>00234                 <span class="keywordflow">case</span> <span class="charliteral">&#39;[&#39;</span>:
<a name="l00235"></a>00235                     <span class="comment">// nested sequence</span>
<a name="l00236"></a>00236                     $output[] = self::parseSequence($sequence, $i);
<a name="l00237"></a>00237                     <span class="keywordflow">break</span>;
<a name="l00238"></a>00238                 <span class="keywordflow">case</span> <span class="charliteral">&#39;{&#39;</span>:
<a name="l00239"></a>00239                     <span class="comment">// nested mapping</span>
<a name="l00240"></a>00240                     $output[] = self::parseMapping($sequence, $i);
<a name="l00241"></a>00241                     <span class="keywordflow">break</span>;
<a name="l00242"></a>00242                 <span class="keywordflow">case</span> <span class="charliteral">&#39;]&#39;</span>:
<a name="l00243"></a>00243                     <span class="keywordflow">return</span> $output;
<a name="l00244"></a>00244                 <span class="keywordflow">case</span> <span class="charliteral">&#39;,&#39;</span>:
<a name="l00245"></a>00245                 <span class="keywordflow">case</span> <span class="charliteral">&#39; &#39;</span>:
<a name="l00246"></a>00246                     <span class="keywordflow">break</span>;
<a name="l00247"></a>00247                 <span class="keywordflow">default</span>:
<a name="l00248"></a>00248                     $isQuoted = in_array($sequence[$i], array(<span class="charliteral">&#39;&quot;&#39;</span>, <span class="stringliteral">&quot;&#39;&quot;</span>));
<a name="l00249"></a>00249                     $value = self::parseScalar($sequence, array(<span class="charliteral">&#39;,&#39;</span>, <span class="charliteral">&#39;]&#39;</span>), array(<span class="charliteral">&#39;&quot;&#39;</span>, <span class="stringliteral">&quot;&#39;&quot;</span>), $i);
<a name="l00250"></a>00250 
<a name="l00251"></a>00251                     <span class="keywordflow">if</span> (!$isQuoted &amp;&amp; <span class="keyword">false</span> !== strpos($value, <span class="stringliteral">&#39;: &#39;</span>)) {
<a name="l00252"></a>00252                         <span class="comment">// embedded mapping?</span>
<a name="l00253"></a>00253                         <span class="keywordflow">try</span> {
<a name="l00254"></a>00254                             $value = self::parseMapping(<span class="charliteral">&#39;{&#39;</span>.$value.<span class="charliteral">&#39;}&#39;</span>);
<a name="l00255"></a>00255                         } <span class="keywordflow">catch</span> (\InvalidArgumentException $e) {
<a name="l00256"></a>00256                             <span class="comment">// no, it&#39;s not</span>
<a name="l00257"></a>00257                         }
<a name="l00258"></a>00258                     }
<a name="l00259"></a>00259 
<a name="l00260"></a>00260                     $output[] = $value;
<a name="l00261"></a>00261 
<a name="l00262"></a>00262                     --$i;
<a name="l00263"></a>00263             }
<a name="l00264"></a>00264 
<a name="l00265"></a>00265             ++$i;
<a name="l00266"></a>00266         }
<a name="l00267"></a>00267 
<a name="l00268"></a>00268         <span class="keywordflow">throw</span> <span class="keyword">new</span> <a class="code" href="class_symfony_1_1_components_1_1_yaml_1_1_parser_exception.html">ParserException</a>(sprintf(<span class="stringliteral">&#39;Malformed inline YAML string %s&#39;</span>, $sequence));
<a name="l00269"></a>00269     }
<a name="l00270"></a>00270 
<a name="l00281"></a><a class="code" href="class_symfony_1_1_components_1_1_yaml_1_1_inline.html#a75c88cc2a3f4c2cf7f23330baa0d0a9f">00281</a>     <span class="keyword">static</span> <span class="keyword">protected</span> function parseMapping($mapping, &amp;$i = 0)
<a name="l00282"></a>00282     {
<a name="l00283"></a>00283         $output = array();
<a name="l00284"></a>00284         $len = strlen($mapping);
<a name="l00285"></a>00285         $i += 1;
<a name="l00286"></a>00286 
<a name="l00287"></a>00287         <span class="comment">// {foo: bar, bar:foo, ...}</span>
<a name="l00288"></a>00288         <span class="keywordflow">while</span> ($i &lt; $len) {
<a name="l00289"></a>00289             <span class="keywordflow">switch</span> ($mapping[$i]) {
<a name="l00290"></a>00290                 <span class="keywordflow">case</span> <span class="charliteral">&#39; &#39;</span>:
<a name="l00291"></a>00291                 <span class="keywordflow">case</span> <span class="charliteral">&#39;,&#39;</span>:
<a name="l00292"></a>00292                     ++$i;
<a name="l00293"></a>00293                     <span class="keywordflow">continue</span> 2;
<a name="l00294"></a>00294                 <span class="keywordflow">case</span> <span class="charliteral">&#39;}&#39;</span>:
<a name="l00295"></a>00295                     <span class="keywordflow">return</span> $output;
<a name="l00296"></a>00296             }
<a name="l00297"></a>00297 
<a name="l00298"></a>00298             <span class="comment">// key</span>
<a name="l00299"></a>00299             $key = self::parseScalar($mapping, array(<span class="charliteral">&#39;:&#39;</span>, <span class="charliteral">&#39; &#39;</span>), array(<span class="charliteral">&#39;&quot;&#39;</span>, <span class="stringliteral">&quot;&#39;&quot;</span>), $i, <span class="keyword">false</span>);
<a name="l00300"></a>00300 
<a name="l00301"></a>00301             <span class="comment">// value</span>
<a name="l00302"></a>00302             $done = <span class="keyword">false</span>;
<a name="l00303"></a>00303             <span class="keywordflow">while</span> ($i &lt; $len) {
<a name="l00304"></a>00304                 <span class="keywordflow">switch</span> ($mapping[$i]) {
<a name="l00305"></a>00305                     <span class="keywordflow">case</span> <span class="charliteral">&#39;[&#39;</span>:
<a name="l00306"></a>00306                         <span class="comment">// nested sequence</span>
<a name="l00307"></a>00307                         $output[$key] = self::parseSequence($mapping, $i);
<a name="l00308"></a>00308                         $done = <span class="keyword">true</span>;
<a name="l00309"></a>00309                         <span class="keywordflow">break</span>;
<a name="l00310"></a>00310                     <span class="keywordflow">case</span> <span class="charliteral">&#39;{&#39;</span>:
<a name="l00311"></a>00311                         <span class="comment">// nested mapping</span>
<a name="l00312"></a>00312                         $output[$key] = self::parseMapping($mapping, $i);
<a name="l00313"></a>00313                         $done = <span class="keyword">true</span>;
<a name="l00314"></a>00314                         <span class="keywordflow">break</span>;
<a name="l00315"></a>00315                     <span class="keywordflow">case</span> <span class="charliteral">&#39;:&#39;</span>:
<a name="l00316"></a>00316                     <span class="keywordflow">case</span> <span class="charliteral">&#39; &#39;</span>:
<a name="l00317"></a>00317                         <span class="keywordflow">break</span>;
<a name="l00318"></a>00318                     <span class="keywordflow">default</span>:
<a name="l00319"></a>00319                         $output[$key] = self::parseScalar($mapping, array(<span class="charliteral">&#39;,&#39;</span>, <span class="charliteral">&#39;}&#39;</span>), array(<span class="charliteral">&#39;&quot;&#39;</span>, <span class="stringliteral">&quot;&#39;&quot;</span>), $i);
<a name="l00320"></a>00320                         $done = <span class="keyword">true</span>;
<a name="l00321"></a>00321                         --$i;
<a name="l00322"></a>00322                 }
<a name="l00323"></a>00323 
<a name="l00324"></a>00324                 ++$i;
<a name="l00325"></a>00325 
<a name="l00326"></a>00326                 <span class="keywordflow">if</span> ($done) {
<a name="l00327"></a>00327                     <span class="keywordflow">continue</span> 2;
<a name="l00328"></a>00328                 }
<a name="l00329"></a>00329             }
<a name="l00330"></a>00330         }
<a name="l00331"></a>00331 
<a name="l00332"></a>00332         <span class="keywordflow">throw</span> <span class="keyword">new</span> <a class="code" href="class_symfony_1_1_components_1_1_yaml_1_1_parser_exception.html">ParserException</a>(sprintf(<span class="stringliteral">&#39;Malformed inline YAML string %s&#39;</span>, $mapping));
<a name="l00333"></a>00333     }
<a name="l00334"></a>00334 
<a name="l00342"></a><a class="code" href="class_symfony_1_1_components_1_1_yaml_1_1_inline.html#a65675de8bf326ce4d0f1833119db3bd5">00342</a>     <span class="keyword">static</span> <span class="keyword">protected</span> function evaluateScalar($scalar)
<a name="l00343"></a>00343     {
<a name="l00344"></a>00344         $scalar = trim($scalar);
<a name="l00345"></a>00345 
<a name="l00346"></a>00346         $trueValues = <span class="stringliteral">&#39;1.1&#39;</span> == Yaml::getSpecVersion() ? array(<span class="stringliteral">&#39;true&#39;</span>, <span class="stringliteral">&#39;on&#39;</span>, <span class="charliteral">&#39;+&#39;</span>, <span class="stringliteral">&#39;yes&#39;</span>, <span class="charliteral">&#39;y&#39;</span>) : array(<span class="stringliteral">&#39;true&#39;</span>);
<a name="l00347"></a>00347         $falseValues = <span class="stringliteral">&#39;1.1&#39;</span> == Yaml::getSpecVersion() ? array(<span class="stringliteral">&#39;false&#39;</span>, <span class="stringliteral">&#39;off&#39;</span>, <span class="charliteral">&#39;-&#39;</span>, <span class="stringliteral">&#39;no&#39;</span>, <span class="charliteral">&#39;n&#39;</span>) : array(<span class="stringliteral">&#39;false&#39;</span>);
<a name="l00348"></a>00348 
<a name="l00349"></a>00349         <span class="keywordflow">switch</span> (<span class="keyword">true</span>) {
<a name="l00350"></a>00350             <span class="keywordflow">case</span> <span class="stringliteral">&#39;null&#39;</span> == strtolower($scalar):
<a name="l00351"></a>00351             <span class="keywordflow">case</span> <span class="stringliteral">&#39;&#39;</span> == $scalar:
<a name="l00352"></a>00352             <span class="keywordflow">case</span> <span class="charliteral">&#39;~&#39;</span> == $scalar:
<a name="l00353"></a>00353                 <span class="keywordflow">return</span> null;
<a name="l00354"></a>00354             <span class="keywordflow">case</span> 0 === strpos($scalar, <span class="stringliteral">&#39;!str&#39;</span>):
<a name="l00355"></a>00355                 <span class="keywordflow">return</span> (<span class="keywordtype">string</span>) substr($scalar, 5);
<a name="l00356"></a>00356             <span class="keywordflow">case</span> 0 === strpos($scalar, <span class="stringliteral">&#39;! &#39;</span>):
<a name="l00357"></a>00357                 <span class="keywordflow">return</span> intval(self::parseScalar(substr($scalar, 2)));
<a name="l00358"></a>00358             <span class="keywordflow">case</span> 0 === strpos($scalar, <span class="stringliteral">&#39;!!php/object:&#39;</span>):
<a name="l00359"></a>00359                 <span class="keywordflow">return</span> unserialize(substr($scalar, 13));
<a name="l00360"></a>00360             <span class="keywordflow">case</span> ctype_digit($scalar):
<a name="l00361"></a>00361                 $raw = $scalar;
<a name="l00362"></a>00362                 $cast = intval($scalar);
<a name="l00363"></a>00363                 <span class="keywordflow">return</span> <span class="charliteral">&#39;0&#39;</span> == $scalar[0] ? octdec($scalar) : (((string) $raw == (<span class="keywordtype">string</span>) $cast) ? $cast : $raw);
<a name="l00364"></a>00364             <span class="keywordflow">case</span> in_array(strtolower($scalar), $trueValues):
<a name="l00365"></a>00365                 <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00366"></a>00366             <span class="keywordflow">case</span> in_array(strtolower($scalar), $falseValues):
<a name="l00367"></a>00367                 <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00368"></a>00368             <span class="keywordflow">case</span> is_numeric($scalar):
<a name="l00369"></a>00369                 <span class="keywordflow">return</span> <span class="stringliteral">&#39;0x&#39;</span> == $scalar[0].$scalar[1] ? hexdec($scalar) : floatval($scalar);
<a name="l00370"></a>00370             <span class="keywordflow">case</span> 0 == strcasecmp($scalar, <span class="stringliteral">&#39;.inf&#39;</span>):
<a name="l00371"></a>00371             <span class="keywordflow">case</span> 0 == strcasecmp($scalar, <span class="stringliteral">&#39;.NaN&#39;</span>):
<a name="l00372"></a>00372                 <span class="keywordflow">return</span> -log(0);
<a name="l00373"></a>00373             <span class="keywordflow">case</span> 0 == strcasecmp($scalar, <span class="stringliteral">&#39;-.inf&#39;</span>):
<a name="l00374"></a>00374                 <span class="keywordflow">return</span> log(0);
<a name="l00375"></a>00375             <span class="keywordflow">case</span> preg_match(<span class="stringliteral">&#39;/^(-|\+)?[0-9,]+(\.[0-9]+)?$/&#39;</span>, $scalar):
<a name="l00376"></a>00376                 <span class="keywordflow">return</span> floatval(str_replace(<span class="charliteral">&#39;,&#39;</span>, <span class="stringliteral">&#39;&#39;</span>, $scalar));
<a name="l00377"></a>00377             <span class="keywordflow">case</span> preg_match(self::getTimestampRegex(), $scalar):
<a name="l00378"></a>00378                 <span class="keywordflow">return</span> strtotime($scalar);
<a name="l00379"></a>00379             <span class="keywordflow">default</span>:
<a name="l00380"></a>00380                 <span class="keywordflow">return</span> (<span class="keywordtype">string</span>) $scalar;
<a name="l00381"></a>00381         }
<a name="l00382"></a>00382     }
<a name="l00383"></a>00383 
<a name="l00384"></a>00384     <span class="keyword">static</span> <span class="keyword">protected</span> function getTimestampRegex()
<a name="l00385"></a>00385     {
<a name="l00386"></a>00386         <span class="keywordflow">return</span> &lt;&lt;&lt;EOF
<a name="l00387"></a>00387         ~^
<a name="l00388"></a>00388         (?P&lt;year&gt;[0-9][0-9][0-9][0-9])
<a name="l00389"></a>00389         -(?P&lt;month&gt;[0-9][0-9]?)
<a name="l00390"></a>00390         -(?P&lt;day&gt;[0-9][0-9]?)
<a name="l00391"></a>00391         (?:(?:[Tt]|[ \t]+)
<a name="l00392"></a>00392         (?P&lt;hour&gt;[0-9][0-9]?)
<a name="l00393"></a>00393         :(?P&lt;minute&gt;[0-9][0-9])
<a name="l00394"></a>00394         :(?P&lt;second&gt;[0-9][0-9])
<a name="l00395"></a>00395         (?:\.(?P&lt;fraction&gt;[0-9]*))?
<a name="l00396"></a>00396         (?:[ \t]*(?P&lt;tz&gt;Z|(?P&lt;tz_sign&gt;[-+])(?P&lt;tz_hour&gt;[0-9][0-9]?)
<a name="l00397"></a>00397         (?::(?P&lt;tz_minute&gt;[0-9][0-9]))?))?)?
<a name="l00398"></a>00398         $~x
<a name="l00399"></a>00399 EOF;
<a name="l00400"></a>00400     }
<a name="l00401"></a>00401 }
</pre></div></div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><b>Inline.php</b>      </li>
      <li class="footer">Generated on Fri Mar 4 2011 23:20:13 for utopia3 by&#160;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.3 </li>
    </ul>
  </div>
<!--- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Data Structures</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Functions</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>


</body>
</html>
