<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>utopia3: trunk/lib/components/mallocworks/Validator/Validator.php Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript">
$(document).ready(initResizable);
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body onload='searchBox.OnSelectItem(0);'>
<!-- Generated by Doxygen 1.7.3 -->
<script type="text/javascript"><!--
var searchBox = new SearchBox("searchBox", "search",false,'Search');
--></script>
<div id="top">
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">utopia3</div>
   <div id="projectbrief">utopia framework - version3</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.html"><span>Namespaces</span></a></li>
      <li><a href="annotated.html"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li id="searchli">
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('_validator_8php.html','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<h1>trunk/lib/components/mallocworks/Validator/Validator.php</h1>  </div>
</div>
<div class="contents">
<div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 &lt;?php
<a name="l00002"></a>00002 <span class="keyword">namespace </span>Utopia\Components\Validator;
<a name="l00003"></a>00003 
<a name="l00004"></a>00004 use Utopia\Components\Object\DataObject;
<a name="l00005"></a>00005 use Utopia\Components\DependencyInjection\ServiceContainer;
<a name="l00006"></a>00006 
<a name="l00007"></a><a class="code" href="class_utopia_1_1_components_1_1_validator_1_1_validator.html">00007</a> <span class="keyword">class </span><a class="code" href="class_utopia_1_1_components_1_1_validator_1_1_validator.html">Validator</a> {
<a name="l00008"></a>00008 
<a name="l00009"></a>00009     <span class="keyword">static</span> <span class="keyword">private</span> $_whitelist = array(<span class="stringliteral">&#39;req&#39;</span>, <span class="stringliteral">&#39;def&#39;</span>, <span class="stringliteral">&#39;type&#39;</span>, <span class="stringliteral">&#39;opts&#39;</span>, <span class="stringliteral">&#39;info&#39;</span>, <span class="stringliteral">&#39;map&#39;</span>);
<a name="l00010"></a>00010 
<a name="l00011"></a>00011     <span class="keyword">private</span> $_spec_raw;
<a name="l00012"></a>00012     <span class="keyword">private</span> $_data;    <span class="comment">//DataObj</span>
<a name="l00013"></a>00013     <span class="keyword">private</span> $_sc;      <span class="comment">//Builder</span>
<a name="l00014"></a>00014     <span class="keyword">private</span> $_parser;  <span class="comment">//Parser</span>
<a name="l00015"></a>00015 
<a name="l00016"></a>00016     <span class="keyword">public</span> function __construct() {
<a name="l00017"></a>00017         $this-&gt;_data = <span class="keyword">new</span> DataObject();
<a name="l00018"></a>00018     }
<a name="l00019"></a>00019 
<a name="l00020"></a>00020     <span class="keyword">public</span> function setServiceContainer(ServiceContainer $sc) {
<a name="l00021"></a>00021         $this-&gt;_sc = $sc;
<a name="l00022"></a>00022         <span class="keywordflow">return</span> $this;
<a name="l00023"></a>00023     }
<a name="l00024"></a>00024 
<a name="l00025"></a>00025     <span class="keyword">public</span> function setSpec($spec) {
<a name="l00026"></a>00026         $this-&gt;_spec_raw = $spec;
<a name="l00027"></a>00027         $this-&gt;_data-&gt;del(<span class="stringliteral">&#39;raw&#39;</span>)-&gt;del(<span class="stringliteral">&#39;filtered&#39;</span>)-&gt;del(<span class="stringliteral">&#39;missed&#39;</span>);
<a name="l00028"></a>00028         <span class="keywordflow">return</span> $this;
<a name="l00029"></a>00029     }
<a name="l00030"></a>00030 
<a name="l00031"></a>00031     <span class="keyword">public</span> function getSpec() {
<a name="l00032"></a>00032         $this-&gt;_loadSpec();
<a name="l00033"></a>00033         <span class="keywordflow">return</span> $this-&gt;_data-&gt;spec;
<a name="l00034"></a>00034     }
<a name="l00035"></a>00035 
<a name="l00042"></a><a class="code" href="class_utopia_1_1_components_1_1_validator_1_1_validator.html#a54a539a85236b68c77757a1f09739ad6">00042</a>     <span class="keyword">public</span> function <a class="code" href="class_utopia_1_1_components_1_1_validator_1_1_validator.html#a54a539a85236b68c77757a1f09739ad6">validate</a>(array $inputs){
<a name="l00043"></a>00043         $this-&gt;_loadSpec();
<a name="l00044"></a>00044         $this-&gt;_data-&gt;raw = $inputs;
<a name="l00045"></a>00045         $this-&gt;_data-&gt;filtered = array();
<a name="l00046"></a>00046         $this-&gt;_data-&gt;success = <span class="keyword">true</span>;
<a name="l00047"></a>00047 
<a name="l00048"></a>00048         $spec = $this-&gt;_data-&gt;spec;
<a name="l00049"></a>00049         reset($spec);
<a name="l00050"></a>00050         <span class="keywordflow">while</span> (current($spec) != <span class="keyword">false</span>) {
<a name="l00051"></a>00051             $key = key($spec);
<a name="l00052"></a>00052             $vals = current($spec);
<a name="l00053"></a>00053 
<a name="l00054"></a>00054             <span class="comment">// check required and defaults</span>
<a name="l00055"></a>00055             <span class="keywordflow">if</span> (!isset($this-&gt;_data-&gt;{<span class="stringliteral">&quot;raw&quot;</span>.SEP.$key}) &amp;&amp; isset($vals[<span class="stringliteral">&#39;req&#39;</span>]) &amp;&amp; $vals[<span class="stringliteral">&#39;req&#39;</span>] == <span class="keyword">true</span>) {
<a name="l00056"></a>00056                 <span class="keywordflow">if</span> (isset($vals[<span class="stringliteral">&#39;def&#39;</span>])) {
<a name="l00057"></a>00057                     $this-&gt;_data-&gt;{<span class="stringliteral">&quot;filtered&quot;</span>.SEP.$key} = $vals[<span class="stringliteral">&#39;def&#39;</span>];
<a name="l00058"></a>00058                 } <span class="keywordflow">else</span> {
<a name="l00059"></a>00059                     <span class="comment">//ERROR required input</span>
<a name="l00060"></a>00060                     $this-&gt;_sc-&gt;logger-&gt;log(<span class="stringliteral">&quot;ERROR: required field &#39;$key&#39; missing&quot;</span>, \Utopia\Components\Logger\Log::LEVEL_ERROR);
<a name="l00061"></a>00061                     $this-&gt;_data-&gt;success = <span class="keyword">false</span>;
<a name="l00062"></a>00062                 }
<a name="l00063"></a>00063             } elseif (!isset($this-&gt;_data-&gt;{<span class="stringliteral">&quot;raw&quot;</span>.SEP.$key})) {
<a name="l00064"></a>00064                 <span class="comment">//not required input missing, fine, move to next</span>
<a name="l00065"></a>00065                 next($spec);
<a name="l00066"></a>00066                 <span class="keywordflow">continue</span>;
<a name="l00067"></a>00067             } <span class="keywordflow">else</span> {
<a name="l00068"></a>00068                 $this-&gt;_data-&gt;{<span class="stringliteral">&quot;filtered&quot;</span>.SEP.$key} = $this-&gt;_data-&gt;{<span class="stringliteral">&quot;raw&quot;</span>.SEP.$key};
<a name="l00069"></a>00069             }
<a name="l00070"></a>00070 
<a name="l00071"></a>00071             <span class="comment">// type check</span>
<a name="l00072"></a>00072             $type = <span class="keyword">false</span>;
<a name="l00073"></a>00073             <span class="keywordflow">if</span> (isset($vals[<span class="stringliteral">&#39;type&#39;</span>])) {
<a name="l00074"></a>00074                 <span class="keywordflow">if</span> (is_array($vals[<span class="stringliteral">&#39;type&#39;</span>])) {
<a name="l00075"></a>00075                     $type = <span class="stringliteral">&#39;choice&#39;</span>;
<a name="l00076"></a>00076                     $argument = $vals[<span class="stringliteral">&#39;type&#39;</span>];
<a name="l00077"></a>00077                 } <span class="keywordflow">else</span> {
<a name="l00078"></a>00078                     preg_match_all(<span class="stringliteral">&#39;/(\w*)(\((\d*)\))?/&#39;</span>, $vals[<span class="stringliteral">&#39;type&#39;</span>], $arr, PREG_PATTERN_ORDER);
<a name="l00079"></a>00079                     $type = $arr[1][0];
<a name="l00080"></a>00080                     $argument = isset($arr[3][0]) &amp;&amp; !empty($arr[3][0])?$arr[3][0]: -1;
<a name="l00081"></a>00081                 }
<a name="l00082"></a>00082 
<a name="l00083"></a>00083                 <span class="comment">//add type_check checker</span>
<a name="l00084"></a>00084                 <span class="keywordflow">if</span> (!isset($vals[<span class="stringliteral">&#39;opts&#39;</span>])) {
<a name="l00085"></a>00085                     $vals[<span class="stringliteral">&#39;opts&#39;</span>] = array();
<a name="l00086"></a>00086                 }
<a name="l00087"></a>00087 
<a name="l00088"></a>00088                 array_unshift($vals[<span class="stringliteral">&#39;opts&#39;</span>],
<a name="l00089"></a>00089                     array(<span class="stringliteral">&#39;type_filter&#39;</span>,array(<span class="stringliteral">&#39;type&#39;</span>=&gt;$type, <span class="stringliteral">&#39;arg&#39;</span>=&gt;$argument))
<a name="l00090"></a>00090                 );
<a name="l00091"></a>00091             }
<a name="l00092"></a>00092 
<a name="l00093"></a>00093             <span class="comment">// check if subarray is allowed/exist</span>
<a name="l00094"></a>00094             <span class="keywordflow">if</span> (!$type || $type == <span class="stringliteral">&#39;array&#39;</span>){
<a name="l00095"></a>00095                 <span class="comment">//find subarray</span>
<a name="l00096"></a>00096                 <span class="keywordflow">foreach</span> (array_diff(array_keys($vals), self::$_whitelist) as $subkey) {
<a name="l00097"></a>00097                     $spec[$key.SEP.$subkey] = $vals[$subkey];
<a name="l00098"></a>00098                 }
<a name="l00099"></a>00099             }
<a name="l00100"></a>00100 
<a name="l00101"></a>00101             <span class="comment">// filters and checks</span>
<a name="l00102"></a>00102             <span class="keywordflow">if</span> (isset($vals[<span class="stringliteral">&#39;opts&#39;</span>]) &amp;&amp; is_array($vals[<span class="stringliteral">&#39;opts&#39;</span>])) {
<a name="l00103"></a>00103                 <span class="keywordflow">foreach</span>($vals[<span class="stringliteral">&#39;opts&#39;</span>] as $opt) {
<a name="l00104"></a>00104                     $op = $opt[0];
<a name="l00105"></a>00105                     $params = $opt[1];
<a name="l00106"></a>00106 
<a name="l00107"></a>00107                     <span class="keywordflow">if</span> (!empty($params)) {
<a name="l00108"></a>00108                         <span class="keywordflow">foreach</span>($params as &amp;$param) {
<a name="l00109"></a>00109                             <span class="comment">//supports one level replacement only for now&#39;</span>
<a name="l00110"></a>00110                             <span class="keywordflow">if</span> (is_array($param)) {
<a name="l00111"></a>00111                                 <span class="keywordflow">continue</span>;
<a name="l00112"></a>00112                             }
<a name="l00113"></a>00113                             $replaceable = preg_match(<span class="stringliteral">&#39;/^%(\w*)\%$/&#39;</span>, $param, $matches);
<a name="l00114"></a>00114                             <span class="keywordflow">if</span> ($replaceable) {
<a name="l00115"></a>00115                                 $param = $this-&gt;_data-&gt;get(<span class="stringliteral">&quot;raw&gt;{$matches[1]}&quot;</span>);
<a name="l00116"></a>00116                             }
<a name="l00117"></a>00117                         }
<a name="l00118"></a>00118                         unset($param);
<a name="l00119"></a>00119                     }
<a name="l00120"></a>00120 
<a name="l00121"></a>00121                     <span class="keywordflow">if</span> (preg_match(<span class="stringliteral">&#39;/[\w_]*check/&#39;</span>, $op)) {
<a name="l00122"></a>00122                         <span class="keywordflow">try</span> {
<a name="l00123"></a>00123                             $rtn = $this-&gt;_doCheck($op, $this-&gt;_data-&gt;{<span class="stringliteral">&quot;filtered&quot;</span>.SEP.$key}, $params);
<a name="l00124"></a>00124                         } <span class="keywordflow">catch</span> (Exception $e) {
<a name="l00125"></a>00125                             $this-&gt;_sc-&gt;logger-&gt;log(<span class="stringliteral">&quot;ERROR: checker exception, &quot;</span>.$e-&gt;getMessage(), \Utopia\Components\Logger\Log::LEVEL_ERROR);
<a name="l00126"></a>00126                             $this-&gt;_data-&gt;success = <span class="keyword">false</span>;
<a name="l00127"></a>00127                         }
<a name="l00128"></a>00128                         <span class="keywordflow">if</span> ($rtn == <span class="keyword">false</span>) {
<a name="l00129"></a>00129                             <span class="comment">//ERROR check returned error</span>
<a name="l00130"></a>00130                             $this-&gt;_sc-&gt;logger-&gt;log(<span class="stringliteral">&quot;ERROR: $op returned error&quot;</span>, \Utopia\Components\Logger\Log::LEVEL_ERROR);
<a name="l00131"></a>00131                             $this-&gt;_data-&gt;success = <span class="keyword">false</span>;
<a name="l00132"></a>00132                         }
<a name="l00133"></a>00133                     } elseif (preg_match(<span class="stringliteral">&#39;/[\w_]*filter/&#39;</span>, $op)) {
<a name="l00134"></a>00134                         <span class="keywordflow">try</span> {
<a name="l00135"></a>00135                             $rtnval = $this-&gt;_doFilter($op, $this-&gt;_data-&gt;{<span class="stringliteral">&quot;filtered&quot;</span>.SEP.$key}, $params);
<a name="l00136"></a>00136                             $this-&gt;_data-&gt;{<span class="stringliteral">&quot;filtered&quot;</span>.SEP.$key} = $rtnval;
<a name="l00137"></a>00137                         } <span class="keywordflow">catch</span> (ValidatorException $e) {
<a name="l00138"></a>00138                             $this-&gt;_sc-&gt;logger-&gt;log(<span class="stringliteral">&quot;ERROR: filter exception, &quot;</span>.$e-&gt;getMessage(), \Utopia\Components\Logger\Log::LEVEL_ERROR);
<a name="l00139"></a>00139                             $this-&gt;_data-&gt;success = <span class="keyword">false</span>;
<a name="l00140"></a>00140                         }
<a name="l00141"></a>00141                     } <span class="keywordflow">else</span> {
<a name="l00142"></a>00142                         <span class="comment">//EXCEPTION: operation unknown</span>
<a name="l00143"></a>00143                         $this-&gt;_sc-&gt;logger-&gt;log(<span class="stringliteral">&quot;ERROR: unknown operation &#39;$op&#39;, config error?&quot;</span>, \Utopia\Components\Logger\Log::LEVEL_ERROR);
<a name="l00144"></a>00144                         $this-&gt;_data-&gt;success = <span class="keyword">false</span>;
<a name="l00145"></a>00145                     }
<a name="l00146"></a>00146                 }
<a name="l00147"></a>00147             }
<a name="l00148"></a>00148 
<a name="l00149"></a>00149             <span class="comment">//perform mapping if &#39;map&#39; field is set</span>
<a name="l00150"></a>00150             <span class="keywordflow">if</span> (isset($vals[<span class="stringliteral">&#39;map&#39;</span>]) &amp;&amp; !empty($vals[<span class="stringliteral">&#39;map&#39;</span>])){
<a name="l00151"></a>00151                 $this-&gt;_data-&gt;{<span class="stringliteral">&quot;filtered&quot;</span>.SEP.$vals[<span class="stringliteral">&#39;map&#39;</span>]} = $this-&gt;_data-&gt;{<span class="stringliteral">&quot;filtered&quot;</span>.SEP.$key};
<a name="l00152"></a>00152                 $this-&gt;_data-&gt;del(<span class="stringliteral">&quot;filtered&quot;</span>.SEP.$key);
<a name="l00153"></a>00153             }
<a name="l00154"></a>00154 
<a name="l00155"></a>00155             <span class="comment">//next value</span>
<a name="l00156"></a>00156             next($spec);
<a name="l00157"></a>00157         }
<a name="l00158"></a>00158 
<a name="l00159"></a>00159         <span class="comment">//enter filtered information</span>
<a name="l00160"></a>00160         $this-&gt;_data-&gt;missed = array_diff_key($this-&gt;_data-&gt;raw, $this-&gt;_data-&gt;filtered);
<a name="l00161"></a>00161 
<a name="l00162"></a>00162         <span class="keywordflow">return</span> $this;
<a name="l00163"></a>00163     }
<a name="l00164"></a>00164 
<a name="l00165"></a>00165     <span class="keyword">public</span> function isSuccess(){
<a name="l00166"></a>00166         <span class="keywordflow">return</span> $this-&gt;_data-&gt;success;
<a name="l00167"></a>00167     }
<a name="l00168"></a>00168 
<a name="l00169"></a>00169     <span class="keyword">public</span> function getRaw(){
<a name="l00170"></a>00170         <span class="keywordflow">return</span> isset($this-&gt;_data-&gt;raw)?
<a name="l00171"></a>00171             $this-&gt;_data-&gt;raw:
<a name="l00172"></a>00172             array();
<a name="l00173"></a>00173     }
<a name="l00174"></a>00174 
<a name="l00175"></a>00175     <span class="keyword">public</span> function getFiltered(){
<a name="l00176"></a>00176         <span class="keywordflow">return</span> isset($this-&gt;_data-&gt;filtered)?
<a name="l00177"></a>00177             $this-&gt;_data-&gt;filtered:
<a name="l00178"></a>00178             array();
<a name="l00179"></a>00179     }
<a name="l00180"></a>00180 
<a name="l00181"></a>00181     <span class="keyword">public</span> function getMissed(){
<a name="l00182"></a>00182         <span class="keywordflow">return</span> isset($this-&gt;_data-&gt;missed)?
<a name="l00183"></a>00183             $this-&gt;_data-&gt;missed:
<a name="l00184"></a>00184             array();
<a name="l00185"></a>00185     }
<a name="l00186"></a>00186 
<a name="l00187"></a>00187     <span class="keyword">private</span> function _doCheck($op, $input, $params) {
<a name="l00188"></a>00188         $name = substr($op, 0, strrpos($op, <span class="charliteral">&#39;_&#39;</span>));
<a name="l00189"></a>00189         $checker = $this-&gt;_sc-&gt;checker($name);
<a name="l00190"></a>00190         <span class="keywordflow">return</span> $checker-&gt;execute($input, $params)-&gt;isSuccess();
<a name="l00191"></a>00191     }
<a name="l00192"></a>00192 
<a name="l00193"></a>00193     <span class="keyword">private</span> function _doFilter($op, $input, $params) {
<a name="l00194"></a>00194         $name = substr($op, 0, strrpos($op, <span class="charliteral">&#39;_&#39;</span>));
<a name="l00195"></a>00195         $checker = $this-&gt;_sc-&gt;filter($name);
<a name="l00196"></a>00196         <span class="keywordflow">return</span> $checker-&gt;execute($input, $params)-&gt;getData();
<a name="l00197"></a>00197     }
<a name="l00198"></a>00198 
<a name="l00199"></a>00199     <span class="keyword">private</span> function _loadSpec(){
<a name="l00200"></a>00200         <span class="keywordflow">if</span> (!isset($this-&gt;_spec_raw)) {
<a name="l00201"></a>00201             <span class="keywordflow">return</span> array();
<a name="l00202"></a>00202         }
<a name="l00203"></a>00203         <span class="keywordflow">if</span> (!isset($this-&gt;_parser)) {
<a name="l00204"></a>00204             $this-&gt;_parser = $this-&gt;_sc-&gt;parser;
<a name="l00205"></a>00205         }
<a name="l00206"></a>00206         $this-&gt;_data-&gt;spec = $this-&gt;_parser-&gt;asArray($this-&gt;_spec_raw);
<a name="l00207"></a>00207         <span class="keywordflow">return</span> $this-&gt;_data-&gt;spec;
<a name="l00208"></a>00208     }
<a name="l00209"></a>00209 
<a name="l00210"></a>00210     <span class="keyword">static</span> <span class="keyword">private</span> function _camelize($id)
<a name="l00211"></a>00211     {
<a name="l00212"></a>00212         <span class="keywordflow">return</span> preg_replace(array(<span class="stringliteral">&#39;/(^|_)+(.)/e&#39;</span>, <span class="stringliteral">&#39;/\.(.)/e&#39;</span>), array(<span class="stringliteral">&quot;strtoupper(&#39;\\2&#39;)&quot;</span>, <span class="stringliteral">&quot;&#39;_&#39;.strtoupper(&#39;\\1&#39;)&quot;</span>), $id);
<a name="l00213"></a>00213     }
<a name="l00214"></a>00214 
<a name="l00215"></a>00215     <span class="keyword">static</span> <span class="keyword">private</span> function _underscore($id)
<a name="l00216"></a>00216     {
<a name="l00217"></a>00217         <span class="keywordflow">return</span> strtolower(preg_replace(array(<span class="stringliteral">&#39;/([A-Z]+)([A-Z][a-z])/&#39;</span>, <span class="stringliteral">&#39;/([a-z\d])([A-Z])/&#39;</span>), array(<span class="stringliteral">&#39;\\1_\\2&#39;</span>, <span class="stringliteral">&#39;\\1_\\2&#39;</span>), strtr($id, <span class="charliteral">&#39;_&#39;</span>, <span class="charliteral">&#39;.&#39;</span>)));
<a name="l00218"></a>00218     }
<a name="l00219"></a>00219 }
</pre></div></div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><b>Validator.php</b>      </li>
      <li class="footer">Generated on Fri Mar 4 2011 23:22:16 for utopia3 by&#160;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.3 </li>
    </ul>
  </div>
<!--- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Data Structures</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Functions</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>


</body>
</html>
